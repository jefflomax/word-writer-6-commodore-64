;
 TITLE DISPATCH
 PW 91
;
; THIS MODULE HANDLES CALLING FUNCTIONS, THE TWO TABLES, 
; FUNCTION_TABLE AND KEY_TABLE NEED CORRESPONDING ENTRIES
; TO MAP A KEY TO A FUNCTION. (REMEMBER, FUNCTION ADDRESSES
; ARE ALWAYS -1.)  THE FIRST "GROUP" OF EACH ARE THOSE 
; FUNCTIONS VIABLE IN BLOCK SELECT ONLY.  TO CHANGE THE KEY
; A FUNCTION IS ON, JUST CHANGE IT'S HEX VALUE IN KEY_TABLE
; AND BE SURE NO OTHER FUNCTIONS HAVE THAT SAME KEY.
;
;*NOTE* SOME FUNCTIONS ARE ALSO NOT ALLOWED IN OUTLINE MODE, SO
;WHY NOT PUT THAT EXCLUSION HERE?  DITTO FOR TEXT MODE
;
;SOME FUNCTIONS ARE NOT WANTED IN DATABASE MODE:
;FC_SCREEN_CONTAIN
;FC_DELETE_BLOCK
;FC_EMBEDDED_STYLES
;FC_TAB_FORWARD
;FC_FONT_WINDOW
;FC_INSERT_CHECKMARK
;FC_TOGGLE_HRET
;FC_SET_BLOCK
;FC_REFORMAT_DOC
;FC_END_OF_RECORD
;FC_ENTER_OUTLINER
;FC_OUTLINE_UPLEVEL/DOWNLEVEL
;FC_SET_INDEX
;-DELETE LINE (RECORD?)
;-INSERT LINE (RECORD?)
;
 PUBLIC XLATE
;
 INCLUDE WWSETUP.ASM
 INCLUDE VARIABLS.ASM
;
VEC_SET_KEY_MATRIX:	EQU $028F	;ADDRESS OF ROUTINE TO SET KEY_MATRIX
SHIFT_LEVEL:		EQU $028D	;CURRENT SHIFT LEVEL
ENQUE_KEY:	        EQU $EAE0	;CONVERT MATRIX POSITION TO KEY/QUEUE IT
KEY_MATRIX:             EQU $F5         ;ZP KEYTAB POINTER
;
 PUBLIC LAST_KEY
 PUBLIC PROCESS_LINE      
 PUBLIC REPLACE_KEY_MATRIX
 PUBLIC RESTRICT_CURSOR_BLINK
 PUBLIC SET_CASE_TOGGLE
 PUBLIC VEC_SET_KEY_MATRIX
 PUBLIC VSCM_COPY			;Save original vector
;
 EXTERN AX_INTO_PT
 EXTERN AX_INTO_START_BLOCK ;EDITLN
 EXTERN DISPLY
 EXTERN EDIT_LINE
 EXTERN FC_SCREEN_CONSTRAIN
 EXTERN FC_CURSOR_RIGHT
 EXTERN FC_CURSOR_DOWN_DSP
 EXTERN FC_CURSOR_LEFT
 EXTERN FC_CURSOR_UP_DSP
 EXTERN FC_DELETE_BLOCK
 EXTERN FC_EMBEDDED_STYLES
 EXTERN FC_FCURSOR_DOWN
 EXTERN FC_FCURSOR_UP
 EXTERN FC_GOTO_PAGE			;SUPPORT
 EXTERN FC_END_OF_LINE
 EXTERN FC_BEGINNING_OF_LINE_DSP
 EXTERN FC_HOME_CURSOR
 EXTERN FC_INS_RETURN
 EXTERN FC_CLEAR_HOME_DSP
 EXTERN FC_PAGE_FORWARD
 EXTERN FC_PAGE_BACKWARD
 EXTERN FC_BOTTOM_OF_SCREEN
 EXTERN FC_END_OF_DOCUMENT
;
 EXTERN FC_RETURN
 EXTERN FC_DELETE_CHAR
 EXTERN FC_DELETE_CHAR_RT
 EXTERN FC_INSERT_CHAR
; EXTERN FC_INSERT_LINE
 EXTERN OVR_FC_INSERT_LINE		;TABLED, DOUBLESHOT
; EXTERN FC_DELETE_LINE
 EXTERN OVR_FC_DELETE_LINE
 EXTERN FC_DELETE_WORD
 EXTERN OVR_FC_TAB_FORWARD
 EXTERN FC_SHOW_STATUS
 EXTERN OVR_FC_FONT_WINDOW
;EXTERN FC_FORCE_FORMAT
 EXTERN OVR_FC_FORMAT			;TABLED, DOUBLESHOT 
; EXTERN FC_TOGGLE_TAB
 EXTERN FC_INSERT_CHECKMARK
 EXTERN FC_TOGGLE_HRET
 EXTERN FC_MACRO_RECORD
 EXTERN FC_MACRO_PLAY
; EXTERN FC_CLEAR_ALL_TABS
 EXTERN FC_PLAY_MACRO_TWO
 EXTERN FC_PRINT_FILE
 EXTERN FC_SET_BLOCK
 EXTERN FC_REFORMAT_DOC
 EXTERN FC_EXIT_OR_RESET
;
.IF CALCULATOR_PRESENT
 EXTERN FC_CALCULATOR
.ENDIF
 EXTERN FC_CATALOG
 EXTERN FC_CHANGE_DEVICE
 EXTERN FC_CHECK_SPELLING
 EXTERN FC_END_OF_RECORD
 EXTERN FC_ENTER_OUTLINER
 EXTERN FC_DISK_COMMAND
 EXTERN FC_HELP
; EXTERN FC_LOAD_DEF_PRINT_FILE
 EXTERN FC_LOAD_FILE
; EXTERN FC_MINI_DATABASE
 EXTERN FC_OUTLINE_UPLEVEL
 EXTERN FC_OUTLINE_DOWNLEVEL
 EXTERN FC_PRINTER_CODES
 EXTERN FC_RUN_STOP
 EXTERN FC_SAVE_DEF_PRINT_FILE
 EXTERN FC_SAVE_FILE
 EXTERN FC_SAVE_LOAD_MERGE
 EXTERN FC_SEARCH
 EXTERN FC_SEARCH_AGAIN
; EXTERN FC_SET_INDEX
 EXTERN OVR_FC_SORT_INDEX		;DOUBLESHOT
 EXTERN FC_SHOW_MEMORY
 EXTERN FC_THESAURUS_LOOKUP
 EXTERN FC_TOGGLE_INSERT
 EXTERN SET_MARK
 EXTERN FC_GOTO_MARK 
;
 EXTERN GETIN
 EXTERN HEADER
 EXTERN HEADAT
; EXTERN IN_DATABASE_MODE
 EXTERN INC_PT_BY_1         ;POINTER = 1 + POINTER
 EXTERN IW_INTO_AX
 EXTERN JUSTIFY_FORMAT
 EXTERN MC_FORM_MARK_END        
 EXTERN MESSAGE_ON
 EXTERN NEW_LINE_SPACE
 EXTERN ON_LAST_LINE
 EXTERN OV_SHOW_FIELD_NAME		;MINIDB,TABLED
 EXTERN PRTP0
 EXTERN PT_INTO_AX
 EXTERN PRKECY
 EXTERN SERPP0
 EXTERN SET_SYSTEM_MARK_M1_DIRECT
 EXTERN SET_SYSTEM_MARK_DIRECT
 EXTERN START_BLOCK
 EXTERN START_BLK_1ST_LINE_CHAR
 EXTERN TAB_PRESENT_IN_LINE
 EXTERN TEXCFE
 EXTERN TEXT_PLS_CURCAR_INTO_AX
 EXTERN END_BLOCK 
 EXTERN UPPER_CASE_LOCK
 EXTERN WORK_KEY
;
OVERLAY_MARK_END:
.LIST ON
;
LAST_KEY:
 DB 0
;
PROCESS_LINE:
PR_LINE_RTS: EQU PROCESS_LINE-1
;
;
; LDA IS_JOHN_HERE
; BEQ ?NO_JOHN
;;
; JSR FC_SHOW_STATUS
;;
; LDA IS_JOHN_HERE
; STA MESSAGE_ON
; CMP #$FF
; BEQ ?NO_JOHN 
;; 
;
 JSR OV_SHOW_FIELD_NAME		;SHOW FIELD IF IN MINIDB
;
; LDA JUSTIFY_FORMAT
; STA $401
;
; LDA TAB_PRESENT_IN_LINE
; STA $400
;
; LDA LINE_LENGTH
; LDX LINE_LENGTH+1
; STA $400
; STX $401
;*REMOVE* 
; STA POINTER
; STX POINTER+1 
; LDX #$4F
; JSR PRTP0
;;
; LDA CUR_PAGE_LENGTH
; LDX CUR_PAGE_LENGTH+1
; STA POINTER
; STX POINTER+1
; LDX #$2C
; JSR PRTP0
;
; LDA BIGGEST_POINTSIZE
; STA $401
; LDA NEW_LINE_SPACE
; STA $402 
;
 LDA MOVE_COPY_HL           ;ARE WE DOING A MOVE/COPY RANGE SELECTION?
 BPL ?READ_KEY              ;IF NOT, READ A KEY AS NORMAL
;
 LDX #0
 STX CURFLG
;
 CMP #$FF                   ;NEXT POSITION MODE?
 BEQ ?READ_KEY              ;DON'T CHANGE BLOCK BUT SHOW/RESTRICT
;
 JSR TEXT_PLS_CURCAR_INTO_AX
;
 CPX START_BLOCK+1
 BNE ?SKP
 CMP START_BLOCK
?SKP:
 BCC ?SET_AS_START          ;BIF TEXT < START_BLOCK
;
 STA END_BLOCK
 STX END_BLOCK+1            ;TEXT >=START, SET AS END   
 JSR ON_LAST_LINE
;
 BNE ?OK                    ;NOT BESIDE EOT
 LDA END_BLOCK
 BNE ?SKP1
 DEC END_BLOCK+1
?SKP1:
 DEC END_BLOCK
?OK:
 JMP ?REJOIN
;
?SET_AS_START:
 JSR AX_INTO_START_BLOCK
;
?REJOIN:
 JSR DISPLY
;
?READ_KEY:
 LDA CURRENT_KEY
 STA LAST_KEY
;
 JSR NORMAL_KEY_IN 
;
 LDX MESSAGE_ON             ;CLEAR REMAINING PROMPT
 BNE ?NO_CLEAR_HEADER       ;IF PRESENT
 INC MESSAGE_ON
 PHA
 JSR HEADER
 PLA
;
?NO_CLEAR_HEADER:
;
 LDX SPECL                  ;HANDLE FUNCTIONS
 BNE ?FUNCTIONS
;
 BIT MOVE_COPY_HL
 BMI ?J_PROCESS_LINE        ;NO KEYS PROCESSED IF IN MOVE
;
 JSR WORK_KEY               ;HANDLE REGULAR KEYS   
?J_PROCESS_LINE:
 JMP PROCESS_LINE
;
?FUNCTIONS:
; 
 LDX IN_DATABASE_MODE
 BEQ ?NOT_DB_MODE
 LDX #MINI_DATABASE_FUNCTIONS-KEY_TABLE
 BNE ?STORE
;
?NOT_DB_MODE:
 LDX #KEY_TABLE_E-KEY_TABLE
 BIT MOVE_COPY_HL
 BPL ?STORE
 LDX #BLOCK_SELECT_FUNCTIONS-KEY_TABLE
?STORE:
 STX ?FND_KEY_SM1
;
 LDX #0
?LOOP:
 CMP KEY_TABLE,X            ;SEARCH KEY_TABLE FOR MATCHING 
 BEQ ?FOUND_KEY             ;KEY, BIF FOUND
 INX
 DB $E0                     ;CPX #XX
?FND_KEY_SM1:
 DB 00
 BCC ?LOOP
;
 JSR FC_EMBEDDED_STYLES
; 
 JMP PROCESS_LINE
;
?FOUND_KEY:
 TAY                     ;SAVE .A
;
 LDA IN_DATABASE_MODE
 BEQ ?NOT_IN_DB_MODE
;
 CPX #BLOCK_SELECT_FUNCTIONS-KEY_TABLE-3
 BCC ?NOT_IN_DB_MODE
 CPX #BLOCK_SELECT_FUNCTIONS-KEY_TABLE
 BCC ?J_PROCESS_LINE
;
?NOT_IN_DB_MODE:
 LDA #>PR_LINE_RTS
 PHA                     ;SET RETURN ADDRESS TO PROCLINE
 LDA #<PR_LINE_RTS       ;ON STACK
 PHA
;
 TXA
 ASL A
 TAX
 LDA FUNCTION_TABLE+1,X
 PHA
 LDA FUNCTION_TABLE,X    ;SET ADDRESS OF FUNCTION
 PHA                     ;ON STACK
 TYA    ;RESTORE .A
A_RTS:
FC_NOTHING:
 RTS                     ;EXECUTE FUNCTION, RTS TO PROC_LINE 
;
;
FC_TOGGLE_CASE:
;
 LDA MOVE_COPY_HL           ;ARE WE DOING A MOVE/COPY RANGE SELECTION?
 BPL NO_BLOCK               ;IF NOT, READ A KEY AS NORMAL
;
.IF REMOVE_TEXT
 LDA START_BLK_1ST_LINE_CHAR
 CMP #CMARK		;IS THE FIRST LINE A CHECKMARK LINE?
 BNE ?GET_TYPE
;
 LDX #23		;'UNABLE TO FORMAT'
 JSR SERPP0
 STY MESSAGE_ON
 STY MOVE_COPY_HL       ;ELSE, CLEAR BLOCK
 JMP DISPLY
.ENDIF
;
?GET_TYPE:
 LDX #26                ;UPPER OR LOWER CASE?(U/L)
 JSR PRKECY
 LDY #$FF               ;$FF OR 0 FLAG
 CMP #'U'
 BEQ ?SET_ZRO
 CMP #'L'
 BNE ?GET_TYPE
;
 DB $24                 ;SKIP 1
?SET_ZRO:
 INY                    ;.Y = 0
 STY POINTER1           ;CASETYPE 0 = UPPER $FF = LOWER
;
 JSR IW_INTO_AX
 DW START_BLOCK 
 JSR AX_INTO_PT
;
?NOT_CHECK:
 JSR SET_SYSTEM_MARK_M1_DIRECT
; 
 LDY #0
 BEQ ?SLOOP
;
?LOOP:
 JSR INC_PT_BY_1         ;POINTER = 1 + POINTER
?SLOOP:
 LDA (POINTER),Y 
 BEQ ?SKIP
 CMP #$1B
 BCC ?LOWERC
 CMP #$41
 BCC ?SKIP
 CMP #$5B
 BCS ?SKIP
;
;UPPERCASE
 BIT POINTER1           ;IF BIT BPL, THEN SET TO UPPERCASE
 BPL ?NO_CHANGE
 AND #%10111111         ;MAKE LOWERCASE
 BNE ?DONE
; 
?LOWERC: 
 BIT POINTER1
 BMI ?NO_CHANGE
 ORA #%01000000  
?DONE:
?NO_CHANGE:
 STA (POINTER),Y
?SKIP:
;
 JSR PT_INTO_AX
 CPX END_BLOCK+1
 BNE ?LOOP
 CMP END_BLOCK
 BCC ?LOOP
 BEQ ?LOOP              ;B <= LOOP
;
 LDA #0
 STA MOVE_COPY_HL        ;CLEAR BLOCK
 JMP MC_FORM_MARK_END
; 
; 
NO_BLOCK:
;
 LDA UPPER_CASE_LOCK
 EOR #$FF
 STA UPPER_CASE_LOCK
SET_CASE_TOGGLE:
 LDA HEADAT+35
 EOR #$80 
 STA HEADAT+35  
 JMP HEADER 
;
;
FUNCTION_TABLE:
;
 DW FC_CURSOR_RIGHT-1
 DW FC_CURSOR_DOWN_DSP-1
 DW FC_CURSOR_LEFT-1
 DW FC_CURSOR_UP_DSP-1
 DW FC_FCURSOR_DOWN-1
 DW FC_FCURSOR_UP-1
 DW FC_END_OF_LINE-1
 DW FC_BEGINNING_OF_LINE_DSP-1
 DW FC_HOME_CURSOR-1
 DW FC_CLEAR_HOME_DSP-1
 DW FC_PAGE_FORWARD-1
 DW FC_PAGE_BACKWARD-1
 DW FC_BOTTOM_OF_SCREEN-1
 DW FC_END_OF_DOCUMENT-1
 DW FC_RUN_STOP-1
 DW FC_SEARCH_AGAIN-1
 DW FC_SEARCH-1
 DW FC_EXIT_OR_RESET-1
 DW FC_EXIT_OR_RESET-1
 DW FC_HELP-1
 DW FC_RETURN-1
 DW FC_TOGGLE_CASE-1
 DW FC_GOTO_PAGE-1
 DW FC_SET_BLOCK-1
 DW FC_SET_BLOCK-1
 DW FC_SET_BLOCK-1
;
;
 DW FC_INS_RETURN-1
 DW FC_DELETE_CHAR-1
 DW FC_DELETE_CHAR_RT-1
 DW FC_INSERT_CHAR-1
; DW FC_INSERT_LINE-1
 DW OVR_FC_INSERT_LINE-1
; DW FC_DELETE_LINE-1
 DW OVR_FC_DELETE_LINE-1
 DW FC_SHOW_STATUS-1
;DW FC_FORCE_FORMAT-1		;COMM-4
 DW OVR_FC_FORMAT-1		;COMM-4
; DW FC_TOGGLE_TAB-1
 DW FC_TOGGLE_HRET-1
 DW FC_MACRO_RECORD-1
 DW FC_MACRO_PLAY-1
; DW FC_CLEAR_ALL_TABS-1
 DW FC_SAVE_LOAD_MERGE-1
 DW FC_DISK_COMMAND-1
 DW FC_PRINTER_CODES-1
 DW FC_CHANGE_DEVICE-1
 DW FC_LOAD_FILE-1
 DW FC_SAVE_FILE-1 
 DW FC_CATALOG-1
 DW FC_CATALOG-1
 DW FC_TOGGLE_INSERT-1
 DW FC_CHECK_SPELLING-1
 DW FC_THESAURUS_LOOKUP-1
 DW FC_SHOW_MEMORY-1
; DW FC_TOGGLE_CASE-1
 DW FC_NOTHING-1
 DW FC_GOTO_MARK-1
 DW SET_MARK-1
.IF CALCULATOR_PRESENT
 DW FC_CALCULATOR-1
.ENDIF
; DW CNTRL_J-1
 DW FC_DELETE_WORD-1
 DW FC_PLAY_MACRO_TWO-1
; DW FC_MINI_DATABASE-1
 DW OVR_FC_SORT_INDEX-1		;DOUBLESHOT
 DW FC_ENTER_OUTLINER-1
 DW OVR_FC_FONT_WINDOW-1
;
;MINI_DATABASE_FUNCTIONS BEFORE HERE
; DW FC_SET_INDEX-1
 DW OVR_FC_TAB_FORWARD-1
 DW FC_OUTLINE_UPLEVEL-1
 DW FC_OUTLINE_DOWNLEVEL-1
 DW FC_SCREEN_CONSTRAIN-1
 DW FC_END_OF_RECORD-1
 DW FC_REFORMAT_DOC-1		;CTRL-CLRHOM
 DW FC_INSERT_CHECKMARK-1
 DW FC_PRINT_FILE-1
 DW FC_PRINT_FILE-1
;
KEY_TABLE:
;
 DB $1D ;CURSOR RIGHT
 DB $11 ;CURSOR DOWN
 DB $9D ;CURSOR LEFT
 DB $91 ;CURSOR UP
 DB $88 ;FCURSOR_DOWN          F7
 DB $8C ;FCURSOR_UP            F8
 DB $1E ;END_OF_LINE           CTRL-6
 DB $99 ;BEGINNING_OF_LINE     COMM-6
 DB $13 ;HOME_CURSOR           CLRHOM
 DB $07 ;HOME OF DOC           CTRL-G 
 DB $0E ;PAGE_FORWARD          CTRL-N 
 DB $10 ;PAGE_BACKWARD         CTRL-P
 DB $93 ;BOTTOM_OF_SCREEN      SCLEARHOM
 DB $A5 ;END_OF_DOCUMENT       COMM-G 
 DB $03 ;RUN_STOP              RUN_STOP
 DB $05 ;SEARCH_AGAIN          CTRL-2
 DB $90 ;FC_SEARCH             CTRL-1   
 DB $AB ;EXIT_OR_RESET         COMM-Q
 DB $9E ;EXIT_OR_RESET         CTRL-8
 DB $85 ;HELP SCREEN           F1
 DB $0D ;RETURN                RETURN
 DB $BC ;TOGGLE CASE           COMM-C
 DB $1C ;GOTO PAGE	       CTRL-3
 DB $81 ;SET_BLOCK             COMM-1        
 DB $96 ;MOVE_COPY             COMM-3
 DB $95 ;DELETE BLOCK/WORD     COMM-2
;
BLOCK_SELECT_FUNCTIONS:
;
 DB $8D ;SHIFT-RETURN          INSERT RETURN
 DB $14 ;DELETE                DEL
 DB $AC ;DELETE CHAR RT        COMM-D
 DB $94 ;INSERT_CHAR           INS
 DB $9F ;INSERT_LINE           CTRL-4
 DB $1F ;DELETE_LINE           CTRL-7
 DB $BB ;SHOW_STATUS           COMM-F
 DB $97 ;FORCE_FORMAT          COMM-4        
; DB $EE ;TOGGLE_TAB            CTRL-LEFTARROW
 DB $B2 ;TOGGLE_HRET           COMM-R
 DB $98 ;MACRO_RECORD          COMM-5
 DB $9C ;MACRO_PLAY            CTRL-5
; DB $EF ;CLEAR_ALL_TABS        CTRL-C CTRL-T EC
 DB $89 ;SAVE_LOAD_MERGE       F2  
 DB $9B ;DISK_COMMAND          COMM-8
 DB $A8 ;PRINTER_CODES         COMM-BRITPOUND
 DB $0F ;CHANGE_DEVICE         CTRL-O
 DB $B6 ;LOAD_FILE             COMM-L
 DB $AE ;SAVE_FILE             COMM-S
 DB $92 ;CATALOG               CTRL-0
 DB $BE ;CATALOG               COMM-V 
 DB $FE ;TOGGLE INSERT         CTRL-INS
 DB $86 ;CHECK SPELLING        F3
 DB $8A ;THESAURUS LOOKUP      F4
 DB $EB ;SHOW MEMORY           CTRL-Q CTRL-A 01
; DB $BC ;TOGGLE CASE           COMM-C
 DB $FF ;DO NOTHING
 DB $AA ;GOTO MARK             COMM-N 
 DB $F7 ;SET MARK              CTRL-S 
.IF CALCULATOR_PRESENT
 DB $1C ;CALCULATOR            CTRL-3
.ENDIF
; DB $B9 ;IS JOHN HERE          COMM-O (DEBUGGING ;#)
 DB $9A ;DELETE_WORD           COMM-7
 DB $F0 ;PLAY MACRO 2          CTRL-M
; DB $1C	;ENTER MINI-DATABASE   CTRL-3
 DB $8B ;SET INDEX             F6
 DB $87 ;ENTER OUTLINER        F5
 DB $06 ;FONT_WINDOW           CTRL-F ;?COMM-* 
;
MINI_DATABASE_FUNCTIONS: 
 DB $5F ;TAB_FORWARD           COMM-<-
 DB $F9 ;OUTLINE UPLEVEL RAISE CTRL-R
 DB $0C ;OUTLINE LOWER INDEX   CTRL-L
 DB $16 ;SCREEN CONSTRAIN      CTRL-V 
 DB $04 ;END OF RECORD         CTRL-D CTRL-E FA
 DB $ED ;REFORMAT_DOC          CTRL-CLRHOM
 DB $FC ;INSERT_CHECKMARK      CTRL-BRITPOUND
 DB $12 ;PRINT_FILE            CTRL-9
 DB $AF ;PRINT_FILE            COMM-P
;
KEY_TABLE_E:
;
NORMAL_KEY_IN:
 LDY #0 
;
GETKE1: 
 STY SPECL                  ;SPECIAL KEY OR NOT
 STY TEMP1                  ;COUNT UP
 LDY COLUMN                 ;GET CHARACTER
 LDA (SCREEN),Y             ;FROM SCREEN
 STA TEMP4                  ;HOLDLET
;
GETKE4:
 LDY #$F1                   ;COUNT UP
 STY TEMP3                  ;COUNTD
;
 LDA MOVE_COPY_HL           ;IF MOVE-COPY ON, 
 CMP #$80                   ;SELECT IN PROGRESS MODE?
 BEQ GETKIN                 ;NO CURSOR EFFECT
;
 LDY COLUMN                 ;TOGGLE
 LDA (SCREEN),Y             ;CURSOR
 EOR #$80                   
GETKE2:
 STA (SCREEN),Y             ;ON-SCREEN
GETKIN:
 JSR GETIN                  ;READ A KEY
;
RESTRICT_CURSOR_BLINK:
 JMP GETKE3
 INC TEMP1
 BNE GETKE3
 INC TEMP3
 BEQ GETKE4
GETKE3:
 CMP #0
 BEQ GETKIN
;
 LDX UPPER_CASE_LOCK        ;FORCE ALPHABETIC UPPER CASE?
 BEQ XLATE                  ;IF NO, SKIP
 CMP #$41                   ;LESS THAN PETASCII LOWER A?
 BCC XLATE                  ;LEAVE
 CMP #$DB                   ;GREATER THAN PETASCII UPPER Z++?
 BCS XLATE                  ;LEAVE   
 CMP #$5B                   ;LESS THAN PETASCII LOWER Z++?
 BCC ?FLIP_CASE             ;YES, FLIP CASE
 CMP #$C1                   ;LESS THAN PETASCII UPPER A?
 BCC XLATE                  ;LEAVE
?FLIP_CASE:
 EOR #$80                   ;LOWER <-> UPPER, TOGGLE HI BIT
;
XLATE:
 CMP #$A0
 BEQ XUPPER     ;DO NOT HARM .X
XLATE1:
 CMP #32
 BCC XSPEC
 CMP #$40
 BCC XNORM
 CMP #$5F
 BCC XLOWER
 CMP #$C0
 BCC XSPEC
 CMP #$DB
 BCC XUPPER
XSPEC:
 STA CURRENT_KEY
 STA SPECL
 LDY COLUMN 
 LDA TEMP4
 STA (SCREEN),Y ;UN-CURSER
 LDA CURRENT_KEY
 RTS
;
XLOWER:
 AND #$3F
XNORM:
 BNE XUPPE1
XUPPER:
 AND #$7F
XUPPE1:
 STA CURRENT_KEY
 RTS
;
;
;# DEBUG
;IS_JOHN_HERE:
; DB 0
;
;CNTRL_J:
; LDA IS_JOHN_HERE
; BEQ ?EIGHTY
; CMP #$80
; BEQ ?MAKEFF 
; LDA #$0
; STA MESSAGE_ON
; DB $2C
;?MAKEFF:
; LDA #$FF
; DB $2C
;?EIGHTY:
; LDA #$80
; STA IS_JOHN_HERE
; RTS
;
;
REPLACE_KEY_MATRIX:
;REPLACE KEY CONVERSION TABLES ROUTINE
;
 LDA SHIFT_LEVEL	;CURRENT SHIFT LEVEL
 CMP #4			;ILLEGAL OR CONTROL?
 BCC JMP_VSCM_COPY	;JMP TO ORIGINAL VECTOR FOR KEY TABLE HANDLING
 LDA #<CNT_KEY_TABLE	;GET LSB OF KEY CONVERSION TABLE ADDRESS
 STA KEY_MATRIX	;LSB ADDRESS OF ROUTINE TO SET KEY_MATRIX
 LDA #>CNT_KEY_TABLE	;GET MSB OF KEY CONVERSION TABLE ADDRESS
 STA KEY_MATRIX+1	;MSB ADDRESS OF ROUTINE TO SET KEY_MATRIX
 JMP ENQUE_KEY		;CONVERT MATRIX POSITION TO KEY & QUEUE IT
;
JMP_VSCM_COPY:
 DB $4C	;OPCODE FOR JMP
VSCM_COPY	;ORIGINAL VECTOR FOR KEY TABLE HANDLING
 DW $EB48	;NORMAL VALUE FOR VECTOR
;
CNT_KEY_TABLE:
;
;
 DB $FE,$EA,$E9,$FF,$FF,$FF,$FF,$FF 
 DB $1C,$17,$01,$9F,$1A,$F7,$FA,$FF 
 DB $9C,$F9,$04,$1E,$EF,$06,$EC,$18 
 DB $1F,$19,$07,$9E,$02,$08,$15,$16 
 DB $12,$09,$0A,$92,$F0,$0B,$0F,$0E 
 DB $F8,$10,$0C,$FB,$FF,$1B,$F2,$FF 
 DB $FC,$F3,$F6,$ED,$FF,$F5,$F1,$F4
 DB $90,$EE,$FF,$05,$FF,$FF,$EB,$FF 
 DB $FF
;
;0:INST/DEL,RETURN,<CRSR>,  F7,     F1,     F3,     F5,   vCRSR^
;1:  3,      W,      A,      4,      Z,      S,      E, LEFT SHIFT
;2:  5,      R,      D,      6,      C,      F,      T,      X
;3:  7,      Y,      G,      8,      B,      H,      U,      V
;4:  9,      I,      J,      0,      M,      K,      O,      N
;5:  +,      P,      L,      -,     </.,     :,      @,     >/.
;6:POUND,    *,      ;, CLR/HOME,RIGHT SHIFT,=,      ^,      ?
;7:  1, LEFT ARROW,CONTROL,  2,   SPACE, COMMODORE,  Q,  RUN/STOP
;
;NEW CHARACTERS: 
; CTRL INS   $FE
; CTRL ???   $FD (CLEAR ALL TABS)
; CTRL BRIT  $FC 
; CTRL -     $FB
; CTRL E     $FA
; CTRL R     $F9
; CTRL +     $F8
; CTRL S     $F7
; CTRL ;     $F6
; CTRL =     $F5
; CTRL ?     $F4
; CTRL *     $F3
; CTRL @     $F2
; CTRL ^     $F1
; CTRL M     $F0
; CTRL C     $EF
; CTRL LFAR  $EE
; CTRL CLRHM $ED
; CTRL T     $EC
; CTRL Q     $EB
; CTRL RET   $EA
; CTRL <->   $E9
;
 END
;
