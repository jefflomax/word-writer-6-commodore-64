;
 TITLE MINI DATABASE 6502 1/91
 PW 116
;
 INCLUDE WWSETUP.ASM
 INCLUDE VARIABLS.ASM
;
 PUBLIC ENTER_DATABASE_MODE		;OVERLAYED
 PUBLIC EXIT_DATABASE_MODE		;OVERLAYED
;
;
 PUBLIC ENTER_DB_FIELDS			;DIRECT
 PUBLIC LOAD_256_SUPRESS		;DIRECT
 PUBLIC OVERLAY_START			;START OF MODS
 PUBLIC OV_ADD_EOR			;TABLED
 PUBLIC OV_ALLOW_CURSOR_UP		;TABLED
 PUBLIC OV_DB_PREV_PAGE			;TABLED
 PUBLIC OVR_FC_DELETE_LINE		;TABLED, DOUBLESHOT
 PUBLIC OVR_FC_INSERT_LINE		;TABLED, DOUBLESHOT
 PUBLIC OVR_FC_FORMAT			;TABLED, DOUBLESHOT 
 PUBLIC OVR_FC_FONT_WINDOW		;TABLED, DOUBLESHOT
 PUBLIC OV_SET_TO_TOP_PAGE		;TABLED
 PUBLIC OV_SHOW_FIELD_NAME		;TABLED
; PUBLIC OVR_SORT_FIELDS			;TABLED
 PUBLIC OVR_FC_SORT_INDEX		;TABLED, DOUBLESHOT
 PUBLIC OVR_FC_TAB_FORWARD		;JUMP TABLE--DOUBLESHOT
 PUBLIC SET_DB_FIELD_NAME		;DIRECT
 PUBLIC SET_PL				;DIRECT
 PUBLIC SET_VM_ZERO			;DIRECT
; 
 PUBLIC TESTEN1,TESTEN2,TESTEN3,TESTEN4 ;DEBUGGING NAMES
 PUBLIC FC_OUTLINE_DOWNLEVEL
 PUBLIC FC_OUTLINE_UPLEVEL
 PUBLIC FC_OUTLINE_REFORMAT 
 PUBLIC DOINDEX   
 PUBLIC REFORMAT  
 PUBLIC SET_TO_TOP_PAGE
 PUBLIC TABPOS    
;
 EXTERN ASCTYP			;BPRINT
 EXTERN AXASCII			;PART1
 EXTERN AX_INTO_PT		;POINTERM
 EXTERN AX_INTO_P1		;POINTERM
 EXTERN AX_INTO_P2		;POINTERM
 EXTERN AX_INTO_P3		;POINTERM
 EXTERN AX_INTO_P4		;POINTERM
 EXTERN AX_INTO_PG_LENGTH	;POINTERM
 EXTERN AX_INTO_START_BLOCK	;EDITLN
 EXTERN AX_INTO_TEXT		;POINTERM
 EXTERN CALCULATE_LINE_LENGTH	;EDITLN
 EXTERN CHANGE_TO_GRAPHICS	;EDITLN
 EXTERN CHANGE_TO_TEXT		;EDITLN
 EXTERN CHROUT			;WINDOW
 EXTERN CLRBLK			;WINDOW
 EXTERN DEC_PT_BY_1		;Decrement POINTER (LSB,MSB) by 1
 EXTERN DECTE1			;PART1
 EXTERN DELETE_BLOCK		;EDITLN
 EXTERN DISPLY			;DISPLAY
 EXTERN DISPLAYON		;DISPLAY
 EXTERN DISPLAY_SCREEN_AND_HEADER ;DISPLAY
 EXTERN DIV_PT_BY_Y         	;POINTER /.Y POINTER= quotient, .A=remainder
 EXTERN DRAW_DB			;PART2
 EXTERN DRAWOUT			;PART2
; EXTERN EDIT_BUFFER_CHANGED	;EDITLN
 EXTERN EDIT_BUFFER_TO_TEXT	;EDITLN
 EXTERN EDIT_LINE		;EDITLN
 EXTERN END_BLOCK		;DISPLAY
 EXTERN END_LINE_TYPE		;EDITLN
 EXTERN EOT_INTO_AX		;POINTERM
 EXTERN FC_BEGINNING_OF_LINE	;EDITLN
 EXTERN FC_BEGINNING_OF_LINE_DSP;EDITLN
 EXTERN FC_CLEAR_HOME		;EDITLN
 EXTERN FC_CLEAR_HOME_DSP	;EDITLN
 EXTERN FC_CLEAR_HOME_NT	;EDITLN
 EXTERN FC_DELETE_LINE		;EDITLN
 EXTERN FC_EDIT_BUFFER_TO_TEXT	;EDITLN
 EXTERN FC_FONT_WINDOW		;FONTWIND
 EXTERN FC_FORCE_FORMAT		;EDITLN
 EXTERN FC_INSERT_LINE		;EDITLN
 EXTERN FC_INSERT_LINE1		;EDITLN
 EXTERN FC_PAGE_FORWARD		;EDITLN
 EXTERN FC_PAGE_BACKWARD	;EDITLN
 EXTERN FC_TAB_FORWARD_NORMAL	;EDITLN
 EXTERN FIELD_NAMES		;OVERLAY
 EXTERN FULL_SCREEN		;EDITLN
 EXTERN HEADAT			;DATA
 EXTERN HEADER			;PART1
 EXTERN INC_PT_BY_P1 		;POINTERM POINTER+POINTER1 RETURN IN POINTER
 EXTERN INC_PT_BY_1		;POINTERM
 EXTERN INC_P1_BY_A		;POINTERM
 EXTERN INC_P1_BY_1		;POINTERM
 EXTERN INC_P2_BY_1		;POINTERM
 EXTERN INC_P2_BY_A		;POINTERM
 EXTERN INCTE1			;POINTERM
 EXTERN INITIL			;PART1
 EXTERN INPUTS			;PART2
; EXTERN IN_DATABASE_MODE	;OVERLAY ZP
 EXTERN LDA_TEXT_0		;DATA
 EXTERN MAXIMUM_LINES		;DISPLAY
 EXTERN MESSAGE_ON		;DISPATCH
 EXTERN MUL_AX_0_PT         	;POINTERM Return POINTER = .A*.X
 EXTERN NEXTLINE		;DATA
 EXTERN NOT_ENOUGH_MEMORY	;SUPPORT
 EXTERN OLD_CHARS_IN_LINE	;EDITLN
 EXTERN ON_AND_REFREASH		;EDITLN
 EXTERN P2_INTO_PT		;POINTERM
 EXTERN P4_INTO_AX		;POINTERM
 EXTERN PG_LENGTH		;CONFIG
 EXTERN POP_AXY			;STACK
 EXTERN POP_TEXT        	;STACK
 EXTERN PT_INTO_P2		;POINTERM
 EXTERN PW_S_PRINT_GRAPHICS	;CONFIG
 EXTERN PRTWIN_TOPMAR		;CONFIG
 EXTERN PRTWIN_BOTMAR		;CONFIG
 EXTERN PRKECY
 EXTERN PROMPT_AND_NUMBER
 EXTERN PUSH_AXY		;STACK
 EXTERN PUSH_TEXT       	;STACK
 EXTERN RESET			;DISPLAY
 EXTERN RESET_AND_DISPLAY
 EXTERN SERPPT			;DATA
 EXTERN SETSCN
 EXTERN SET_TO_TEXT_OR_GRAPHICS	;EDITLN
 EXTERN SET_VMARGINS
 EXTERN START_BLOCK		;DISPLAY
 EXTERN STTEXT_TO_TEXT		;PART1
 EXTERN TELL_DOCUMENT_ALTERED	;SUPPORT
 EXTERN TEXT_INTO_AX		;POINTERM
;EXTERN TEXT_MINUS_A		;POINTERM
 EXTERN TEXT_TO_EDIT_BUFFER 	;EDITLN
 EXTERN TEXT_TO_NEXTLINE	;DATA
 EXTERN TEXT_TO_PREV_LINE	;POINTERM
 EXTERN TOASCI			;DATA
 EXTERN WAIT_FOR_KEY		;PART1
 EXTERN WORKING_SERPPT		;DATA
 EXTERN ZERO_PT			;POINTERM
;
 EXTERN PAGE_LENGTH
 EXTERN TOP_MARGIN
 EXTERN BOTTOM_MARGIN
;
;
MAX_FIELDS:	EQU 23
MIN_FIELDS:	EQU 3 
START_INDEX:	EQU 1
;
SECTION_LENGTH: EQU $41E	;PLACE EXACT LENGTH OF OUTLN HERE
;
OVERLAY_START: 
;
.LIST ON
;OVERLAY JUMP TABLE
;
OV_SET_TO_TOP_PAGE:			;TABLED, MINIDB ONLY
 JMP SET_TO_TOP_PAGE
;
OV_ALLOW_CURSOR_UP:			;TABLED, MINIDB ONLY
 JMP ALLOW_CURSOR_UP
;
OV_DB_PREV_PAGE:			;TABLED, MINIDB ONLY
 JMP DB_PREV_PAGE
;
OV_SHOW_FIELD_NAME:			;TABLED, MINIDB ONLY
 JMP SHOW_FIELD_NAME
;
OVR_FC_SORT_INDEX:			;DOUBLESHOT
 JMP SORT_FIELDS
;
OVR_FC_DELETE_LINE:			;TABLED, MINIDB/WP
 JMP DELETE_RECORD
;
OVR_FC_INSERT_LINE:			;DOUBLESHOT
 JMP INSERT_RECORD
;
OV_ADD_EOR:				;TABLED, MINIDB ONLY
 JMP ADD_EOR
;
FC_OUTLINE_UPLEVEL:			;DOUBLESHOT
 RTS
OLD_TOP_MARGIN:
 DB 0
OLD_BOTTOM_MARGIN:
 DB 0 
;
FC_OUTLINE_DOWNLEVEL:			;DOUBLESHOT
 RTS
FONT_OR_TEXT_MODE:
 DB 0
OLD_PAGE_LENGTH:
 DB 0
;
OVR_FC_TAB_FORWARD:
 JMP FC_TAB_FORWARD_NORMAL		;DOUBLESHOT
;
OVR_FC_FORMAT:				;DOUBLESHOT 
 JMP FC_FORCE_FORMAT 			;INTO EDITLN
;
OVR_FC_FONT_WINDOW:			;DOUBLESHOT
 JMP COPY_FIELD
; 
; 
;END OF JUMP TABLE
;--------------------
;
;MAKE OUTLINER CALL POINTS:
;
TESTEN1:
TESTEN2:
TESTEN3:
TESTEN4:
FC_OUTLINE_REFORMAT:
DOINDEX:
REFORMAT:
TABPOS:
;
;FONT_OR_TEXT_MODE:
; DB 0
;OLD_PAGE_LENGTH:
; DB 0
;OLD_TOP_MARGIN:
; DB 0
;OLD_BOTTOM_MARGIN:
; DB 0 
TRIP:
 DB 0
; 
;---------------------
;
ENTER_DATABASE_MODE:
;*NOTE* MAY WANT TO CALL SET_MARGIN FOR 10/60 DEFAULTS
;
 LDA MERPTR			;WAS THERE A SAVE ERROR?
 BEQ EDB_ABORT
;
 CLC
 LDA TOP_MARGIN
 STA OLD_TOP_MARGIN
 ADC BOTTOM_MARGIN
 ADC PAGE_LENGTH
 STA OLD_PAGE_LENGTH
 LDA BOTTOM_MARGIN
 STA OLD_BOTTOM_MARGIN
;
 LDA PW_S_PRINT_GRAPHICS	;SAVE OFF OLD MODE 
 STA FONT_OR_TEXT_MODE
;
 JSR CHANGE_TO_TEXT
;
ENTER_DB_FIELDS:
 LDX #15
 JSR PROMPT_AND_NUMBER
 CMP #MIN_FIELDS
 BCS ?MIN_FOUR
 LDA #MIN_FIELDS
?MIN_FOUR: 
; 
 CMP #MAX_FIELDS
 BCC ?OK
 LDA #MAX_FIELDS
?OK:
;
 JSR PUSH_AXY		;SAVE AXY
 JSR INITIL		;REMOVE THE CURRENT DOCUMENT
;JSR TEXT_TO_EDIT_BUFFER;PUT THE TEXT IN THE EDIT BUFFER
 JSR POP_AXY		;RESTORE AXY
;
 LDY #'N'
 JSR SET_PL		;SETUP PAGE LENGTH
; 
 JSR SET_VM_ZERO	;SETUP VERTICAL MARGINS TO ZERO
;
 LDA #$F7		;$F7 XOR $80 = 119
 LDY #23*11+1		;SET NAMES TO ----
?CLEAR_NAMES
 DEY
;
 STA FIELD_NAMES+1,Y
 BNE ?CLEAR_NAMES
;
 LDA #1
 STA IN_DATABASE_MODE	;DO *NOT* INC
;
 LDX #97	;MAGIC NUMBER
 SEC
 LDA #'R'
 LDY #'F'
;
DRAW_OUT_AND_DISPLAY:
 STA HEADAT+24
 STY HEADAT+30
;
 JSR DRAW_DB
 JSR FC_CLEAR_HOME_DSP
; JSR DISPLAY_SCREEN_AND_HEADER 
;
EDB_ABORT:
 RTS
;
; 
SET_PL: 
 STA FIELD_NAMES	;#FIELDS IN THIS DB
 STA MAXIMUM_LINES	;SAME AS OLD NUMBER_OF_FIELDS
;
 STY PW_S_PRINT_GRAPHICS
 LDX #0
 JSR AXASCII
;DO NOT USE AX_INTO_PG_LENGTH (BACKWARDS)
 STA PG_LENGTH+1
 STX PG_LENGTH
 RTS 
;
;
SET_VM_ZERO:
 LDA #'0'
 LDX #'0'		;.A.X = TOP/BOTTOM MARGIN (ASCII)
;
SET_VM:
 STA PRTWIN_TOPMAR+1
 STX PRTWIN_BOTMAR+1
 LDA #'0'
 STA PRTWIN_TOPMAR
 STA PRTWIN_BOTMAR
 JMP SET_VMARGINS
;
;---------------------
;
EXIT_DATABASE_MODE:
;
;JSR FC_EDIT_BUFFER_TO_TEXT
 JSR TELL_DOCUMENT_ALTERED
;
 LDX #47
 JSR PRKECY
 BEQ ?DO_IT
 JMP HEADER_AND_NAME
;
?DO_IT:
 DEC IN_DATABASE_MODE
 LDY FONT_OR_TEXT_MODE
 CPY #'N'
 BEQ ?TEXT_MODE 
 JSR CHANGE_TO_GRAPHICS
 JMP ?PG_LEN 
; 
?TEXT_MODE: 
 LDA OLD_PAGE_LENGTH
 JSR SET_PL
;
?PG_LEN
 LDA OLD_BOTTOM_MARGIN
 AND #7
 ORA #'0'
 TAX				;SUPRESS BOTTOM MARGIN 0..7
 LDA OLD_TOP_MARGIN
 AND #7				;SUPRESS TOP MARGIN 0..7
 ORA #'0'
 JSR SET_VM 	
;
 LDA #23
 STA MAXIMUM_LINES
; 
 LDA #'P'
 LDY #'L'
 CLC
 BCC DRAW_OUT_AND_DISPLAY
;
;---------------------
;
SHOW_FIELD_NAME:
;GIVEN LINE # SHOW FIELD NAME IF PRESENT
;
 LDA MESSAGE_ON             ;CLEAR REMAINING PROMPT
 BEQ SFN_ABORT		    ;IF PRESENT
;
 LDA IN_DATABASE_MODE
 BEQ SFN_ABORT
;
SHOW_NAME:
 JSR CSL_X_11_INTO_X		;CURRENT_SCREEN_LINE*11 INTO .X
;
 LDY #0
?LOOP:
 LDA FIELD_NAMES+1,X
 XOR #$80
 STA VIDEO+40,Y
 INX
 INY
 CPY #11
 BCC ?LOOP
;
SFN_ABORT: 
 RTS
;
CSL_X_11_INTO_X:
 LDA CURRENT_SCREEN_LINE	;ZERO IS WHERE WE GO
 LDX #11
 JSR MUL_AX_0_PT         	;Return POINTER = .A*.X
 LDX POINTER			;.X = INDEX
 RTS
;
;---------------------
; 
ALLOW_CURSOR_UP:
;BCC = OK
;BCS = STOP IT 
;
;THIS ROUTINE MUST PAGE DOWN TO NEXT RECORD, OR SEARCH
;WILL HAVE NO CHANCE OF WORKING.
;
 LDA IN_DATABASE_MODE		;IS THIS DB MODE?
 BEQ ALLOW_SCROLL
;
 LDA TRIP			;1=ALLOW ALWAYS, 0 = DO NOTHING
 BNE ALLOW_SCROLL
; 
 LDA CURRENT_SCREEN_LINE	;ZERO IS WHERE WE GO
 BNE ALLOW_SCROLL
;DISALLOW
 INC TRIP			;SET OVERRIDE FLAG
SEC_RTS:
 SEC
 RTS
;
ALLOW_SCROLL:
CLC_RTS:
 CLC
 RTS
;
;---------------------
; 
SET_TO_TOP_PAGE:
 LDA IN_DATABASE_MODE		;IS THIS DB MODE?
 BEQ ?ABORT
;
 JSR TEXT_INTO_AX
 STA TEXPAG
 STX TEXPAG+1
 JSR SETSCN
 LDA #0
 STA TRIP 
; JMP RESET_AND_DISPLAY
 JMP RESET
?ABORT
 RTS
;
;---------------------
; 
DB_PREV_PAGE:
;DO NOT HARM .X
 LDA IN_DATABASE_MODE
 BEQ CLC_RTS
;
 LDA MAXIMUM_LINES
 STA CUR_PAGE_LENGTH
 STA LINE
 LDA #0
 STA CUR_PAGE_LENGTH+1
 SEC
 RTS
;
;---------------------
; 
FIELD_TO_SORT:
 DB 0
CURRENT_FIELD:
 DB 0
MAX_RECORDS:
 DB 0
SORT_DIRECTION:
 DB 0
;
SORT_FIELDS:
;THIS ROUTINE NEEDS A FLAG FOR "NO RECORDS SWAPPED" TO TERMINATE
;
;
 LDX EOT+1
 STX ASCTYP
 INX
 CPX #>ENDRAM_MP
 BCS CLC_RTS
;
 LDX IN_DATABASE_MODE
 STX SORT_DIRECTION		;ASSUME ASCENDING (NZ)
 BEQ CLC_RTS
;
 JSR EDIT_BUFFER_TO_TEXT
;
?GET_KEY:
 LDX #52
 JSR PRKECY			;'SORT?'
 CMP #'A'
 BEQ ?ASCENDING
 CMP #'D'
 BNE ?GET_KEY
;(FT)
?DESCENDING:
 LDA #0
 STA SORT_DIRECTION
;
?ASCENDING:
 LDA CURRENT_SCREEN_LINE	;ZERO IS WHERE WE GO
 STA FIELD_TO_SORT
;
 JSR WORKING_SERPPT
;
; JSR FC_END_OF_DOCUMENT
; LDX PAGE
 JSR HOW_MANY_PAGES
 TAX
;
; DEX
 BEQ ?ABORT			;DON'T DO ONLY ONE RECORD!
;
;?L_OK: 
; LDA CURRENT_SCREEN_LINE
; CMP MAXIMUM_LINES		;OLD NUMBER_OF_FIELDS
; BEQ ?OK 
; DEX
; BEQ ?ABORT
;?OK:
 STX MAX_RECORDS		;1..N N RECORDS
;
 LDX #0
 STX CURRENT_FIELD
;  
?O_RECORD_LOOP:
 LDX #0
 STX T6				;FLAG FOR CHANGES IN THIS PASS
;
?RECORD_LOOP:
 LDX CURRENT_FIELD
;
 JSR TEXT_TO_REC
 JSR TEXT_INTO_AX
 JSR AX_INTO_P1
;
 JSR DOWN_1_RECORD
;
 LDY #0
;
;?S_VERIFY:
; LDA (POINTER1),Y
; CMP #$80
; BNE ?D_VERIFY
; BPL ?D_VERIFY
; JSR INC_P1_BY_1		;POINTERM
; BNE ?S_VERIFY
;
;?D_VERIFY:
; LDA (TEXT),Y
; CMP #$80
; BNE ?COMPARE_LOOP
; BPL ?COMPARE_LOOP
; JSR INCTE1
; BNE ?D_VERIFY
; 
?COMPARE_LOOP:
 LDA (POINTER1),Y
 JSR DB_TOASCI
 PHA
; CMP (TEXT),Y
 LDA (TEXT),Y
 JSR DB_TOASCI
 STA ?SM1
 PLA
 DB $C9
?SM1:
 DB $FF 
; 
 BCC ?LESS_THAN
 BEQ ?EQUAL
 BCS ?GREATER_THAN
?EQUAL:
 CMP #$80
 BCS ?NEXT_REC
 INY
 BNE ?COMPARE_LOOP
;
?GREATER_THAN:
; 
 LDA SORT_DIRECTION		;IF SORT IS DESCENDING (0)
 BEQ ?NEXT_REC			;GET OUT
 JSR RIPPLE_SWAP		;SWAP THE TWO RECORDS
 BCC ?NEXT_REC
?OUT_OF_MEM:
 JMP NOT_ENOUGH_MEMORY
; JMP ?NEXT_REC
;
;(FT)
;
?LESS_THAN:
;
 LDA SORT_DIRECTION		;IF SORT IS ASCENDING (NZ)
 BNE ?NEXT_REC 
 JSR RIPPLE_SWAP
 BCS ?OUT_OF_MEM
;
?NEXT_REC:
;
 INC CURRENT_FIELD
 LDX CURRENT_FIELD		;IF ++CURRENT < MAX
 INX
 CPX MAX_RECORDS		;GO DO NEXT RECORD PAIR
 BCC ?RECORD_LOOP
;
 LDX T6				;WAS THERE A SWAP THIS PASS?
 BEQ ?ALL_DONE
;
 LDX #0
 STX CURRENT_FIELD		;ELSE CURRENT = 0
;
 DEC MAX_RECORDS		;--MAX
 LDA MAX_RECORDS		;IF MAX >= 2 
 CMP #1				;DO NEXT PASS
 BCS ?O_RECORD_LOOP
; BNE ?O_RECORD_LOOP
;
?ALL_DONE:
 JSR FC_CLEAR_HOME_DSP		;RESET EDITING ENGINE
; 
?ABORT
 SEC 
 RTS
;
;
TEXT_TO_REC:
 STX COUNT_DOWN			;SAVE RECORD NUMBER
 BNE ?NOT_FIRST			;IF NOT ZERO GOTO NOT FIRST
; 
 JSR FC_CLEAR_HOME_NT		;SET TO BEGINNING
;
?ON_RECORD: 
 JSR TEXT_INTO_AX		;PUT TEXT
 JSR AX_INTO_P4			;STORE OFF START OF REC
;
 LDX FIELD_TO_SORT
 BEQ ?ON_FIELD
;
 JMP DOWN_X_LINES		;MOVE TO CORRECT FIELD
; 
?ON_FIELD:
 RTS 
;
?NOT_FIRST:
 JSR P4_INTO_AX			;GET START OF LAST RECORD
 JSR AX_INTO_TEXT		;INTO TEXT
 JSR DOWN_1_RECORD		;MOVE FWD 1 RECORD
 JMP ?ON_RECORD 		;SET INTO P4 AND MOVE TO FIELD
;
; 
RIPPLE_SWAP:
; 
; LDA CURRENT_FIELD		;MOVE TO HOME, SET COUNT DOWN #REC
 LDA #1				;MOVE TO HOME, SET COUNT DOWN #REC
 STA T6				;FLAG A SWAP OCCURRED
;
 JSR P4_INTO_AX			;START OF 1ST RECORD
;
 JSR AX_INTO_PT			;PT = START OF 1ST RECORD
 JSR AX_INTO_P1			;P1 = SOURCE
;
 JSR EOT_INTO_AX		
 JSR AX_INTO_P2			;P2 = DESTINATION
 JSR INC_P2_BY_1		;POINTS AT EOT + 1
;
 JSR COPY_FIELD_WO_END		;COPY FIELDS WITHOUT THE END MARKER
 BCC ?MEM_OK
 RTS
;
?MEM_OK:
 LDA #RETURN
 STA (POINTER2),Y		;TERMINATE FOR COPY BACK DOWN
;
 TYA
 JSR INC_P1_BY_A
 JSR INC_P1_BY_1		;SET P1 = P1+Y+1 (START OF 2ND REC)
 JSR PT_INTO_P2			;SET P2 = START OF 1ST REC
 JSR COPY_FIELD_WO_END		;MOVE 2ND FIELD TO FIRST FIELD
 LDA #RETURN
 STA (POINTER2),Y		;PLACE HARD RETURN AT END OF RECORD
;
 TYA
 JSR INC_P2_BY_A
 JSR INC_P2_BY_1		;SET DEST = START OF NEW 2ND RECORD
;
 JSR EOT_INTO_AX		
 JSR AX_INTO_P1			;P2 = DESTINATION
 JSR INC_P1_BY_1		;POINTS AT EOT + 1
;(FT)  
;FALL THRU INT COPY_FIELD_WO_END
;WILL FORCE CLC AND EXIT
;
;
COPY_FIELD_WO_END:
;P1 = SRC
;P2 = DEST
;CLC= ALL OK
;SEC= OUT OF MEMORY
;
 LDX MAXIMUM_LINES	;SAME AS OLD NUMBER_OF_FIELDS
;
 LDY #0
?LOOP:
 LDA (POINTER1),Y
 CMP #ENDT
 BCC ?STORE
 DEX
 BNE ?STORE
 CLC
 RTS
;
?STORE:
 STA (POINTER2),Y
 INY
 BNE ?LOOP
 INC POINTER1+1
 INC POINTER2+1
 LDA POINTER2
 CMP #$FE
 BCC ?LOOP
;(SEC)
 RTS
;
;---------------------
; 
DELETE_RECORD:
;ALSO TECHNICALLY DELETE PAGE
 LDA IN_DATABASE_MODE
 BNE ?DEL_REC
 JMP FC_DELETE_LINE
;
?DEL_REC:
;
 JSR MOVE_TO_TOP_OF_CARD	;ON FIRST LINE, 1ST CHAR THIS CARD
;
 JSR TEXT_INTO_AX
 JSR AX_INTO_START_BLOCK	;POINT STARTBLOCK AT .AX
 JSR DOWN_1_RECORD
; 
; JSR ON_THE_LAST_LINE
; BEQ ?CLEANUP		;TEST OF PARTIAL RECORD (EOF)
;
 JSR DECTE1
;
 JSR LDA_TEXT_0		;DATA
 CMP #SRETRN		;SRET OR RET?
 BCC ?CLEANUP
;
 JSR TEXT_INTO_AX
 STA END_BLOCK
 STX END_BLOCK+1
;
 LDA #$80
 STA MOVE_COPY_HL
;
 JSR DISPLY
 LDX #53
 JSR SERPPT
; JSR PRKECY
 JSR WAIT_FOR_KEY
 CMP #'Y'
 BNE ?CLEANUP
 JSR DELETE_BLOCK
;
?CLEANUP:
 LDA START_BLOCK
 LDX START_BLOCK+1
 JSR AX_INTO_TEXT
;
 LDA #0
 STA MOVE_COPY_HL
;
?ABORT:
 JSR TEXT_TO_EDIT_BUFFER
?ABORT1:
 JMP ON_AND_REFREASH
;
;---------------------
; 
INSERT_RECORD:
;ALSO TECHNICALLY INSERT PAGE
;NEED TO HANDLE MAX PAGES!!!
;
 LDA IN_DATABASE_MODE
 BNE ?DO_INS_REC
 JMP FC_INSERT_LINE		
;
?DO_INS_REC:
 JSR HOW_MANY_PAGES		;DO NOT ALLOW MORE THAN 254 RECORDS!
 BCS ?ABORT
;
 JSR MOVE_TO_TOP_OF_CARD	;ON FIRST LINE, 1ST CHAR THIS CARD
 LDX MAXIMUM_LINES		;NUMBER_OF_FIELDS
 STX COUNT_DOWN
?LOOP:
 JSR FC_INSERT_LINE1
 DEC COUNT_DOWN
 BNE ?LOOP
?ABORT:
 JMP DISPLY
;
;---------------------
;
SET_DB_FIELD_NAME:
 LDX #48
 JSR SERPPT
 LDA #11
 JSR INPUTS
;
 JSR CSL_X_11_INTO_X	;CURRENT_SCREEN_LINE*11 INTO .X
 INC MSLEN
 LDY #0
?COPY_FIELD:
 LDA VIDEO,Y
 CPY MSLEN
 BCC ?FIELD_TEXT
;
 LDA #$F7		;$F7 XOR $80 = 119
;
?FIELD_TEXT:
 STA FIELD_NAMES+1,X
 INX
 INY
 CPY #11
 BCC ?COPY_FIELD
; 
HEADER_AND_NAME:
 JSR HEADER
 JMP SHOW_NAME
;
;---------------------
; 
MOVE_TO_TOP_OF_CARD:
 JSR FC_BEGINNING_OF_LINE_DSP
 LDA CURRENT_SCREEN_LINE	;ZERO IS TOP OF SCREEN
 BEQ ?ON_TOP
;
 JMP FC_PAGE_BACKWARD
?ON_TOP:
 RTS
;
;---------------------
; 
.IF REMOVE_TEXT
HOW_MANY_PAGES:
;USES MAX_RECORDS (SO DOES SORT!)
;
 LDA PAGE
 STA MAX_RECORDS
;
 JSR PUSH_TEXT
;
 SEC			;FIND # LINES THAT SHOULD BE ON THIS PAGE
 LDA MAXIMUM_LINES	;SAME AS OLD NUMBER_OF_FIELDS
 SBC CURRENT_SCREEN_LINE;FIELD WE ARE ON 0..N
 TAX			
;
 JSR DOWN_X_LINES	;AND MOVE FORWARD THAT MANY
 JSR ON_THE_LAST_LINE
 BEQ ?OUT 
 INC MAX_RECORDS
;
?ON_FIRST: 
 JSR ON_THE_LAST_LINE
 BEQ ?OUT
;
 JSR DOWN_1_RECORD
 INC MAX_RECORDS
 BNE ?ON_FIRST
;
?OUT:
 JSR POP_TEXT
 LDA MAX_RECORDS
 CMP #254
 RTS
;
.ENDIF
HOW_MANY_PAGES:
;
 JSR PUSH_TEXT
 JSR STTEXT_TO_TEXT	;PUT TEXT AT START
 JSR ZERO_PT		;Set POINTER = 0
 INC POINTER
;
?COUNT:
 JSR INC_PT_BY_1        ;POINTER = 1 + POINTER
 JSR NEXTLINE
 JSR ON_THE_LAST_LINE
 BNE ?COUNT
 LDY MAXIMUM_LINES	;SAME AS OLD NUMBER_OF_FIELDS
 JSR DIV_PT_BY_Y         ;POINTER /.Y POINTER= quotient, .A=remainder
 JSR POP_TEXT
 LDA POINTER
 STA MAX_RECORDS
 CMP #254
 RTS
;
;
DOWN_1_RECORD:
 LDX MAXIMUM_LINES		;NUMBER_OF_FIELDS
;
;(FT)
DOWN_X_LINES:
 JSR NEXTLINE
 DEX
 BNE DOWN_X_LINES
 RTS
;
; 
ON_THE_LAST_LINE: 
 LDY #$FF
?LOOP:
 INY
 LDA (TEXT),Y
 BPL ?LOOP
 CMP #ENDT
 RTS
;
;---------------------
;
ADD_EOR:
;USES POINTER4+1 AS FIELD# COUNTER
;MAY HARM .X
;
 PHP			;SAVE STATUS
 LDX IN_DATABASE_MODE	;ARE WE IN THE DATABASE?
 BEQ ?ABORT1		;IF NOT, RESTORE STATUS, LEAVE
; 
 PHA			;SAVE .AC
; 
 CMP #ENDT		;EOT/SRET/RET?
 BCC ?ABORT
; BNE ?RETURN
;
; LDA #ENDREC
; JSR CHROUT
; JMP ?JOIN
;
?RETURN:
 INC POINTER4+1
 LDA POINTER4+1
 CMP MAXIMUM_LINES	;NUMBER_OF_FIELDS
 BNE ?ABORT
;
;?JOIN:
 LDA #ENDREC
 JSR CHROUT
; 
;MUST LOOK FORWARD TO ASSURE THAT AT MAXIMUM_LINES
;ARE PRESENT
 JSR PUSH_TEXT
 LDX MAXIMUM_LINES
?FWD_1_REC:
 JSR TEXT_TO_NEXTLINE	;MOVE FORWARD TO THE NEXT RECORD
 JSR LDA_TEXT_0
 BEQ ?AT_THE_END
 DEX 
 BNE ?FWD_1_REC
;
 LDA #0
 STA POINTER4+1
;
?REJOIN:
 JSR POP_TEXT
;
?ABORT 
 PLA			;RESTORE .AC
?ABORT1: 
 PLP			;RESTORE STATUS
 RTS 
;      
?AT_THE_END:
 LDA #ENDREC		;TACK ON THE FINAL EOF
 JSR CHROUT		;DO *NOT* RESET POINTER4
 JMP ?REJOIN		;AND LEAVE
;
;---------------------
;
COPY_FIELD:
;
;BE SURE TO BE IN_DATABASE_MODE AND ON A PAGE > 1
;
 LDA IN_DATABASE_MODE
 BEQ ?FONT_WIND
 LDA PAGE
 CMP #2
 BCC ?ABORT
;
 JSR FC_BEGINNING_OF_LINE	;KILL DISPLAY, MOVE TO START OF LINE
;
 JSR PUSH_TEXT			;SAVE CURRENT TEXT POINTER
;
 LDX MAXIMUM_LINES		;NUMBER_OF_FIELDS
?LOOP:
 JSR TEXT_TO_PREV_LINE
 DEX
 BNE ?LOOP			;MOVE TEXT POINTER BACK 1 RECORD
;
 LDA END_LINE_TYPE
 PHA
 LDA OLD_CHARS_IN_LINE
 PHA
 JSR TEXT_TO_EDIT_BUFFER	;COPY IN THE NEW LINE
 PLA
 STA OLD_CHARS_IN_LINE
 PLA
 STA END_LINE_TYPE
; 
 LDY CHARS_IN_LINE		;RESET THE EOT TYPE FOR LAST LINE
 STA EDIT_LINE,Y		;OF DOCUMENT PROBLEMS
;
 INC EDIT_BUFFER_CHANGED	;INDICATE EDIT BUFFER IS CHANGED
 JSR POP_TEXT			;RESTORE THE TEXT POINTER
 JSR CALCULATE_LINE_LENGTH	;DETERMINE NEW LINE LENGTH
;
?ABORT:
 JMP ON_AND_REFREASH		;RESTORE DISPLAY AND SHOW NEW LINE
?FONT_WIND:
 JMP FC_FONT_WINDOW		;GO TRY FONT WINDOW
;
;---------------------
;
LOAD_256_SUPRESS:
; 
 PHA
 CMP #ENDT		;EOT/SRET/RET?
 BCC ?ABORT
;
 INC POINTER4+1
 LDA POINTER4+1
 CMP FIELD_NAMES	;NUMBER_OF_FIELDS
 BNE ?CLCABORT
 LDA #0
 STA POINTER4+1 
 INC COUNT		;NUMBER OF PAGES
 LDA COUNT		;MUST BE < 256
 BNE ?CLCABORT
 PLA
 SEC
 RTS
;
?CLCABORT:
 CLC
?ABORT:
 PLA
 RTS 
;
;
DB_TOASCI:
 JSR TOASCI
 CMP #' '
 BNE ?OUT
 LDA #$7F
?OUT:
 RTS 
;
;---------------------
;
OVERLAY_END:
;
OVERLAY_SIZE: EQU OVERLAY_END - OVERLAY_START
;
.ORG $+SECTION_LENGTH-OVERLAY_SIZE
;
;
 END                                                       
;
