;
!zone THSCODE
;
;INTERFACE CODE BETWEEN WW AND ACTUAL THESRUS.ASM
;
; EXTERN W_INTO_MSGOUT			;POINTERM
;
;
CBOFFSET =  0  
PULLHOM =  VIDEO+120+CBOFFSET          
WDOFFSET =  7
CLOFFSET =  WDOFFSET+24
TLOFFSET =  CLOFFSET+6 
WORDHOM =  PULLHOM+80
;
;
WORDNF: 
;THE WORD IS NOT HERE, DIP!
 JSR FULL_SCREEN
 LDX #41                 ;'NOT FOUND'
 JMP SERPP0
;
;
DOTHSR:        
;
;
 LDX #0
 STX CLSNUM     ;SET FOR INITIL LOOKUP
 INX            ;[1]
 STX LSTCLS
;
 TXA            ;SET TO THES PATH AND TEST DRIVE
 JSR DISKIN
 BCS WORDNF
;
 LDX #39
 JSR SERPPT     ;'ENTER WORD TO LOOKUP OR RUN/STOP'
;
 JSR DISPLAYOFF
 JSR MOVE_TO_START_OF_WORD
;
 JSR PUSH_TEXT
 LDA CURRENT_CHAR
 JSR ADDATX
;
 LDX #1
 STX TEMP4      ;SET FLAG FOR WORD COPY
 DEX            ;[0]
 STX RETRNA     ;SET FLAG FOR LOWER/NOSYM IN WORD
 JSR DRAWWD0    ;PLACE WORD FOR INPUT
 JSR POP_TEXT
;
 JSR DISPLAY_ON_NO_DISPLAY
 LDA #17
 STA MSLEN
 LDX SESLEN
 STX NUMFLG     ;MAY HAVE NULL LENGTH
 BEQ DOTHEX4
 DEC NUMFLG
;
DOTHEX4:
;
 JSR INPUTF ;INPUT1
;
 CPX #2 ;(3)LENGTH OF STRING
 BCC WORDNF ;TOO SHORT, BYE BYE
;
;SHOULD CHECK FOR VALID 1ST & SECOND CHAR HERE
;
 LDA VIDEO
 JSR TESTC1
 BCC DOTHEX5
BWORDNF:
 JMP WORDNF
;
DOTHEX5:
; INC THESFLAG   ;DISABLE RESTORE
;
 DEX            ;X IS NOW "REAL" LENGTH
;
 LDA #0  
 STA WORD+1,X
 STA HWORD+1,X  ;SAVE ORIGINAL COPY
THES01:   
 LDA VIDEO,X    ;INPBUF,X
 AND #$3F
 STA WORD,X
 STA HWORD,X 
 DEX
 BPL THES01    
;
;
 JSR THESAURUS  ;READ WORD
 BCS BWORDNF    ;THERE IS NO SUCH!
;
 LDA #0
 STA $C6        ;KILL KEYBOARD BUFFER
 JSR INIT_BLOCK_TWO
 JMP THES02
;
THESL1:
 CPX #0         ;DOUBLE SURE OF END
 BEQ THES06
 STX SHONUM     ;VALUE CLUSTER TO PRESENT
 CPX LSTCLS
 BEQ THES02     ;STILL PROCESSING SAME CL
;
 INC LSTCLS
 JSR STTXT0S    ;STORE SPACE
 JSR STTXT0R    ;STORE RETURN
;
 JSR SWPDISS    ;SWAP, DISPLY, SWAP
;
THES02:
 LDX #0
 STX HOLDVL     ;SAFE PLACE (FROM DICTIONARY)
THES03:
 LDX HOLDVL
 LDA WORD,X
 BEQ THES04
;
 JSR STTXT0
;
 INC HOLDVL
 BNE THES03
;
THES04:
 JSR STTXT0R ;STORE RETURN
;
 LDA #ENDT
 STA (TEXT),Y ;SET FLAG FOR EOC
;
 JSR DISPCL
;
 JSR THESAURUS
 BCC THESL1               
;
THES06: 
;
 JSR STTXT0S ;STORE SPACE
 JSR STTXT0R ;STORE RETURN
 JSR STTXT0S ;STORE SPACE
 LDA #ENDT
 STA (TEXT),Y
;
 LDA #1
 STA SHONUM
 STA LSTCLS ;SHONUM IS MURDERED BY DISPCL
;
;
;CLROTA:
;STEP THRU CLUSTERS ALLOWING SELECTION
;JSR ABTTOG ;SUPRESS KEYBOARD ABORT, ALLOW ^ v
 LDA #$80
 STA KEYABT ;SET ON
;
 LDX #42
 JSR SERPPT ;'ENTER WORD NUMBER TO SELECT, CRSR, OR RETURN'
;
CLROTA2:
;
 JSR SWPDISS ;SWAP, DISPLY, SWAP
;
 JSR DISPCL ;SHOW 1ST CLUSTER
;
 LDA #3
 JSR HEXMSL  ;GET # OR CUP/DOWN
 BCS CLROTA4 ;GO HANDLE UP/DOWN
 CMP #0      ;NO ENTRY?
 BEQ CLROTA3    
;
;SELECT WORD IN TEXT
;
 PHA          ;SAVE NUMBER USER WANTS 1..N
 LDX LSTCLS
 DEX 
 STX SHONUM
;
 JSR LOCCLST ;POINT AT CLUSTER
 PLA
 STA LSTCLS 
;
 DEC LSTCLS ;0..X
 LDA LSTCLS
 BEQ CLFNWD2 ;THE FIRST WORD
;
CLFNWD1:
 JSR TEXT_TO_NEXTLINE
;
 JSR TEXCF0 	   ;IS IT END?
 BEQ CLROTA3 	;END OF ALL TEXT
 CMP #' '   	   ;END OF CLUSTER?
 BEQ CLROTA3 	;YES, EXIT
;
 DEC LSTCLS             
 BNE CLFNWD1
;
CLFNWD2:
;SHOULD BE AT WORD USER WANTS
 LDY #0
CLFNWD3:  
 JSR TEXCFE
 BCS CLFNDW4 	;END OF WORD!
 STA CBUF2,Y
 INY
 BNE CLFNWD3          
;
CLFNDW4:
 STY RPSLEN
;
 LDY NUMFLG 	;ORIGINAL WORD LENGTH (FROM CALC)
 INY
 STY SEARCH_STRING_LENGTH
;
 JSR SWPBLK ;[1] GO TO BANK 1
;
 JSR REPLSUB
;
;
CLROTA8:     
;
 JSR ABTTOG ;ALLOW KEYBOARD ABORT
 JMP FULL_SCREEN
;
;
CLROTA3:
 JSR SWPBLK
 JMP CLROTA8 ;BAD EXIT
;
CLROTA4:
 LDX LSTCLS
 STX SHONUM ;MOVE CURRENT CLUSTER NUMBER
;
 CMP #145 ;CURSOR UP (BACKWORDS)
 BNE CLROTA5
;HANDLE CURSER DOWN
 LDA LSTCLS
 CMP #1 ;AT LOWERS?
 BEQ BCRLTA2 ;CLROTA2
 DEC LSTCLS
 DEC SHONUM
BCRLTA2:
 JMP CLROTA2
;
CLROTA5:
;ASSUME CURSER UP
 LDX LSTCLS
 CPX NUMLET
 BCS BCRLTA2 ;CLROTA2 ;IF # >= MAX THEN REDISPLAY
 INC LSTCLS
 INC SHONUM
 JMP CLROTA2                  
;
SHONUM:
!byte 0
;
;DISPLAY CLUSTER IN A BOX
;SHONUM IS CLUSTER # TO SHOW 1..16->0..15
;
DISPCL:
;
 DEC SHONUM ;SAVE OFF NUMBER TO DISPLAY
; LDA TEXT
; PHA
; LDA TEXT+1
; PHA ;SAVE OFF TEXT POINTER
 JSR PUSH_TEXT
;
 LDA VIDEO+80
 CMP #112
 BEQ DISPCM2 ;BOX ALREADY PRESENT
;
; LDA #<CBOX
; LDX #>CBOX
; JSR AX_INTO_MSGOUT
; JSR W_INTO_MSGOUT
; DW CBOX
;
 LDA #0  ;CBOFFSET
 JSR PULLDN ;DRAW THE BOX
!word CBOX
;
 JSR WORDHOM_TO_SCRMO
; LDA #<WORDHOM
; STA SCRMO
; LDA #>WORDHOM
; STA SCRMO+1
; LDX #$A0
; STA SCRMO
 LDX #0
DISPCL1: 
 LDA HWORD,X ;ORIGINAL COPY OF WORD
 BEQ DISPCL2 ;THE END
 STA PULLHOM+WDOFFSET,X
 INX
 BNE DISPCL1 ;DRAW WORD IN BOX
;
DISPCL2:
 LDA LSTCLS
 LDX #CLOFFSET
 JSR CLNOUT ;CLUSTER NUMBER OUT
 LDX #TLOFFSET 
 LDA NUMLET  
 JSR CLNOUT ;DISPLAY UPPER AREA
;
;POSITION ON CORRECT CLUSTER
;
DISPCM2:
 JSR LOCCLST
 BCS DISPCAB ;ABORT, EOT
;
;WORD DISPLAY LOOP
;
;DISPCM3:
; LDA #<WORDHOM
; STA SCRMO
; LDA #>WORDHOM
; STA SCRMO+1
 JSR WORDHOM_TO_SCRMO
;
 LDA #1   
 STA SHONUM ;NUMBER TO DISPLAY
;
DISPCL4:
;MAIN LINE DISPLAY LOOP
 LDY #0
 LDA (SCRMO),Y   
 CMP #93
 BEQ DISPCL6 
;
 LDA #93
 LDY #39 ;LENGTH OF SCREEN
 JSR POPSCR ;PLACE & COLOR SCREEN W/RIGHT EDGE
 LDA #' '
 DEY
DISPCL5:
 JSR POPSCR
 DEY
 BNE DISPCL5 ;CLEAR OUT THE LINE
 LDA #93
 JSR POPSCR ;PLACE LEFT EDGE, LINE NOW READY FOR NUMBERS
;
;TEXT NOW POINTS AT WORD, WE HAVE AT LEAST ONE!
;
DISPCL6:
 LDA SHONUM
 JSR HEXOUT
;
 JSR DNUMBR1 ;DISPLAY LEFT NUMBER
;
;MOVE WORD ONTO SCREEN, PREPARED W/NUMBERS
;
 JSR DWORD1 ;DISPLAY 1ST WORD [CS] OK
 BCC DISPCAB ;ABORT, EOT
;
;OUT OF WORD!, IF EOT WE WOULD BE OUT
 JSR INCTE1 ;BUMP UP TO CHAR OR END OF CLUSTER
 JSR TEXCF0 
 BEQ DISPCAB ;NO MORE WORDS, EOF
 CMP #' ' ;IS THIS A SPACE?
 BEQ DISPCAB ;NO MORE WORDS, EOC
;
;OK, MORE WORDS, NOW DRAW #2
;
 LDA SHONUM
 JSR HEXOUT
;
 JSR DNUMBR2
;
 JSR DWORD2 ;DISPALY 2ND WORD [CS] OK
 BCC DISPCAB ;ABORT, EOT
;
 JSR INCTE1 ;BUMP UP TO CHAR OR END OF CLUSTER
 JSR TEXCF0
 BEQ DISPCAB ;ABORT,EOT
 CMP #' ' ;IS THIS END OF CLUSTER?
 BEQ DISPCAB ;NO MORE WORDS, EOC
;
; LDA #40
; JSR ADDASM ;SCRMO = SCRMO + .A
 JSR AD28SM ;SCRMO = SCRMO + $24(40)
;
 JMP DISPCL4 ;GO DO NEXT WORD(S)
;
DISPCAB:
;FOR SOME REASON, WE HAVE ABORTED
; LDA #40
; JSR ADDASM ;MOVE TO NEXT LINE!
 JSR AD28SM ;SCRMO = SCRMO + $24(40)
;
 LDY #39
 LDA #125 ;LOWER RIGHT
 JSR POPSCR
;
 LDA #64 ;BOTTOM CHARACTER
 DEY
DSPCAB1: 
 JSR POPSCR
 DEY
 BNE DSPCAB1       
;
 LDA #109
 JSR POPSCR
;
; PLA
; STA TEXT+1
; PLA
; STA TEXT ;RESTORE TEXT POINTER
 JMP POP_TEXT
;
; RTS
;
;
CLNOUT:
 JSR HEXOUT ;CONV TO ASC
 STA PULLHOM,X
 LDA TEMP1 ;TENS PLACE
 CMP #'0'  
 BNE CLNOUT1
 LDA #' '
CLNOUT1:
 STA PULLHOM-1,X     
 RTS
;
;"BOX" FOR CLUSTERS
;
;
CBOX:
!byte 39
!byte $FF,64,37
!text "WORD:",$FF,32,24,"1 O",'F'-64," 1 "
!byte $FF,64,37,0
;
STTXT0R:
 LDA #RETURN  
!byte $2C
STTXT0S:  
 LDA #' '
STTXT0:
 LDY #0      
STTXTY:
 STA (TEXT),Y
 JMP INCTE1
;
;
DNUMBR1:
 LDY #2
!byte $2C
DNUMBR2: 
 LDY #22
 JSR POPSCR ;PLACE LOW DIDGET OF 1ST PLACE
 LDA TEMP1 ;IS HI DID SIGNIFICANT?
 CMP #'0'
 BEQ DNUMBR3 ;NO!
 DEY
 JSR POPSCR ;PLACE LOW DIDGIT
DNUMBR3:
 INC SHONUM ;BUMMP UP FOR NEXT TIME
 RTS
;
DWORD1:
 LDY #4
!byte $2C
DWORD2:
 LDY #24
;
 LDX #0 ;INDEX [0] FOR TEXT
DWORD3:
 LDA (TEXT,X)
 CMP #ENDT ;IS THIS END/EOT
 BEQ DWORD4 ;ABORT! ABORT! EOT!
 BCS DWORD5 ;"NORMAL" EXIT [CS]!
 JSR POPSCR
 JSR INCTE1 ;POINT TO NEXT LETTER
 INY
 BNE DWORD3
DWORD4:
 CLC
DWORD5: 
 RTS
;
LOCCLST:
;LOCATE TEXT AT CLUSTER
; LDA STTEXT
; STA TEXT
; LDA STTEXT+1
; STA TEXT+1 ;SET TEXT POINTER TO HOME
 JSR STTEXT_TO_TEXT	;HARMS .X
;
 LDA SHONUM
 BEQ LOCCLST3 ;AT CORRECT CLUSTER
;
LOCCLST2:
 JSR LKFDP1 ;MOVE TO NEXT LINE/EOL
 JSR TEXCF0 ;RETRIEVE 0 CHAR
 BEQ LOCCLST4 ;DISPCAB ;ABORT ALL !
 CMP #' ' ;IS THIS CLUSTER TERMINATOR?
 BNE LOCCLST2
 DEC SHONUM
 BNE LOCCLST2 ;NOW AT THE CORRECT CLUSTER
 JSR INCTE2
LOCCLST3:
 CLC
 RTS
LOCCLST4:  
 SEC
 RTS
;
SWPDISS:
;SWAP BANKS, DISPLAY, AND SWAP
 JSR SWPBLK ;[1]
 JSR CLRBLK ;FIX COLOR
 JSR DISPLY ;
 JMP SWPBLK ;[2]
;
;
RETNATOTE:
 LDA RETRNA
 STA TEXT
 LDA RETRNA+1
 STA TEXT+1 
 RTS
;
TETORETNA:
 LDA TEXT
 STA RETRNA
 LDA TEXT+1
 STA RETRNA+1
 RTS
;
WORDHOM_TO_SCRMO:
 LDA #<WORDHOM
 STA SCRMO
 LDA #>WORDHOM
 STA SCRMO+1
 RTS
;
;
!eof
;
; EXTERN FC_CURSOR_LEFT
; EXTERN NUMLET
; EXTERN DISPLAY_ON_NO_DISPLAY
; EXTERN DISPLAYOFF
