;
!zone WINDOW
;
; WORD WRITER LORAM
;  BY JEFF LOMAX
;
;
;
MAX_MACRO_LENGTH =  119
;
; BASIC START
;
!initmem $FF
 * =  $801
; ORG  $7FF
; DB $01,$08
!byte $24,8,$A
;
CBUF2: 
;
!text 0,$9E,"2087",$3A
!byte $8F,34,20,20,20,20,20,20,20
!text 20,20,20,20,20,"WORD WRITER"
!byte 0,0,0
;
; BRANCH TO WORD WRITER
;
BEGIN
;
 JMP STRTUP ;HELLO WORD WRITER (ENDMOD)
;
!if  DEBUGGER_PRESENT { 
 NOP
} else { 
PAGE_TABLE =  $033C+$1F
PAGE_LENGTH_LO =  $033C+$1F+53
PAGE_LENGTH_HI =  $033C+$1F+53+53
;
} 
;
;
; WINDOW ROUTINES
;
ROMSIN:
 PHA         ;SAVE AC
 LDA #$37    ;GET BASIC/IO/KERNAL
 STA $01     ;INTO CONTEXT
;
!if  DEBUGGER_PRESENT { 
 NOP
} else { 
 CLI         ;START INTERRUPTS
} 
;
 PLA         ;RESTORE A
 RTS
;
;
CHRIN:       ;MOST IMPORTANT KERNAL CALL
 JSR ROMSIN  ;DROPS THRU
 JSR $FFCF
;(FT)
;
ROMOUT:
 PHA      ;SAVE AC
 LDA #$38
 SEI
 STA $01  ;KILL OP-SYSTEM
 PLA      ;RESTORE AC
 RTS
;
VIC_SCREEN_ON:
 JSR ROMSIN           ;.X UNHARMED
 LDA #27
 BNE VSO_JOIN
;
VIC_SCREEN_OFF:
 JSR ROMSIN
 LDA #11
VSO_JOIN:
 STA $D011
 BNE ROMOUT
;
CLR_BACKGROUND:
CLRBLK:
 JSR ROMSIN
 LDX #0
.CLRB_LOOP:
 LDA STCOLR
 STA $D800,X
 LDA TXCOLR
 STA $286
 STA $D84F,X
 STA $D900,X
 STA $DA00,X
 STA $DB00,X
 DEX
 BNE .CLRB_LOOP
;
 BEQ ROMOUT
;
;
TOP_AREA:
 LDA TXCOLR
 PHA
 LDA BDRBAK
 STA TXCOLR
 JSR CLRBLK
 PLA
 STA TXCOLR
 RTS
;
;
!if  DEBUGGER_PRESENT { 
CBUF:
!fill  30, $FF
PAGE_TABLE:
!byte 0,0,0,0,0,0,0,0,0,0
PAGE_LENGTH_LO:
!byte 0,0,0,0,0,0,0,0,0,0
PAGE_LENGTH_HI:
!byte 0,0,0,0,0,0,0,0,0,0
;
} else { 
CBUF =  $033C
} 
;
;
; INDIVIDUAL ROM ROUTINES
;
CHKIN:
 JSR ROMSIN
 JSR $FFC6
 JMP ROMOUT
;
CHKOUT:
 JSR ROMSIN
 JSR $FFC9
 JMP ROMOUT
;
SPACE_OUT:
 LDA #' '
!byte $2C;SKIP 2
CRLF:
 LDA #$0D       ;SEND CR
CHROUT:
;INTERFACE TO PRINT PREVIEW
 BIT PREVIEW    ;ARE WE IN PREVIEW MODE?
 BPL CHROUT1    ;[0] NO, DO REGULAR CHROUT
 JMP DRAWCHAR   ;PLACE CHAR ON 80 COLUMN SCREEN
;
CHROUT1:
 JSR ROMSIN
 JSR $FFD2
 JMP ROMOUT
;
CLALL:
 JSR ROMSIN
 JSR $FFE7
 JMP ROMOUT     
;
CLOSE:
 JSR ROMSIN
 JSR $FFC3
 JMP ROMOUT 
;
CLRCHN:
 JSR ROMSIN
 JSR $FFCC
 JMP ROMOUT
;
!if  CALCULATOR_PRESENT { 
CRUNCH:
 JSR ROMSIN
 LDA #0
 STA $7A
 JSR $A57C   ;CRUNCH
 LDA #0
 STA $7A
 LDA #2
 STA $7B
 JSR $AD9E   ;EVAL
 JMP ROMOUT
} 
;
RECORD_PLAY:
!byte 0;0 NORMAL FF PLAY 1 RECORD
;
;
GETIN:
 LDA RECORD_PLAY		;MACRO ACTIVE?
 BEQ .NORMAL_READ		;NO, GO DO NORMAL READ
 CMP #$FF    			;PLAYING?
 BNE .RECORD			;NO, GO RECORD
;
 LDY WHICH_MACRO                ;WHICH MACRO 0/2?
 LDA MACRO_LIMIT
 CMP MACRO_1_END,Y              ;GET INDEX TO START OF MACRO
 BNE .STILL_MORE
;
 JMP .NORMAL_PLAY_READY         
;*NOTE* CAN GO JUST TO END_PLAY
;
.STILL_MORE:
 TAX
 LDA KEY_RECORD_BUFFER,X
 JSR MACRO_FIX_X                ;INC X AND WRAP
 STX MACRO_LIMIT
.OUT:
 RTS                            ;EXIT
;
;
;RECORD BUFFER
.RECORD:
 JSR .NORMAL_READ               ;GET A KEY TO RECORD
 BEQ .OUT                       ;IF NO KEY, SKIP
;
 LDY WHICH_MACRO                ;0 OR 2 FOR WHICH MACRO
 LDX MACRO_1_END,Y              ;GET END ADDRESS FOR THIS MACRO
 STA KEY_RECORD_BUFFER,X        ;STORE THE KEY
 JSR MACRO_FIX_X                ;INC X AND WRAP
 CPX MACRO_LIMIT                ;ARE WE OUT OF MEMORY?
 BEQ .OUT_OF_MEM 
;
;READY TO RECORD CHARACTER
 PHA                            ;SAVE CHAR FOR WW
 TXA
 STA MACRO_1_END,Y              ;UPDATE THE INDEX
 PLA                            ;RESTORE CHAR FOR WW
 RTS                            ;EXIT
;
.OUT_OF_MEM:
 LDX #0
 STX RECORD_PLAY
;
 JSR NOT_ENOUGH_MEMORY         ;ACKNOWLEDGE PROBLEM
;
.NORMAL_PLAY_READY:
;
 JMP END_PLAY
;
;
.NORMAL_READ:
 JSR ROMSIN
;
!if  DEBUGGER_PRESENT { 
.LOOP:
 LDA NDX
 BNE .READ_KEY
 JSR $EA87         ;SCAN FOR A KEY
 LDY #$05
 LDX #$FF
.XLOOP:
 DEX
 BNE .XLOOP
 DEY
 BNE .XLOOP
;
; JMP ?LOOP
 BEQ .LOOP
;
.READ_KEY:
 JSR $E5B4
} else { 
 JSR $FFE4 
} 
 JMP ROMOUT
;
GETIN1:
 JSR ROMSIN
;
!if  DEBUGGER_PRESENT { 
 LDA NDX
 BNE .KEY_THERE
 JSR $EA87         ;SCAN FOR A KEY
 LDY #$05
 LDX #$FF
.XLOOP0307:
 DEX
 BNE .XLOOP0307
 DEY
 BNE .XLOOP0307
;
 LDA #0
 JMP ROMOUT
.KEY_THERE: 
 JSR $E5B4
} else { 
 JSR $FFE4 
} 
;
 JMP ROMOUT
;
MACRO_FIX_X:            
 INX                            ;INC X AND WRAP
 CPX #119                       ;MAX_MACRO_LENGTH
 BCC .OK                        ;KEEP THIS PAIRED WITH RECORD
 LDX #0                         ;START IN EDITLN
.OK:
 RTS
;
;
OPEN:
 JSR ROMSIN
 JSR $FFC0
 JMP ROMOUT
;
RTIBYT
 LDA $DC0D 	      ;ADDED DECEMBER 1987
RESTOR:
;
 RTI
;
!if  CALCULATOR_PRESENT { 
FOUT:
 JSR ROMSIN
;
FOUT1:
 JSR $BDDD         ;FOUT
 JMP ROMOUT
} 
;
COUT JSR ROMSIN    ;CATALOG OUT
 JSR $B391         ;.AYTOFAC
; JMP FOUT1         ;FOUT
;*NOTE* CAN RE-ORGANIZE FOUT FALL THRU
FOUT1:
 JSR $BDDD         ;FOUT
 JMP ROMOUT
;
SETLFS:
 STA $B8           ;LA
 STX $BA           ;FA
 STY $B9           ;SA
 RTS
;
SETNAM:
 STA $B7           ;FNLEN
 STX $BB           ;FNADR
 STY $BC           ;FNADR+1
 RTS
;
BYEBYE:
 JSR ROMSIN
 JMP $FCE2
;
DCNAME 
!text "0:A,S,R"
;
;
!if  CALCULATOR_PRESENT { 
CERROR:
 JSR ROMOUT
 JMP CERRVT ;HANDLE ERROR
} 
;
;
CLRBYT:
 JSR ROMSIN
 STA (SCRMO),Y
 JMP ROMOUT
;
LOAD:
GLOAD:
 JSR ROMSIN
 LDA #0
 JSR $FFD5
 JMP ROMOUT
;
SAVE_RAM:
 JSR ROMSIN
 JSR $FFD8
 JMP ROMOUT
;
;
SAVE_LOAD_STRING_LEN:
!byte 0
SAVE_LOAD_STRING:
!fill 15, $FF
;
GEOFIL: 
!text ":*"
GEOSMG: 
!text "GEOS BOOT"
CATD: 
!text "$0";CAT
;
PRINTER_DEF_NAME:
;
!text "0:DEFAULT.GRF*"
;
EXTENSION_TABLE:
!text "GRF"
!text "SCN"
!text "DRF"
;
;# MOVE TO ZP
REGLOAD:
!byte 0
;
;
!eof
;
; PUBLIC BYEBYE
; PUBLIC CHKOUT
; PUBLIC CHROUT
; PUBLIC CLALL
; PUBLIC CLOSE
; PUBLIC CLRCHN
; PUBLIC CLRBLK
; PUBLIC GETIN
; PUBLIC FONT_BASE
; PUBLIC MACRO_FIX_X
; PUBLIC RECORD_PLAY
; PUBLIC OPEN
; PUBLIC SAVE_LOAD_STRING_LEN
; PUBLIC SETLFS
; PUBLIC SPACE_OUT
; PUBLIC RESTOR
; PUBLIC ROMOUT
; PUBLIC ROMSIN
; PUBLIC RTIBYT
; EXTERN DRAWCHAR
; EXTERN MACRO_LENGTH
; EXTERN MACRO_LIMIT
; EXTERN MACRO_1_START
; EXTERN MACRO_1_END
; EXTERN MACRO_2_START
; EXTERN MACRO_2_END
; EXTERN STRTUP
; EXTERN WHICH_MACRO
