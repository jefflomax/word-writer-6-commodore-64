;
!zone PRINT
;
!SOURCE "WWSETUP.ASM"
!SOURCE "VARIABLS.ASM"
;
;
;
; EXTERN GETIN
;
;
PW_PRINT_FONTS =  00
PW_NUMBER_PAGES =  01
PW_BLANK_SCREEN =  02
;PW_DOUBLE_SPACE:  EQU 05
PW_EJECT_PAGE =  03
PW_SHEET_FEED =  08
PW_CHAIN_PAGE =  06
PW_MERGE_NAMES =  07
PW_NORMAL_ASCII =  05
PW_1526_802 =  00   ;ALSO PRINT FONTS?
PW_LINEFEEDS =  04
PW_SECONDARY_ADDR =  09
PW_TOP_MARGIN =  10
PW_BOT_MARGIN =  11
PW_PAGE_LENGTH =  12
PW_START_PAGE =  13
PW_NUMBER_COPIES =  14
;
PT2:
!byte 0
PT3:
!byte 0
FEATUR: 
!byte 0;1526 UNDERLINE
EMBEDDED_BYTES:
!byte 0
LEADING_EMBEDDED_CODES:
!byte 0
SAVE_SPACING:
!byte 0
PM_LINES_PER_PAGE: ;# Renamed for collision (PM-PRINT MODULE)
!byte 0
LAST_FIELD:
!byte 0
JUSWOR:
!byte 0
;
;
TPRINT_FILE:
;
 LDA TEMP5
 BEQ .NO_MM
;
 LDA #<EDIT_LINE
 LDX #>EDIT_LINE
 JSR SETUP_RW_NO_CASE_MOD
;
.NO_MM:
 BIT PREVIEW             ;IF IN PREVIEW MODE
 BMI .NO_BLANK           ;DO NOT BLANK SCREEN
 JSR BLANK_THE_SCREEN    ;BLANK SCREEN IF ATTRIB SELECTED
;
.NO_BLANK: 
 JSR PUSH_TEXT
 JSR ALL_STYLES_OFF
 LDA #16                 ;USER DEFINED CODE
 STA IN_GRAPHICS_PRINT   ;1..127 = TEXT PRINT
 JSR POINT_AND_PRINT     ;SEND GLOBAL CODE
 JSR POP_TEXT
;
 JSR TETORETNA          ;SAVE TEXT, CURRENT SPACING SAVED OUTSIDE
;
MULTICOPY:
;
 LDA TEMP5		;MERGE NAMES GOING ON?
 BNE .MERGE_NAMES_INTO_DOC
 JMP .NO_MERGE_NAMES	;BIF NO
;
;**********************************
;**** MAIL MERGE INTO DOCUMENT ****
;**********************************
;
.MERGE_NAMES_INTO_DOC:
 JSR FC_CLEAR_HOME_NT   ;MERGE NAMES ALWAYS STARTS AT BEGINNING
;
; JSR CLRCHN
; JSR CHNL2I
 JSR CLR_CHNL2I
;
.NEXT_CHAR:
 JSR EOT_OR_ENDREC	;FIND NEXT EOT OR ENDREC, EOT = BEQ
 BEQ .STRIP_FIELDS	;IF EOT, QUIT
;
 PHA
 JSR READWD		;READ LINE, SET S_S_L AND LAST_FIELD
;
;*NOTE* MUST HANDLE EOF
;
 LDA EDIT_LINE+1	;FLAG FOR DON'T PROCESS?
 ORA EDIT_LINE		;IF BOTH 1ST AND 2ND CHARACTERS ARE $80
 CMP #$80		;DON'T PROCESS IF $80
 BNE .PROCESS 
.STRIP:
 JSR READWD		;READ NEXT FIELD
 BCC .NOT_EOF
;
 PLA			;GET IT BACK
 JSR CLOSE2
 JMP PRINTE
;
; LDA LAST_FIELD		;END OF FILE?
; CMP #2			;= 2 IF ENDED
; BEQ ?ALL_DONE		;TRY THIS IF DONE
; BNE ?OOO
;?OOO:
;*NOTE* EOF HERE????
;
.NOT_EOF:
 LDA EDIT_LINE		;LOOK FOR START
 CMP #$80
 BNE .STRIP 
 LDA EDIT_LINE+1
 CMP #$80
 BEQ .STRIP
;
.PROCESS: 
 PLA
 CMP #SKIPFLD			;SKIP THIS FIELD (AND MARKER)?
 BEQ .SKIP_REJOIN		;GO DO NEXT CHARACTER
;
;
.NC_LOOP:
 LDY SEARCH_STRING_LENGTH
 LDA EDIT_LINE,Y
 CMP #ENDREC
 BCS .SKIP
 CMP #' '
 BNE .DONE			;STRIP TRAILING SPACES AND ENDRECS
.SKIP:
 DEC SEARCH_STRING_LENGTH
; BNE ?NC_LOOP
; BEQ ?ALL_SPACE
 TYA				;SET FLAGS [0]
 BNE .NC_LOOP
; BEQ ?ALL_SPACE
;
.DONE:
;
 INC SEARCH_STRING_LENGTH
.ALL_SPACE:
 INC SEARCH_STRING_LENGTH
 LDY SEARCH_STRING_LENGTH	;LENGTH OF REPLACE TEXT
 LDA #STOPREC
 STA EDIT_LINE-1,Y
; STA EDIT_LINE,Y
 JSR MOVE_UP_Y
;
 JSR CLRAXY
; STY LAST_FIELD		;0 = NOT FOUND
.LOOP:
 LDA EDIT_LINE,Y
;
.NOT_EOR: 
 JSR INCTE1
 STA (TEXT,X)
 INY
 CPY SEARCH_STRING_LENGTH
 BNE .LOOP
;
.SKIP_REJOIN:
 JSR INCTE1		;MOVE TEXT UP ONE
 LDY LAST_FIELD		;IF LAST REC, STOP FILLING, IGNORE REST
 BEQ .NEXT_CHAR		;RESET .Y TO 0 AND CONTINUE IF NOT LAST FIELD
 BNE .ALL_DONE		;LAST FIELD PROCESSED, NO NEED TO SKIP.
;
;EOT FOUND, STILL LOOKING FOR NEXT FIELD...
.STRIP_FIELDS:
 JSR READWD
; BCC ?GOOD_READ
;
.GOOD_READ:
 LDA LAST_FIELD
 BEQ .STRIP_FIELDS
;
.ALL_DONE:
;
 JSR CLRCHN
 JSR PRINTER_CHKOUT
 JSR PUSH_P2
 JSR REFORMAT_DOC		;FC HOME AND REFORMAT DOC
 JSR POP_P2
;
.NO_MERGE_NAMES:
;
 JSR EOT_INTO_AX		;*AFTER* THE EFFECT OF MAIL MERGE
 JSR INC_AX_BY_1		;BUMP UP EOT AND MAKE IT
 STA JBUFF			;NEW "JBUFF"
 STX JBUFF+1
;
 JSR KILL_HEAD_AND_FOOT
;
 JSR SET_FAKE_FOOTER           ;SETUP FAKE FOOTER IF PRES
;
 LDA STPAGE  ;START PAGE
 STA PAGE    ;SET FIRST LINE
;*NOTE* DOES THIS EFFECT LINK (WHERE DOC ENDS UP?)
 JSR PRMENU  ;SET UP SCREEN
 JSR NEW_LINES_PAGE
;
;
;
BEGINPAGE1:
 JSR DOCHKM     ;PROCESS IF CHECK MARK LINE
 BCS BEGINPAGE1 ;FOUND VALID CM LINE, CONTINUE UNTIL OTHERWISE
;
;BEGINPAGE2:
;
BEGINPAGE3:
;
;TOP MARGIN HERE
 LDX #PW_TOP_MARGIN
 JSR TOPMARGIN
;
STLINE:
;
 LDA #0      			;CLEAR FEATURE
 STA ACTUAL_COLUMN
 STA FEATUR  			;FLAG
;
 LDA ATTRIBUTES
 STA START_LINE_ATTRIBUTES
;
STLIN1:
 JSR DOCHKM  ;DO ANY CHECKMARK
;
 JSR TEST_SET_NLS       ;IF NEW_LINE_SPACE SET BP TO NLS, CLEAR NLS
;
 BCS STLIN1  ;IF TWO IN A ROW
;
 LDA PAGE_FORCED        ;WAS THAT -PAGE?
 BEQ .NOT_FORCED        ;IF NOT, CONTINUE...
;
 LDX #0                 
 STX PAGE_FORCED        ;CLEAR PAGE BREAK FLAG
;
.FORCE_THE_PAGE:
 LDX PRTLIN             ;REMAINING LINES
 JSR PXCRLF             ;ARE BLANK
 JMP PENDP3             ;DO BOTTOM MARGIN
;
;*NEW*
;CHECKMARK COULD HAVE BEEN LAST LINE ON PAGE
.NOT_FORCED:
 LDA PRTLIN             ;IF NO LINES LEFT, WE ARE DONE (CM WAS LAST LINE)
 CMP BIGGEST_POINTSIZE  ;WILL THIS MANY LINES FIT?
 BCC .FORCE_THE_PAGE
;
PRT5FE:
;LOOK FOR <REMOVE THIS LINE IF NO FILL> FIELD
;
 LDY #$FF
.LOOP0412:
 INY
 LDA (TEXT),Y		;GET YTH CHAR
.INLOOP:
 CMP #ENDT		;IS IT THE END?
 BCS .NOT_SKIPPED	;IF SO, DO LINE AS NORMAL
 CMP #LINEFLD		;IS THIS "KILL THIS LINE"?
 BNE .LOOP0412		;IF NOT, GET NEXT CHAR
 INY 			;IF SO, GET THE NEXT
 LDA (TEXT),Y		;CHARACTER AND SEE IF IT'S STOPREC
 CMP #STOPREC		;IF IT ISN'T, SEE IF IT'S THE END AND LOOP
 BNE .INLOOP		;IF IS IS, SKIP THIS LINE AND TRY AGAIN
;
 JSR TEXT_TO_NEXTLINE	;ELSE SKIP THIS LINE, AND
 JMP PRT5FE		;TRY AGAIN
;
.NOT_SKIPPED:
 JSR PRTLMG             ;SEND LEFT MGN
 JSR ALL_STYLES_ON
PRINT5:
;
 JSR IS_JUSTIFY_ON
 BNE .READ_NORMAL_CHAR
 JSR JUSTFY             ;GET CHAR JUSTIFIED CHAR
 JMP .VALID_CHRS
;
.READ_NORMAL_CHAR:
 JSR TEXCF0 
 CMP #' '          ;DO ONLY SPACES REMAIN ON THIS LINE?
 BNE .VALID_CHRS   ;IF THIS IS NOT SPACE, CONTINUE
 BEQ .START
;
.LOOP0444:
 CMP #' '          ;IF SPACE FOLLOWED BY NON-SPACE, RESTORE SPACE, CONT
 BNE .MAKE_SPACE 
.START:
 INY
 JSR TEXCFE        ;GET NEXT CHAR, TEST END
 BCC .LOOP0444         ;IF NOT EOL, TEST FOR SPACE/NON-SPACE
 PHA
 JSR ADDYTX
 PLA
 BMI .VALID_CHRS   ;IF IS EOT, GET OUT!
.MAKE_SPACE:
 LDA #' ' 
;
.VALID_CHRS:
 CMP #ENDT              ;IS THIS EOLN/EOT?
 BCS PRINT1             ;IF SO, PRINT1
 PHA			;SAVE CHAR TO PRINT
 JSR BYTOUT             ;SEND BYTE W/UNDERLINING,ASCII, ETC
 JSR JUSINC             ;TEXT+1 IF NOT JUSTFY
 PLA			;RETRIEVE PRINTED CHAR
 BMI PRINT5		;IF PRINT-STYLE, NO ACUTUAL PRINT, DON'T CLRCHN
;			;THIS CAUSED ? TO PRINT ON MPS1000
;PJUST1:
 JSR CLRCHN
 JSR GETIN1             ;READ KEYBOARD
;
PPAUSE1:
 CMP #' '               ;PAUSE?
 BNE PPAUSE9
;
PPAUSE2:
 JSR GETIN1
 BEQ PPAUSE2
 CMP #' '
 BEQ PPAUSE2
;
PPAUSE9:
;
 PHA
 JSR PRINTER_CHKOUT
 PLA
 CMP #3               ;RUN/STOP?
 BNE PRINT5           ;GO DO ANOTHER CHR
;
; LDX #0
;*NOTE* ANOTHER MERGE ?
; STX TEMP5            ;CLEAR MERGENAMES
;
; INX                  	;LAST COPY
 LDX #2
 STX LAST_FIELD	      	;FLAG END
 DEX			;[1]
 STX NUMBER_OF_COPIES 	;DONE
 BNE PRINT4           	;GET OUT!
;
PRINT1:
 JSR P1526              ;UNDERLINE 1526
 CMP #ENDT              ;END IT ALL?
 BEQ PRINT4             ;YES, EXIT
;
 JSR ALL_STYLES_OFF
;
 JSR RETOUT                     ;PRINT OUT THIS LINE & RETS
;
 LDA PRTLIN                     ;HOW MANY LINES ARE LEFT?
 BNE PRINT6
;
;
;END OF PAGE HERE!
;
;
PENDP2:
;
 JSR JUSINC
PENDP2A:
;
;PAGELENGTH-TOP-
;IF TOP MARGIN + PRINTED LINES + BOTTOM MARGIN < PAGE LENGTH,
;PRINT A LINE.
;
PENDP3:
 LDX #PW_BOT_MARGIN
 JSR BOTTOMMARGIN
;
 JSR PRSHW0     ;PAUSE IF IN SHEET FEED.
;
 INC PAGE       ;PAGE=PAGE+1
 JSR NEW_LINES_PAGE
 JMP BEGINPAGE3
;
;
PRINT6:
; JSR RETOUT
;*NEW*
PRINT3:
 JSR JUSINC           ;TEXT+ IFNOT JUS
PJUST2:
 JMP STLINE
;
PRINT4:
;
PRIN6C:
;END OF DOCUMENT, LINES REMAINING = PRTLIN
;
;EJECT_PAGE STUFF
 LDX NUMBER_OF_COPIES           ;IF MULTI-COPY, DO PAGINATION
 CPX #2                         ;EXCEPT FOR LAST PAGE
 BCS .NO_STOP_EJECT
;
 LDA HEADER_FOOTER_TEXT+100     ;IS THERE A FOOTER?
 ORA TEMP5                      ;OR ARE WE MERGING NAMES?
 BNE .NO_STOP_EJECT
;
 LDX PW_S_EJECT_PAGE
 CPX #'Y'	     		;IS PAGE EJECT SET TO Y?
 BEQ .NO_STOP_EJECT		;THEN EJECT
;
 JSR PTCRLF
 JMP PRINTE 
;
;
.NO_STOP_EJECT:
 LDX PRTLIN
;
 BIT PREVIEW          ;PREVIEW MODE?
 BPL PRIN6E           ;NO, PRINT REMAINING LINES.
 LDX #1               ;YES, GO FORCE 1 CR
;
PRIN6E:
 JSR PXCRLF           ;NO, PRINT .X LINES
;
 LDX #PW_BOT_MARGIN
 JSR BOTTOMMARGIN     ;DO FOOTER/MARGIN.
;
 LDA TEMP5            ;MERGING NAMES?
 BEQ PRINT7           ;NO, SKIP
;
;**********************************
;**** REMOVE MAIL MERGE DATA   ****
;**********************************
 JSR FC_CLEAR_HOME_NT   ;MERGE NAMES ALWAYS STARTS AT BEGINNING
;
.NEXT_CHAR0587:
 JSR EOT_OR_ENDREC	;FIND NEXT EOT OR ENDREC, EOT = BEQ
 BEQ .DONE0589		;IF EOT, QUIT
 JSR INCTE1		;MOVE TEXT OFF ENDREC
 LDY #0
;
 CMP #SKIPFLD		;WAS THIS A SKIP-FIELD?
 BEQ .NEXT_CHAR0587 	;IF SO, GO GET NEXT CHARACTER
;
.LOOP0596:
 JSR LDA_TEXT_Y		;SEARCH FOR STOPREC UP TO 1 PAGE AWAY
 BEQ .DONE0589 
 CMP #STOPREC
 BEQ .REMOVE		;IF YOU FIND IT, GO REMOVE INSERTED TEXT
 INY
 BNE .LOOP0596		
 BEQ .DONE0589		;IF .Y > 255 AND NOT FOUND, IT'S NOT THERE.
;
.REMOVE:
 INY			;.Y 0..N -> 1..N+1
 TYA			;AND REMOVE THOSE BYTES
 JSR REMOVE_A_BYTES
 JMP .NEXT_CHAR0587
;
.DONE0589:
 JSR PUSH_P2
 JSR FC_CLEAR_HOME_NT
 JSR REFORMAT_DOC	;FC HOME AND REFORMAT DOC
 JSR POP_P2
;
 JSR PRSHW0		;DO SHEET FEED STUFF
;*NOTE* EXPLICIT CLOSE OF FILE?
 LDA LAST_FIELD		;IS THIS THE END?
 CMP #2
 BCS .END_MERGE		;THE END
;
 JMP PRINT2          	;DO NEXT DOC
;
.END_MERGE:
 JSR CLOSE2
;
PRINT7:
 LDA NUMBER_OF_COPIES           ;#COPIES-1
 DEC NUMBER_OF_COPIES
 CMP #1
 BEQ PRINTE
;
 JSR PRSHW0                     ;SHEET/FEED WAIT IF NEEDED
;
PRINT2:
;
 JSR FC_CLEAR_HOME_NT           ;MERGE NAME RE-LOOP
 JMP MULTICOPY
;
PRINTE:
 JSR CLALL
;
 LDA FIRST_PAGE
 STA PAGE
 LDA SAVE_SPACING
 JSR SET_BIG_AND_CURR_A
;
 JSR RETNATOTE
;
 JSR RESET
 JSR FC_BEGINNING_OF_LINE
;
HOLDOFFT:
 BIT PREVIEW
 BPL PCLOSEOUT
;
 JSR PRESS_ANY_KEY_CHROUT
 JSR WAIT_FOR_KEY
;
PCLOSEOUT:
 LDA #0
 STA IN_GRAPHICS_PRINT          ;0 = NOT PRINTING
 STA PREVIEW                    ;CLEAR PREVIEW MODE
;
 JSR INITILIZE40
;
 LDA CHAIN                      ;BMI ON, BPL OFF
 BPL .NOT_CHAINING
; JSR CHANOF
 JSR FC_CLEAR_HOME
;
.NOT_CHAINING:
 JSR TEXT_TO_EDIT_BUFFER
 JSR REFREASH_ALL_SCREEN
 JMP VIC_SCREEN_ON
;
;
PRTPRM:
 JSR PRRPRM           ;.X=NUMB
 LDX #0
 LDA (MSGOUT,X)       ;A=VAL
 CMP #'Y'
PRTPRM_RTS:
 RTS
;
PRRPRM:
 LDA #<PRTLST         ;.X=NUMB
 STA POINTER          ;P1
 LDA #>PRTLST
 STA POINTER+1        ;P1+1
;
 LDA #15              ;OFFSET OF PRINT DROP
MGP1PAX:
;
 JSR MUL_AX_PT        ;POINTER = (.A*.X)+POINTER, DESTROY P1
 JSR PT_INTO_AX
 JMP AX_INTO_MSGOUT 
;
PRSHW0:
 LDA TEMP6            ;SHEET FEED?
 BNE PRTPRM_RTS       ;ABORT
PRSHWT:
 LDX #6
 JSR SERPPT           ;PRESS ANY KEY MESSAGE
 JMP WAIT_FOR_KEY_AND_HEADER
;
;
P1526:
 PHA                  ;SAVE RET/EOT
;
 LDA PCSTART          ;IS FIRST CHARACTER CAPITOL M?
 CMP #'M'
 BNE P1526Z           ;ABORT
;
;BIT PREVIEW
;BMI P1526Z           ;IF PREVIEWING, ABORT
;
 LDA PREVIEW
 BMI P1526Z           ;IF PREVIEWING, ABORT
;
 STA ACTUAL_COLUMN    ;RESET TO ZERO
;
 LDX FEATUR           ;SOMETHING HAPPEN?
 BEQ P1526Z           ;ABORT
;
 LDA START_LINE_ATTRIBUTES
 STA ATTRIBUTES
;
 JSR IS_JUSTIFY_ON
 BNE .SKP
 JSR DECTE1
;
.SKP:
 JSR TEXT_TO_PREV_LINE
 LDA #142             ;GRAPHICS MODE
 JSR CHROUT           ;SEND
 LDA #141             ;CR/NLF
 JSR CHROUT
 JSR PRTLMG           ;SEND LEFT MARGIN
P15261:
 LDY #0
;
 JSR IS_JUSTIFY_ON
 BNE .SKP1
 JSR JUSTFY
 TAX
 JMP JUSPTC
;
.SKP1:
 LDA (TEXT),Y
JUSPTC:
 BPL .NORMAL_CHAR           ;BIF NOT EMBEDDED CODE
 CMP #ENDT
 BCS P15263                 ;FINISHED
 CMP #TABCHAR			;IS THIS A TAB CHARACTER?
 BEQ .SEND_TAB			;IF SO SEND TO BYTOUT
;
 JSR IS_STYLE_CODE
 BCS .NEXT_CHAR0760
 TXA
 JSR SET_STYLE
 JMP .NEXT_CHAR0760
;
.NORMAL_CHAR:
 LDA ATTRIBUTES
 AND #1
 BEQ .P15262
 LDA #164 			;AC=UNDERLINE
!byte $2C;SKIP TWO
.P15262:
 LDA #' ' 			;AC=SPACE
 JSR INC_AC_AND_CHROUT		;SEND $A4
 JMP .NEXT_CHAR0760
.SEND_TAB:			;AC=TAB(FROM ABOVE)
 JSR BYTOUT			;PROCESS SPC UND OR TAB
;
.NEXT_CHAR0760:
 JSR JUSINC 
 JMP P15261     ;NEXT CHAR
;
P15263:
 LDA #14        ;NORMAL PRINT
 JSR CHROUT
P1526Z:
 PLA
P152ZZ:
 RTS
;
JUSINC:
;
 JSR IS_JUSTIFY_ON
 BEQ P152ZZ 		;RTS
 JMP INCTE1 		;TEXT+1
;
PTCRLF:
 LDX #1 ;DO ONE
PXCRLF:
 CPX #0
 BEQ PTCRL3
PTCRL1:
;
 JSR CRLF ;SEND $0D
 BIT LINFED ;SEND LINEFEED?
 BPL PTCRL2 ;DO NOT SEND
 LDA #$A
 JSR CHROUT
PTCRL2:
 DEX
 BNE PTCRL1
PTCRL3:
 RTS
;
;
;HEADER & FOOTER PROCESSING
;
IMAGEHF:
;
 JSR PUSH_TEXT
 JSR HEADFOOT_INTO_TEXT
;
 JSR READ_HF_MARGINS
;
 LDY #0
;
IMAGE_DEF9:
 LDX #$FF 	;DO NOT HARM .Y
 STX EDIT_LINE	;MAKE RETURN
 LDX #239       ;WATCH TOTAL EDIT_LINE LENGTH!
;
 LDA #' '
IMAGEH1:
 STA EDIT_LINE,X 
 DEX
 BNE IMAGEH1	;RET [ALL SPACES]
;
;.X = [0]
;
 STX EMBEDDED_BYTES     ;TOTAL THIS LINE
 DEY
 JSR FINDLEN            ;ADD EMBEDDED
 JSR CLRAXY             ;FIRST FIELD
 JSR COPYFIELD
 BCS IMAGEH9            ;EXIT AND PLACE RETURN
;
 JSR FINDLEN            ;GET LENGTH OF FIELD #2 (PRINTABLE)
 LSR                  ;DIVIDE (LINELENGTH-FIELDLENGHT) BY 2
 CLC
 ADC SAVEYG             ;EMBEDDED_BYTES
;
 TAX
 JSR COPYFIELD          ;COPY FIELD #2 INTO EDIT_LINE
 BCS IMAGEH9            ;EXIT AND PLACE RETURN
;
 JSR FINDLEN            ;GET LENGTH OF FIELD #3
 CLC
 ADC SAVEYG             ;EMBEDDED_BYTES
 TAX
 JSR COPYFIELD          ;COPY FIELD #3 INTO EDIT_LINE
;
IMAGEH9:
 LDA #$FF               ;RETN ;???? EOT
 STA EDIT_LINE+1,X
;
 JMP POP_TEXT
;
;
FINDLEN:
;
 LDA EMBEDDED_BYTES
 STA SAVEYG
 LDX #0
;
 STX PRINTABLE_CHARACTERS
 STX PT3                        ;PAGEFLAG
 INY
 STY PT2                        ;HOLD NEXT Y FOR TEXT INDEX
FINDLEN1:
 LDA (TEXT),Y
 CMP #UPARROW                   ;END OF FIELD?
 BEQ FINDLEN3 
 CMP #ENDT                      ;END OF TEXT
 BCS FINDLEN3
 CMP #ENDREC
 BNE .SKP0885
 STA PT3                        ;PAGEFLAG
 BEQ .FIND_NORMCH
;
.SKP0885:
 CMP #$80
 BCC .FIND_NORMCH
 INC EMBEDDED_BYTES
;
 BNE .SKP2
;
.FIND_NORMCH:
;
 INC PRINTABLE_CHARACTERS
.SKP2:
 INY
 BNE FINDLEN1 ;NEXT CHAR
;
FINDLEN3:
 LDA PT3
 BEQ FINDLEN4
;
 LDA PAGE		;CURRENT PAGE #
 CMP #10 		;TWO CHAR USED?
 BCC FINDLEN4
 INC PRINTABLE_CHARACTERS
 CMP #100 		;THREE CHAR USED?
 BCC FINDLEN4
 INC PRINTABLE_CHARACTERS
FINDLEN4:
;
 LDA HF_LINE_LENGTH
 SEC
 SBC PRINTABLE_CHARACTERS
 LDY PT2
 RTS
;
;
PHEADER:
;
 JSR PUSH_TEXT
;
 LDA HEADER_FOOTER_TEXT,X 
 BEQ PHEADER4 		;NO HEADER/FOOTER PRESENT
;
 LDA ATTRIBUTES
 PHA 			;ON STACK
 STX CHR_OUT_TEMP
 JSR ALL_STYLES_OFF
 LDX CHR_OUT_TEMP
;
 LDA #0      
 STA ATTRIBUTES 
;
 JSR IMAGEHF 		;SET HEADER IMAGE IN EDIT_LINE
;
 LDX HF_LEFT_MARGIN
 JSR SENSPS
;
 LDY #0 
 STY CHR_OUT_TEMP
PHEADER2:
 LDY CHR_OUT_TEMP
 LDA EDIT_LINE+1,Y
 CMP #ENDT ;RET/EOT?
 BCS PHEADER3
 JSR BYTOUT ;PRINT A BYTE
 INC CHR_OUT_TEMP
 BNE PHEADER2
;
PHEADER3:
;
 LDA #<EDIT_LINE_P1 	;=EDIT_LINE+1
 LDX #>EDIT_LINE_P1
 JSR AX_INTO_TEXT
;
 LDA JUSTIFY_FORMAT 
 PHA
 LDA #$00
 STA JUSTIFY_FORMAT 
 JSR P1526
 PLA
 STA JUSTIFY_FORMAT 	;HANDLE POSSIBLE 1526 UNDERLINING
 JSR JUSTF2 		;SET JUSCHR = $FF
 JSR ALL_STYLES_OFF
;
 PLA
 STA ATTRIBUTES
;
PHEADER4:
 JSR PTCRLF
 JMP POP_TEXT
;
;
BYTOUT:
 JSR PRINT_STYLE
 BCC BYT_OUT_ABORT  	;SENT CODE, SKIP "CHARACTER"
;
 CMP #TABCHAR		;IS THIS A TAB?
 BNE .NORM 
;
 LDX JUSTIFY_FORMAT	;IS MARGIN TYPE LEFT?
 BNE .NORM 		;IF NOT, NO TABS
;
 LDA .PROCESSED_TAB	;WAS THE LAST CHARACTER PROCESSED A TAB TOO?
 BEQ .LAST_CHAR_NOT_TAB	;IF NOT, PROCEED AS NORMAL
 INC ACTUAL_COLUMN	;BUMP UP ACTUAL COLUMN FOR NEXT TAB
;
.LAST_CHAR_NOT_TAB:
 DEX			;[FF]
 JSR FIND_TAB_GT_ACT_COL;GET COLUMN FOR THIS TAB
 CMP #$FF		;AT END OF LIST?
 BEQ .NONE		;THIS ISN'T VALID, DO NOTHING
;
 LDX .PROCESSED_TAB	;WAS THE LAST CHARACTER PROCESSED A TAB?
 BEQ .ACT_COL_OK	;IF NOT, GO ON
 DEC ACTUAL_COLUMN	;ELSE PUT ACUTUAL COLUMN BACK
;
.ACT_COL_OK:
 SEC
 SBC ACTUAL_COLUMN
;
 TAX
 DEX
 BEQ .EMPTY_TAB
.LOOP1010:
;*NOTE*
 LDA #' '
 JSR INC_AC_AND_CHROUT	;SEND SPACE, INC ACTUAL_COLUMN
 DEX 
 BNE .LOOP1010
.EMPTY_TAB:
 INC .PROCESSED_TAB
.NONE:
 RTS 
.PROCESSED_TAB:
!byte 0
;
;PLAIN_BYTE_OUT:
.NORM:
 CMP #$80
 BCS BYT_OUT_ABORT
 PHA
 LDA #0
 STA .PROCESSED_TAB
 PLA
;
 JSR TOASCI  		;TRANSLATE TO ASCII
;
INC_AC_AND_CHROUT:
 INC ACTUAL_COLUMN
 JMP CHROUT  		;SEND TO PRINTER
;
BYT_OUT_ABORT:
 RTS
;
;
MARGINLENGTH:
!byte 0
MARGNTYPE:
!byte 0
;
BOTTOMMARGIN:
TOPMARGIN:
;
;.X = 11/TOP 12 BOTTOM
 LDA PRINT_GRAPHICS         ;IN FONT MODE?
 BNE TOPMARGI9              ;IF SO, NO MARGINS
;
 STX MARGNTYPE ;UPPER/LOWER
 JSR GET_PRINT_WINDOW_NUMBER
 CMP #0
 BEQ TOPMARGI9 ;NO TOP/BOTTOM MARGIN.
;
;FOR 1-2 LINES, PLACE HEADER ON LINE 1, FOOTER ON LINE 2
;FOR 3+  LINES, PLACE HEADER ON LINE 2, FOOTER ON LINE N-1
 STA MARGINLENGTH
;
 LDY MARGNTYPE ;UPPER/LOWER MARGIN
 CPY #PW_TOP_MARGIN
 BNE TOPMARGI4
;
 CMP #3
 BCC TOPMARGI3
;
;IF 3 OR MORE LINES, SEND 1 BLANK, THEN THE POTENTIAL HEADER
 JSR PTCRLF ;1 LINE
 DEC MARGINLENGTH ;REDUCE BY 1 FOR EXTRA BLANKS SUBTRACTION.
;
TOPMARGI3:
;UPPER MARGIN.
;IF 1, HEADER, IF 2, HEADER BLANK.
 LDX #0
 JSR PHEADER
 DEC MARGINLENGTH ;MARGINLENGTH -= 1;
 LDX MARGINLENGTH
 JMP PXCRLF ;DONE.
;
TOPMARGI4:
;DOING LOWER MARGIN.
;IF 3 OR MORE, SEND N-2 BLANK LINES.
 CMP #3
 BCC TOPMARGI6 ; 1 OR 2 LINES.
;[SEC]
 SBC #2
 TAX
 JSR PXCRLF ;THERE GO THE LINES!
;NOW PRINT FOOTER BLANK.
 LDX #100
 JSR PHEADER
 LDA TEMP6 ;SHEET FEEDING?
 BEQ TOPMARGI9 ;AVOID THROWING OUT "LAST LINE"
 JMP PTCRLF ;1 LINE
;
TOPMARGI6:
;IF 1, FOOTER, IF 2, BLANK FOOTER.
 CMP #2
 BNE TOPMARGI7
;PRINT BLANK LINE
 JSR PTCRLF
;
TOPMARGI7:
 LDX #100
 JSR PHEADER ;PRINT FOOTER
;
TOPMARGI9:
 RTS
;
;
INCDEC_ABORT:
 PLA
 RTS
;
INCDEC_PAGE_TENS:
 PHA
 LDX LETTER_HI_BIT
 CPX #132             ;IS THIS B,C,OR D?
 BCC INCDEC_ABORT    
;
 LDX #MSGOUT
 JSR DEC_ZPPT_X ;DEC MSGOUT BY 1
;
 TYA ;FF DEC/01 INC
 LDY #0
 CLC
 ADC (MSGOUT),Y
 CMP #'9'+1
;
 BNE INCDEC_PAGE4
 LDA #'0'
 STA (MSGOUT),Y
 PLA
 LDA #'0'
 PHA
 BNE INCDEC_PAGE1 ;SET TO 00
;
INCDEC_PAGE4:
 CMP #'0'-1
 BNE INCDEC_PAGE6
 PLA
 LDA #'9'
 PHA
;
INCDEC_PAGE6:
 STA (MSGOUT),Y ;SUBTRACT 1
;
INCDEC_PAGE1:
 PLA
 JMP INC_ZPPT_X
;
;
PRINT_STYLE:
;
;A POSSIBLE PRINT STYLE HAS BEEN FOUND
;
 JSR IS_STYLE_CODE
 BCS .ABORT              ;EXIT CS IF NOT REAL CODE
;
.FOUND_CODE:
 TXA
 PHA
 JSR SET_STYLE
 PLA
;
 JSR POINT_AND_PRINT 
.CLC_RTS:
 CLC
.ABORT:
 RTS			;CC = PRINTER CODE WENT OK
;
ALL_STYLES_OFF:
 LDX ATTRIBUTES       	;IF NONE ARE ON,
 BEQ AS_DONE          	;LEAVE OFF
 LDX #1               	;ELSE POINT AT OFF CODES
!byte $2C
ALL_STYLES_ON:
 LDX #0
 STX .ALL_STY_SM1
;
 LDX #7
 STX TEMP0
.LOOP1186:
 LDX TEMP0
 LDA ATTRIBUTES
 AND ATT_ON_TABLE,X
 BEQ .NOT_ON
 TXA
 ASL
 CLC
!byte $69;ADC #
.ALL_STY_SM1:
!byte $00
 JSR POINT_AND_PRINT
.NOT_ON:
 DEC TEMP0
 BPL .LOOP1186
;
AS_DONE:
 RTS
;
;
PRTLMG:
;
 LDX PRINT_GRAPHICS
 BNE AS_DONE                ;GRAPHIC, NO MARGINS!
;
 LDX JUSTIFY_FORMAT
 BEQ .NORMAL_MARGIN
 CPX #3                     ;JUSTIFYING
 BEQ .NORMAL_MARGIN
 JSR SET_PRINTABLE_CHRS     ;PRINTABLE_CHARACTERS W/LEFT EDGE STRIPPED
;
 SEC
 LDA MARGIN
 SBC PRINTABLE_CHARACTERS
 LDX JUSTIFY_FORMAT
 CPX #2               ;RIGHT ALIGN?
 BEQ .SKP1222
 LSR
.SKP1222:
 CLC
 ADC LEFPRT
 TAX
 JMP SENSPS
;
.NORMAL_MARGIN:
 LDX LEFPRT
SENSPS:
 LDA ATTRIBUTES       ;KILL ATTRIBUTES FOR
 PHA                  ;PRINT-PREVIEW
 LDA #0
 STA ATTRIBUTES
;
 CPX #0
 BEQ .EXIT
.LOOP1240:
; LDA #' '
; JSR CHROUT
 JSR SPACE_OUT
 DEX 
 BNE .LOOP1240
.EXIT:
 PLA
 STA ATTRIBUTES
 RTS
;
;--------------------
;
JUSTFY:
 LDY JUSCHR     ;INDEX/DONE FLAG
 CPY #$FF       ;ARE WE DONE?
 BEQ JUSTF1     ;GO DO NEXT LINE
; LDA JBUFF,Y    ;GET CHAR
 LDA (JBUFF),Y  ;GET CHAR
 CMP #ENDT      ;/LAST ???
 BCS JUSTF2     ;GO RESET DONE
 CMP #$F8       ;DOUBLE SPACE?
 BEQ JUSTM1     ;MAKE AND SEND SPACE
 CMP #$F7       ;TRIPLE SPACE?
 BNE JUSTF3     ;NO, SEND REGULAR
 LDA #$F8       ;YES, MAKE DOUBLE
!byte $2C
JUSTM1:
 LDA #$20       ;MAKE SPACE/DOUBLE
; STA JBUFF,Y    ;SET IN BUFFER
 STA (JBUFF),Y    ;SET IN BUFFER
;
 LDA #$20       ;SEND SPACE
 RTS
;
JUSTF3:
;
;LDY JUSCHR
;LDA JBUFF,Y
 INC JUSCHR     ;ADVANCE PTR/SEND REG
 RTS
;
JUSTF2:
 LDX #$FF       ;SET DONE FLAG
 STX JUSCHR
 RTS
;
JUSTF1:
;
;
 JSR SET_PRINTABLE_CHRS
 STX XSAVE      ;POSITION OF LAST $20
 JSR CLRAXY     ;CLEAR ALL (.X, .Y)
 STA JUSCHR     ;RESET START INDEX
;
JUSTF6:
 LDA (TEXT),Y   ;STORE OFF POSITION OF FIRST PRINTABLE CHAR
; STA JBUFF,Y
 STA (JBUFF),Y
 STY MSGOUT     ;MSGOUT = 1ST CHAR
 INY            ;ADVANCE INDEX
 CMP #ENDT      ;/
 BCS NJUST3     ;LINE ALL SPACES
 CMP #$80 
 BCS JUSTF6     ;SKIP ANY EMBEDDED CODE
 CMP #' '       ;SPACE?
 BEQ JUSTF6
;
JUSTF5:
 LDA (TEXT),Y   ;GET TEXT,INDEX
; STA JBUFF,Y    ;MOVE TO BUFFER
 STA (JBUFF),Y    ;MOVE TO BUFFER
 PHA            ;SAVE
 INY            ;LOOK FOR
 CMP #' '       ;SPACE?
 BNE JUSTF4     ;ELSE LEAVE
;
 LDA (TEXT),Y   ;FOLLOWED BY
 CMP #' '       ;<NONSPACE>
 BEQ JUSTF4     ;ELSE LEAVE
 CMP #ENDT      ;DO NOT COUNT END OF LINE
 BCS JUSTF4     ;NEED TO STOPIT SOMEHOW
;
 DEY
 STY MSGOUT+1   ;MSGOUT+1 POINTS AT BIGGEST PADDABLE SPACE
 INY
;
 INX            ;TWO MORE SPACES COULD BE ADDED HERE
 INX            ;X=X+2 (#CHARS AVAIL)
;
JUSTF4:
 PLA            ;GET OLD CHAR
 CMP #ENDT      ;LAST ONE?
 BCC JUSTF5     ;IF NOT, GO BACK
;
 LDA END_LINE_TYPE
 CMP #RETURN
 BEQ NJUST3
;
 LDY PRINTABLE_CHARACTERS   ;DEY .Y = ACTUAL LENGTH
 STX JUSWOR     ;X = POSSIBLE FILLINS
 CPY PLNLEN     ;IF Y > CURRENT MARGIN
 BCS NJUST3     ;WE ARE DONE
; STY JUSLEN     ;JUSLEN = ACTUAL LEN
 SEC
 LDA PLNLEN                 ;CURRENT_MARGIN
 SBC PRINTABLE_CHARACTERS   ;MINUS ACTUAL SHOWS NUMBER TO PAD
 BCC NJUST3                 ;LINE TOO LONG!
;
 TAX                        ;X=NUMBER SPACES TO END
 CMP JUSWOR                 ;FILL IN'S > POSSIBLE?
 BCS NJUST3                 ;IF SO, GIVE UP
;
JUSLOP:
; LDY JUSLEN ;Y=ACTUAL LENGTH
 LDY MSGOUT+1               ;RIGHTMOST PADDABLE SPACE.
 INY                        ;LOOP THRU LINE
;
NJUST:
 DEY                        ;MOVE INDEX DOWN
 CPY MSGOUT                 ;AT FIRST SPACE<NS>
 BEQ JUSLOP                 ;YES, MAKE ANOTHER PASS
NJUST1:
; LDA JBUFF,Y                ;GET CHAR
 LDA (JBUFF),Y                ;GET CHAR
 CMP #$F8                   ;IS IT DOUBLE?
 BEQ NJUST2                 ;GO MAKE IT TRIPLE
 CMP #' '                   ;IS IT A SPACE?
;
 BNE NJUST                  ;NO, TRY AGAIN
 LDA #$F8                   ;YES MAKE IT DOUBLE
!byte $2C
NJUST2:
 LDA #$F7                   ;DOUBLE/TRIPLE
; STA JBUFF,Y                ;STORE IN BUFFER
 STA (JBUFF),Y                ;STORE IN BUFFER
;
 DEX                        ;NUMBER TO DO -1
 BEQ NJUST3                 ;IF DONE, LEAVE
JUSTF7:
 DEY                        ;MOVE INDEX DOWN
 CPY MSGOUT                 ;AT FIRST SPACE
 BEQ JUSLOP                 ;YES, BEGIN ANOTHER PASS
;
; LDA JBUFF,Y                ;LOOK BACK
 LDA (JBUFF),Y                ;LOOK BACK
 CMP #' '
 BEQ JUSTF7                 ;NO, TRY AGN
 BNE NJUST1                 ;YES, RESTART
;
NJUST3:
;
!if  REMOVE_TEXT { 
 LDX XSAVE
.NEXT_CHAR1394:
 INX
 LDA JBUFF,X                ;IF A SPACE IS FOUND
 CMP #' '                   ;OR A RETURN,
 BEQ .END_LINE              ;MAKE IT EOL, ELSE
 CMP #ENDT                  ;KEEP
 BCC .NEXT_CHAR1394             ;LOOKING
;
.END_LINE:
 LDA END_LINE_TYPE
 STA JBUFF,X
 JSR TEXT_TO_NEXTLINE       ;DONE. MOVE TEXT FWD
 JMP JUSTFY                 ;GO CALL OURSELF
} 
;
 LDY XSAVE
.NEXT_CHAR1394:
 INY
; LDA JBUFF,Y                ;IF A SPACE IS FOUND
 LDA (JBUFF),Y                ;IF A SPACE IS FOUND
 CMP #' '                   ;OR A RETURN,
 BEQ .END_LINE              ;MAKE IT EOL, ELSE
 CMP #ENDT                  ;KEEP
 BCC .NEXT_CHAR1394             ;LOOKING
;
.END_LINE:
 LDA END_LINE_TYPE
; STA JBUFF,Y
 STA (JBUFF),Y
 JSR TEXT_TO_NEXTLINE       ;DONE. MOVE TEXT FWD
 JMP JUSTFY                 ;GO CALL OURSELF
;
;
;
;
SET_PRINTABLE_CHRS:
;
 JSR TEXT_TO_EDIT_BUFFER
;
 LDX CHARS_IN_LINE
.LOOP1434:
 DEX                  ;POINT AT "LAST" CHAR
 CPX #$FF
 BEQ .ABORT1437
 LDA EDIT_LINE,X
 BMI .LOOP1434
;
 CMP #' '
 BNE .ABORT1437
 DEC PRINTABLE_CHARACTERS
 JMP .LOOP1434
.ABORT1437:
 RTS
;
;
NEW_LINES_PAGE:
;
 JSR GET_PAGE_LENGTH
 PHA
;
 LDX #PW_TOP_MARGIN
 JSR GET_PRINT_WINDOW_NUMBER
 STA RPSLEN
;
 LDX #PW_BOT_MARGIN
 JSR GET_PRINT_WINDOW_NUMBER
 CLC
 ADC RPSLEN
 STA SESLEN                 ;ADD TOGETHER TOP&BOTTOM MARGINS
;
 SEC  
 PLA                        ;PAGE LENGTH OFF DROP-DOWN
 SBC SESLEN
 BEQ .BAD_HEIGHT
 BCS SETLI2
;
.BAD_HEIGHT:
 LDA #4                     ;FORCE TO THREE
;
SETLI2:
 STA PRTLIN                 ;TOTAL # LINES TO PRINT .X
 STA PM_LINES_PER_PAGE      ;SET TEXT AREA LINES.
 RTS
;
;
!eof
;
; PUBLIC FEATUR
; PUBLIC LAST_FIELD
; PUBLIC MGP1PAX
; PUBLIC NEW_LINES_PAGE
; PUBLIC PRTLMG
; PUBLIC PRTPRM
; PUBLIC PTCRLF
; PUBLIC PXCRLF
; PUBLIC PW_SECONDARY_ADDR
; PUBLIC PW_PRINT_FONTS
; PUBLIC PW_NUMBER_PAGES
; PUBLIC PW_EJECT_PAGE
; PUBLIC PW_SHEET_FEED
; PUBLIC PW_CHAIN_PAGE
; PUBLIC PW_MERGE_NAMES
; PUBLIC PW_NORMAL_ASCII
; PUBLIC PW_1526_802
; PUBLIC PW_LINEFEEDS
; PUBLIC PW_TOP_MARGIN
; PUBLIC PW_BOT_MARGIN
; PUBLIC PW_PAGE_LENGTH
; PUBLIC PW_NUMBER_COPIES
; PUBLIC PW_START_PAGE
; PUBLIC SAVE_SPACING
; PUBLIC SENSPS
; PUBLIC TPRINT_FILE
; EXTERN INITILIZE40
; EXTERN INITILIZE80
; EXTERN PG_LENGTH
; EXTERN ADDYTX
; EXTERN ASCTYP
; EXTERN ATT_ON_TABLE
; EXTERN AX_INTO_MARGIN
; EXTERN AX_INTO_MSGOUT
; EXTERN AX_INTO_TEXT
; EXTERN BLANK_THE_SCREEN
; EXTERN CHANOF
; EXTERN CHANNEL_IN_READWD
; EXTERN CHKNUM
; EXTERN CHNL2I
; EXTERN CHROUT
; EXTERN CLALL
; EXTERN CLOSE2
; EXTERN CLRAXY
; EXTERN CLRCHN
; EXTERN CLR_CHNL2I
; EXTERN CMACST
; EXTERN CRLF
; EXTERN COPYFIELD
; EXTERN DEC_ZPPT_X
; EXTERN DECTE1
; EXTERN DOCHKM
; EXTERN EDIT_LINE
; EXTERN EDIT_LINE_P1
; EXTERN EMBEDDED_CODES
; EXTERN END_LINE_TYPE
; EXTERN EOT_INTO_AX
; EXTERN EOT_OR_ENDREC
; EXTERN FC_BEGINNING_OF_LINE
; EXTERN FC_CLEAR_HOME
; EXTERN FC_CLEAR_HOME_NT
; EXTERN FIND_TAB_GT_ACT_COL
; EXTERN FIRST_PAGE
; EXTERN GETIN1
; EXTERN GET_PAGE_LENGTH
; EXTERN GET_PRINT_PARAMETERS
; EXTERN GET_PRINT_WINDOW_NUMBER
; EXTERN HEADER
; EXTERN HEADER_FOOTER_TEXT
; EXTERN HEADFOOT_INTO_TEXT
; EXTERN HEXIN
; EXTERN HF_LEFT_MARGIN
; EXTERN HF_LINE_LENGTH
; EXTERN INCTE1
; EXTERN INC_AX_BY_1
; EXTERN INC_ZPPT_X
; EXTERN IN_GRAPHICS_PRINT
; EXTERN IS_JUSTIFY_ON
; EXTERN IS_STYLE_CODE
; EXTERN JUSTIFY_FORMAT
; EXTERN KILL_HEAD_AND_FOOT
; EXTERN LDA_TEXT_Y
; EXTERN LINFED
; EXTERN LEFPRT
; EXTERN LETTER_HI_BIT
; EXTERN MERGE_NAMES
; EXTERN MUL_AX_PT
; EXTERN MOVE_UP_Y
; EXTERN NEW_LINE_SPACE
; EXTERN NUMBER_OF_COPIES
; EXTERN NUMPGS
; EXTERN PAGE_FORCED
; EXTERN PAGE_LENGTH
; EXTERN PAGEADD
; EXTERN PCHEADERF
; EXTERN PCSTART
; EXTERN PEELNU
; EXTERN PLNLEN
; EXTERN POINT_AND_PRINT
; EXTERN POP_P2
; EXTERN PRESS_ANY_KEY_CHROUT
; EXTERN PRINTER_CHKOUT
; EXTERN PRMENU
; EXTERN PROCESS_MARGINS_1
; EXTERN PROMPT_AND_NUMBER
; EXTERN PRTDRP
; EXTERN PSTTAB
; EXTERN PULLDN
; EXTERN PUSH_P2
; EXTERN PUSH_TEXT
; EXTERN POP_TEXT
; EXTERN PRINT_GRAPHICS
; EXTERN PRTLST
; EXTERN PT_INTO_AX
; EXTERN PW_S_EJECT_PAGE
; EXTERN READWD
; EXTERN READ_HF_MARGINS
; EXTERN REFORMAT_DOC
; EXTERN REFREASH_ALL_SCREEN
; EXTERN REMOVE_A_BYTES
; EXTERN RESET
; EXTERN RETOUT
; EXTERN RETNATOTE
; EXTERN SEARCH_STRING_LENGTH
; EXTERN SERPPT
; EXTERN SETNAM
; EXTERN SETUP_RW_NO_CASE_MOD
; EXTERN SET_BIG_AND_CURR_A
; EXTERN SET_FAKE_FOOTER
; EXTERN SET_STYLE
; EXTERN SET_STYLE_ON
; EXTERN SPACE_OUT
; EXTERN START_LINE_ATTRIBUTES
; EXTERN STORE_BEGIN_LINE
; EXTERN STPAGE
; EXTERN TEST_SET_NLS
; EXTERN TETORETNA
; EXTERN TEXCFE
; EXTERN TEXCF0
; EXTERN TEXT_INTO_AX
; EXTERN TEXT_TO_EDIT_BUFFER
; EXTERN TEXT_TO_NEXTLINE
; EXTERN TEXT_TO_PREV_LINE
; EXTERN TOASCI
; EXTERN VIC_SCREEN_ON
; EXTERN WAIT_FOR_KEY
; EXTERN WAIT_FOR_KEY_AND_HEADER
