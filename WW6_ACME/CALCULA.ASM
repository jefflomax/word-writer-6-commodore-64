;
!zone CALCULA
!zone CALCULA;CALCULATE 
;
;
;
; EXTERN SAVZROPG ;ZP STORAGE         ENDMOD
;
;
CSDSPL =  1077+80
OPRATN =  1090+80+40
EVLSTR =  $200
;
;
!if  CALCULATOR_PRESENT { 
SUBFLG: 
!byte 0
DECFLG:
!byte 0
} 
;
NUMFLG:
!byte 0
;
EVLPTR
!byte 0
;PTRHLD
; DB 0
;
SETZRP ;MAKE FAKE ZERO PAGE
; LDX #2
 LDX #$0
.LOOP:
; LDA $0,X
 LDA $71,X
; STA SAVZROPG,X ;$DF00,X
 STA PATTERN_BYTES,X ;$DF00,X
 INX
 CPX #$1F			;$71+#$1E
 BNE .LOOP
 RTS
;
!if  CALCULATOR_PRESENT { 
SWPZRP LDX #2
 LDY $0,X
 LDA SAVZROPG,X ;$DF00,X
 STA $0,X
 TYA
 STA SAVZROPG,X ;$DF00,X
 INX
 BNE SWPZRP+2
 RTS
;
;.IF CALCULATOR_PRESENT
FC_CALCULATOR:
 LDA BLKSET
 BEQ DRPDWN
 RTS
;
DRPDWN:                  ;MSGOUT=BLOCK
; X= # LINES             ;A=OFFSET
 JSR SETZRP
;
 LDA #<CDSPLY
 STA MSGOUT
; STA CALFLG
 LDA #>CDSPLY
 STA MSGOUT+1
 LDA #11 ;TAKE OFFSET OUT
 JSR PULLDN
 JSR SWPZRP ;CHANGE ZPS
 LDA #$80
 STA KEYABT ;DISALLOW RUN/STOP
;
 LDA #<CERROR
 STA $300
 LDA #>CERROR
 STA $301
;
 LDX #$FF
 TXS
;
CEAGAN:
 JSR CHRGET
 JSR CLRDSP
 LDA #0
 STA EVLPTR
 STA PTRHLD
 JSR GETNUM
SECNUM:
 LDA EVLPTR
 STA PTRHLD
 JSR GETNUM
 JSR TOKENS
 LDA OPRATN
 STA OPRATN
 CMP #'='
 BNE SECNUM
PRESFF:
;
 JSR WAIT_FOR_KEY
 JSR CHKOPR ;IS IT OPERATOR?
 BCS PRESFS ;NO, CHECK F5F7
 DEC EVLPTR
 JSR GEXPH
 JMP SECNUM
;
PRESFS:
 CMP #'C' ;SPACE=NUMBER
 BEQ CEAGAN
;
PRESFK:
 CMP #3         ;RUN/STOP F5
 BEQ PRESF1
 CMP #'T'       ;T TRANSFER
 BNE PRESFF     ;PUT IN TXT
;
 JSR SWPZRP
 JSR ON_AND_REFREASH
;
PRESPT:
 LDX #0
 STX PTRHLD
 DEC EVLPTR
PRESF2:
 LDA EVLSTR,X
 JSR FC_WORK_KEY
 INC PTRHLD
 LDX PTRHLD
 CPX EVLPTR
 BCC PRESF2
 BCS PRESF3
;
PRESF1:
 JSR SWPZRP
PRESF3:
;
 JSR FULL_SCREEN
 LDA #0
 STA KEYABT
 STA 198           ;KILL KEYBRD BUFFER
; STA CALFLG
 JMP MNLOOP
;
GETNUM:
 LDX MSLEN
 LDA CSDSPL,X
 JSR CHKNUM
 BCC NOKILL
 LDA #32
 STA CSDSPL,X
NOKILL:
 LDA #0
 STA SUBFLG ;NO SUBTRACT
 STA DECFLG ;NO DECIMAL
 STA NUMFLG ;LENGTH
 STA MSLEN ;MESSAGE PTR
 LDA CSDSPL
 ORA #$80
 STA CSDSPL
 BNE CALCIN ;SKIP CURSOR
;
CINPUT:
 LDA #$A0
 LDY MSLEN
 STA CSDSPL,Y ;CURSOR
;
CALCIN:
;
 JSR WAIT_FOR_KEY
 CMP #3
 BEQ PRESF1     ;EXIT
GETNU3:
 CMP #20        ;DELETE?
 BNE CKLENG     ;DO LENGTH CHECK
 LDY MSLEN      ;LENGTH?
 BEQ CALCIN     ;NO
 LDA CSDSPL,Y
 TAX
 LDA #32
 STA CSDSPL,Y
 DEC MSLEN
 DEC EVLPTR
 CPX #'.'
 BNE GETDE1
 DEC DECFLG
GETDE1:
 CPX #'-'
 BNE CINPUT
 DEC SUBFLG
 BPL CINPUT
;
CKLENG:
 LDX MSLEN
 CPX #0
 BNE NCLEAR
 PHA
 JSR CLRDSP
 PLA
NCLEAR CMP #'-'
 BNE GETNU2     ;NOT -
 LDA SUBFLG     ;HIT BEFORE
 ORA DECFLG
 ORA MSLEN
 BNE GETNU1     ;EXIT
 INC SUBFLG     ;SET FLAG
 LDA #'-'       ;TOKEN F/SUB
 JMP GETNU5     ;INSERT IN STRIN
;
GETNU1:
 LDA #'-'
GETNUO:
 JMP GECLER
;
GETNU2:
 CMP #'.'
 BNE GETPLM ;NOT .
 LDX DECFLG
 BNE CALCIN
 INC DECFLG
 BNE GETNU5 ;STRING
;
GETPLM:
 CMP #':'
 BNE GECLER
 LDY MSLEN
 BEQ GETPL1
 LDA CSDSPL
 JSR CHKNUM
 BCS GETPL1
 LDX EVLPTR
GETPL2 LDA CSDSPL,Y
 INY
 STA CSDSPL,Y
 INX
 STA EVLSTR,X
 DEX
 DEX
 DEY
 DEY
 BPL GETPL2
 INC MSLEN
 INC EVLPTR
GETPL3 LDA #'-'
 BNE GETPL4
GETPL1 LDA CSDSPL
 CMP #'-'
 BNE GETPL3
 LDA #'+'
GETPL4 STA CSDSPL
 PHA
 SEC
 LDA EVLPTR
 SBC MSLEN
 TAX
 PLA
 STA EVLSTR,X
 JMP CALCIN
;
GECLER CMP #'E'
 BNE GECLEC
 JSR CLRDSP
 LDX #0
 STX MSLEN
 LDX PTRHLD
 STX EVLPTR
 JMP GETNUM
;
GECLEC CMP #'C'
 BNE GETNU4
 JMP CEAGAN
;
GETNU4 LDX MSLEN
 CPX #11
 BCS GETOPR
 CMP #'0' ;<1
 BCC GETOPR ;ERROR ROUT
 CMP #':'
 BCS GETOPR
GETNU5 LDX EVLPTR
 STA EVLSTR,X ;PUT IN
 LDY MSLEN
 STA CSDSPL,Y ;ON SCREEN
 INC MSLEN
 INC EVLPTR
 BNE GETOUT
;
GETOPR JSR CHKOPR ;IS OPERATOR
 BCC GEXPH
GETOUT JMP CINPUT
GEXPH CMP #'^'
 BNE GMOVWD
 LDX #30 ;SC ^
 STX OPRATN
 BNE GMOVWD+3
GMOVWD STA OPRATN
 LDX EVLPTR ;.A = TOKEN
 STA EVLSTR,X
 INC EVLPTR
 RTS
;
TOKENS LDA #0
 LDX EVLPTR
 DEX
 STA EVLSTR,X
 JSR CRUNCH ;TOKENIZE EVAL
;
 LDA #<EVLSTR
 LDY #>EVLSTR
 JSR FOUT
 JSR CLRDSP
 LDY #0
NUMBOU LDA $100,Y
 STA EVLSTR,Y
 BEQ NUMBEN
 STA CSDSPL-1,Y
 INY
 BNE NUMBOU
NUMBEN LDA OPRATN
 CMP #30
 BNE NUMBO1
 ORA #$80 ;ASCII ^
NUMBO1 STA EVLSTR,Y
 INY
 STY EVLPTR
 RTS
;
} 
;
SWAPXY:
!if  REMOVE_TEXT { 
 PHA ;ST=AC
 TYA ;AC=Y
 PHA ;ST1=Y
 TXA ;AC=X
 TAY ;Y=X
 PLA ;A=Y
 TAX ;X=Y
 PLA ;A=A
} 
 STX .SM1
 STY .SM2
!byte $A2;LDX #
.SM2:
!byte $00
!byte $A0;LDY #
.SM1:
!byte $00
 RTS
;
!if  CALCULATOR_PRESENT { 
CDSPLY
!byte 17
!byte 112,$FF,64,14,110
!byte 93,$FF,32,14,93
!byte 107,$FF,64,14,115
!byte 93,160,195,160,32,160,197,160,32
!byte 160,158,160,32,160,175,160,93
!byte 93,$FF,32,14,93
!byte 93,160,183,160,32,160,184,160,32
!byte 160,185,160,32,160,170,160,93
!byte 93,$FF,32,14,93
!byte 93,160,180,160,32,160,181,160,32
!byte 160,182,160,32,160,173,160,93
!byte 93,$FF,32,14,93
!byte 93,160,177,160,32,160,178,160,32
!byte 160,179,160,32,160,171,160,93
!byte 93,$FF,32,14,93
!byte 93,160,176,160,32,160,174,160,32
!byte 171,186,173,32,160,189,160,93
!byte 109,$FF,64,14,125,0
;
CERRVT LDX #4
CERRV1 LDA ERRMSG,X
 STA CSDSPL,X
 DEX
 BPL CERRV1
;CERRV2:
 JSR KEYBRD
 JMP CEAGAN
ERRMSG 
!text "ERROR"
;
CHRGET:
 LDX #0
 LDA CHRGDT,X
 STA 115,X
 INX
 CPX #26
 BCC CHRGET+2
 RTS
;
;# CAN THIS BE PART OF INIT STUFF
CHRGDT:
 INC $7A
 BNE CHRGD1
 INC $7B
CHRGD1 LDA $0200
 CMP #$3A
 BCS CHRGD2
 CMP #$20
 BEQ CHRGDT
 SEC
 SBC #$30
 SEC
 SBC #$D0
CHRGD2 RTS
;
CLRDSP LDX #14
 LDA #32
 STA CSDSPL-1,X
 DEX
 BPL CLRDSP+2
 RTS
;
VSYMBOLS:
!text "+=-*/^"
CHKOPR:
 LDX #5
CHKOPR1:
 CMP VSYMBOLS,X
 BEQ CHKOPR2
 DEX
 BPL CHKOPR1
 SEC
 RTS
;
CHKOPR2:
 CLC
 RTS
;
} 
;
!if  REMOVE_TEXT { 
PULLDN
;
 JSR VID_A_TO_SCRMO
 JSR GETWOR		;.WORD FOLLOWING CALL IS TABLE (MSGOUT)
 JSR AX_INTO_MSGOUT 
;
 LDY #0
 LDA (MSGOUT),Y
; STA PTRHLD ;LENGTH
 STA P4			;LENGTH
 JSR INC_MSGOUT_1
;
DRPDW0:
 LDX #0
DRPDW1:
; CPX PTRHLD ;LENGTH
 CPX P4			;LENGTH
 BCS DRPDW2
;
 LDA (MSGOUT),Y
 CMP #$FF
 BNE DRPRPT
 INY			;REPEAT CODE
 LDA (MSGOUT),Y
 PHA
 INY
 LDA (MSGOUT),Y
 STY EVLPTR
 TAY
 PLA
DRRPLP:
 JSR PLACE_SUBRT
 DEY
 BNE DRRPLP
 LDY EVLPTR
;
DRPRPT:
 CMP #27		;IS THIS > 27?
 BCS .SINGLE_CHAR
;CHARACTER FOLLOWED BY SPACE
 ORA #$40		;MAKE "ASCII"
 JSR PLACE_SUBRT 	;PLACE IT ON THE SCREEN
 LDA #' ' 		;AND THEN DO A SPACE TOO
;
.SINGLE_CHAR:
 JSR PLACE_SUBRT
 INY
 BNE DRPDW1		;BRK
;
DRPDW2:
 TYA
; SEC ;PLUS ONE
 CLC
 ADC MSGOUT
 STA MSGOUT
 BCC DRPDW3
 INC MSGOUT+1
DRPDW3:
 JSR AD28SM
 LDY #0
 LDA (MSGOUT),Y
 BNE DRPDW0
 RTS
} 
;
;
PULLDN:
;
 JSR VID_A_TO_SCRMO
 JSR GETWOR		;.WORD FOLLOWING CALL IS TABLE (MSGOUT)
 JSR AX_INTO_MSGOUT 
;
; LDA SCRMO
; PHA
;
 LDY #0
 STY COUNT_DOWN		;FLAGS FIRST LINE SO WE CAN FIX TL, TR LINE ENDS
 LDA (MSGOUT),Y
;
 STA P4			;LENGTH
 JSR INC_MSGOUT_1
;
.DOWN_LOOP:
 LDX #0
 JSR PLACE_93
;
.ACROSS_LOOP:
;
 CPX P4			;LENGTH
 BCS .DONE_W_LINE
;
 LDA (MSGOUT),Y
 CMP #$FF
 BNE .NORMAL
 INY			;REPEAT CODE
 LDA (MSGOUT),Y
 PHA
 INY
 LDA (MSGOUT),Y
 STY EVLPTR
 TAY
 PLA
.REPEAT:
 JSR PLACE_SUBRT
 DEY
 BNE .REPEAT
 LDY EVLPTR
;
.NORMAL:
 CMP #$29		;IS IT )
 BEQ .ADD_SPACE		;IF SO, ADD A SPACE
 CMP #27		;IS THIS > 27?
 BCS .SINGLE_CHAR0550
;CHARACTER FOLLOWED BY SPACE
 ORA #$40		;MAKE "ASCII"
.ADD_SPACE:
 JSR PLACE_SUBRT 	;PLACE IT ON THE SCREEN
 LDA #' ' 		;AND THEN DO A SPACE TOO
;
.SINGLE_CHAR0550:
 JSR PLACE_SUBRT
 INY
 BNE .ACROSS_LOOP
;
.DONE_W_LINE:
 LDA COUNT_DOWN		;FIRST LINE?
 BNE .NOT_FIRST_LINE
;
 INC COUNT_DOWN		;FLAG 1ST LINE DONE
 LDA #110
 JSR PLACE_SUBRT
 LDX #0
 LDA #112
 JSR PLACE_SUBRT
 JMP .JOIN_FROM_FIRST	;RE-ENTER FLOW
;
.NOT_FIRST_LINE:
 JSR PLACE_93
;
.JOIN_FROM_FIRST:
 TYA
;
 CLC
 ADC MSGOUT
 STA MSGOUT
 BCC .SKP
 INC MSGOUT+1
.SKP:
 LDY #0
 LDA (MSGOUT),Y
 BEQ .LAST_LINE
 JSR AD28SM
 JMP .DOWN_LOOP
;
.LAST_LINE:
 DEX
 LDA #125
 JSR PLACE_SUBRT
 LDX #0 
 LDA #109
 JMP PLACE_SUBRT 
; LDA #$04
; STA SCRMO+1
; JSR RESET
; PLA
; STA SCRMO
; LDX #0
; LDA #112
; JSR PLACE_SUBRT
; LDX P4
;; INX
; LDA #110
; JMP PLACE_SUBRT
;
;
POPSCR:
 PHA ;SAVE.A
 STA (SCRMO),Y
 CLC
 LDA SCRMO+1
 PHA
 ADC #212
 STA SCRMO+1
 LDA STCOLR
 JSR CLRBYT ;SET SCRNMO,Y TO .A
 PLA
 STA SCRMO+1
 PLA ;RESTORE .A
 RTS
;
PLACE_93:
 LDA #93
PLACE_SUBRT:
 JSR SWAPXY
 JSR POPSCR     ;SCREEN&COLOR
 INY            ;WILL BECOME INX WHEN SWAPPED
 JMP SWAPXY
;
;
!eof
;
; PUBLIC SETZRP
; PUBLIC SWAPXY
; EXTERN DEC_SCREEN_28
