;
!zone IMG
;
; READ GEM .IMG FORMAT FILE
;
;CAVEATS:
;       FILE LOAD ADDRESS
;
;MAY DESTROY
;       POINTER, POINTER2
;
;
!SOURCE "WWSETUP.ASM"
!SOURCE "VARIABLS.ASM"
;
; Duplicate PUBLIC READ_IMG_RASTER
;
;
GRAPHIC_RASTER_FILE =  7
;
;
HEADER_TABLE:   ;{
HEADER_LENGTH:  ;}
!byte 0
IDENTICAL_SCAN_LINES:
!byte 0
;
NUMBER_OF_PLANES:
!word 0
PATTERN_LENGTH:
!word 0
BYTES_PER_LINE:
PIXEL_WIDTH:    ;NOT NEEDED
!word 0
;
SCAN_BYTES:     ;{
PIXEL_HEIGHT:   ;NOT NEEDED
!word 0
;
PIXELS_PR_LINE:
!word 0
SCAN_LINES:
!word 0
;
;PATTERN_BYTES:
; DW $FFFF,$FFFF,$FFFF,$FFFF
;*NOTE* MOVE THIS TO BPCODES BUFFER
;
;
OPEN_IMG_FILE:
;FILES AS USED:
; 2 FOR GRAPHIC TEXT FILE
; 3 FOR GRAPHIC FONT FILE
; 4 FOR PRINTER OUTPUT
; 7 FOR GRAPHIC RASTER DATA
;
;MOVE NAME FROM TEXT TO BUFFER SOMEWHERE,
;SET LENGTH AND OPEN
;
;
 LDA #USE_FONT_DISK
 JSR COPY_FILENAME
 BCS BAD_HEADER
;
 LDA #GRAPHIC_RASTER_FILE
 JSR OPEN_FILE_A         ;OPEN X,DEV1,X,"FONTNAME"
;
 LDX #GRAPHIC_RASTER_FILE
 JSR CHKIN
;
 LDX $90
 BNE BAD_HEADER
;
 JSR READ_AX_WORD       ;GET VERSION.. MUST BE $0001 OR QUIT
 CMP #1
 BNE BAD_HEADER 
 CPX #0
 BNE BAD_HEADER 
;
 LDY #0
 STY IDENTICAL_SCAN_LINES       
;
.HEADER_LOOP:
 JSR READ_AX_WORD
 STA HEADER_TABLE,Y
 TXA
 INY
 STA HEADER_TABLE,Y
 INY
 CPY #14
 BCC .HEADER_LOOP
;
 LDX PIXELS_PR_LINE+1  ;HB
 CLC
 LDA PIXELS_PR_LINE    ;LB
 ADC #7                ;+7
 BCC .SKP
 INX
.SKP:
 JSR LSR_AX_3          ;(PIXELS_PR_LINE +7)/8
 STA BYTES_PER_LINE    ;STORE LB ONLY (PERSISTENT)
;
 SEC
 LDA HEADER_LENGTH
 SBC #8 
 TAY
 BEQ .NO_EXTRA_HEADER
;
.STRIP_HEADER: 
 JSR READ_AX_WORD
 DEY
 BNE .STRIP_HEADER
;
.NO_EXTRA_HEADER:
 JMP CLRCHN
;
BAD_HEADER:
 LDA #GRAPHIC_RASTER_FILE
 JSR CLOSE
 LDX #$FF
 STX GRAPHIC_X_OFFSET           ;IS THERE A GRAPHIC?
 INX                            ;[0]
 STX SCAN_LINES
 STX SCAN_LINES+1               ;NO SCAN LINES
 SEC
 RTS
;
;
ALREADY_IMAGED:
 DEC IDENTICAL_SCAN_LINES
 JMP FINISH_LINE
;
;
READ_IMG_RASTER:
;
 LDA IDENTICAL_SCAN_LINES       ;REPEAT # (PERSISTENT)
 BNE ALREADY_IMAGED
;
 LDX #GRAPHIC_RASTER_FILE
 JSR CHKIN              ;GET INPUT CHANNEL IF WE NEED TO READ A LINE
;
 LDA #0
 STA SCAN_BYTES
 STA POINTER2           ;INDEX
;
.LINE_LOOP:             ;THIS IS WHERE THE LINE LOOPS TILL FULL
;
 JSR CHRIN              ;READ BYTE IN .A
 LDX SCAN_BYTES
 BNE .IMAGE_LINE        ;TEST FOR HEADER ONLY START OF EACH LINE
;
 CMP #$00               ;IS 1ST BYTE OF LINE 0?
 BNE .IMAGE_LINE        ;NO GO EXPAND LINE
;
 JSR CHRIN              ;GET 2ND BYTE, PATTERN LENGTH OR 0
 CMP #$00               ;IF 0, THEN WE HAVE A REPLICATED LINE COUNT
 BNE .PATTERN_W_LEN     ;OTHERWISE REAL PATTERN LENGTH
;
 JSR READ_AX_WORD       ;LB IS HOW MANY
 STA IDENTICAL_SCAN_LINES
 DEC IDENTICAL_SCAN_LINES
 JSR CHRIN              ;GET FIRST REAL BYTE OF LINE
;
.IMAGE_LINE:
 CMP #$80               ;BIT_STRING?
 BNE .OTHER
;
 JSR CHRIN              ;GET LENGTH OF BITSTRING
 TAX
;
.LOOP:
 JSR CHRIN 
 JSR SET_BYTE           ;SET EACH BYTE OF BIT_STRING
 DEX
 BNE .LOOP 
 BEQ .LOOP_LINE_OR_END
;
;
.OTHER:
 CMP #$00               ;PATTERN?
 BEQ .PATTERN
;
 BIT BIT_ON             ;AND NON-DEST WITH $80
 BEQ .ALL_ZERO
;
 AND #$7F               ;KILL HI BIT OF # OF ff BYTES
 LDX #$FF               ;FILL WITH $FF
!byte $2C
;
.ALL_ZERO:
 LDX #$00               ;FILL WITH $00
 JSR SET_RPT            ;SET .A .X'S IN BUFFER AT INDEX
 JMP .LOOP_LINE_OR_END
;
.PATTERN:
 JSR CHRIN              ;GET PATTERN LENGTH (# OF PDL'S)
;
.PATTERN_W_LEN:
 STA POINTER            ;SAVE LENGTH
;
 LDX #0
.SET_PATTERN:
 JSR CHRIN
 STA PATTERN_BYTES,X
 INX
 CPX PATTERN_LENGTH
 BCC .SET_PATTERN       ;FILL THE PATTERN ARRAY WITH DATA
;
.EACH_PATTERN:
 LDX #0
.USE_PATTERN:
 LDA PATTERN_BYTES,X
 JSR SET_BYTE
 INX
 CPX PATTERN_LENGTH
 BCC .USE_PATTERN
 DEC POINTER            ;SET PATTERN DATA LENGTH TIMES
 BNE .EACH_PATTERN
;
.LOOP_LINE_OR_END:
 LDA SCAN_BYTES
 CMP BYTES_PER_LINE
 BCC .LINE_LOOP
;
 JSR CLRCHN             ;CLOSE CHANNEL
;
FINISH_LINE:
;
 LDA SCAN_LINES
 BNE .SKPD
 DEC SCAN_LINES+1
.SKPD:
 DEC SCAN_LINES
;
.SKP1:
;
 LDA PIXELS_PR_LINE
 STA PATTERN_BYTES+4
 LDA PIXELS_PR_LINE+1
 STA PATTERN_BYTES+5    ;RETURN LENGTH FOR PRINTING
;
 LDA SCAN_LINES
 ORA SCAN_LINES+1
 BNE .GOOD_EXIT
 JMP BAD_HEADER
;
.GOOD_EXIT:
 CLC
 RTS
;
READ_AX_WORD: 
;
 JSR CHRIN              ;READ HB IN .A
 TAX
 JMP CHRIN              ;READ LB IN .A
;
;
SET_RPT:
;SET .A .X'S IN BUFFER AT INDEX
 STA POINTER+1
 TXA
 LDX POINTER+1
SET_X_OF_A:
 JSR SET_BYTE
 DEX
 BNE SET_X_OF_A
 RTS
;
SET_BYTE: 
; LEAVE .X .A UNHARMED
 LDY POINTER2   ;INDEX
 CPY #120       ;INSURE NO BYTE OUT OF BUFFER
; BCC ?OK
; LDY #119
 BCS BAD_FNAME	;DONT REPEAT BAD BYTE
.OK:
 STA GRAPHIC_RASTER_BUFFER,Y
 INC POINTER2   ;INDEX
 INC SCAN_BYTES
BAD_FNAME:
 SEC 
 RTS
;
COPY_FILENAME:
;.A USE_FONT_DISK OR USE_WORK_DISK
;
 STA REGLOAD
;
 JSR IW_INTO_AX         ;CAN NOT HARDCODE TO $CF08
!word GRAPHIC_FILENAME
 JSR AX_INTO_PT
;
 LDA ASCTYP
 PHA                    ;SAVE ASCTYP
 LDY #0
 STY ASCTYP
.NAMELOOP:
 LDA (POINTER),Y        ;READ UNTIL $FF
 BMI .COPY_NAM
 JSR TOASCI
 STA FILENAME_LOC,Y
 INY
 BNE .NAMELOOP          ;COPY AND CONVERT TO PETASCII
;
.COPY_NAM:
 PLA
 STA ASCTYP             ;RESTORE ASCTYP
.ENDLOOP:
 DEY
;
 BEQ BAD_FNAME
;
 LDA (POINTER),Y        ;COULD BE FILENAME_LOC
 CMP #' '
 BEQ .ENDLOOP           ;BACKUP OVER ANY TRAILING SPACES
;
 INY                    ;COUNT 1..N
 TYA                    ;FILENAME LENGTH
;
 LDX #<FILENAME_LOC
 LDY #>FILENAME_LOC
;
 CLC
 JMP SETNAM             ;RETURN CC (WILL NOT HARM CARRY)
;
;
;
!eof
;
; PUBLIC BAD_HEADER
; PUBLIC BYTES_PER_LINE
; PUBLIC COPY_FILENAME
; PUBLIC OPEN_IMG_FILE
; PUBLIC PIXELS_PR_LINE
; PUBLIC READ_IMG_RASTER
; PUBLIC SCAN_LINES
; EXTERN ASCTYP
; EXTERN AX_INTO_PT
; EXTERN BIT_ON
; EXTERN BPCODES
; EXTERN CHKIN
; EXTERN CHRIN
; EXTERN CLRCHN
; EXTERN CLOSE
; EXTERN GRAPHIC_EFFECT
; EXTERN GRAPHIC_FILENAME
; EXTERN GRAPHIC_RASTER_BUFFER
; EXTERN GRAPHIC_X_OFFSET
; EXTERN IW_INTO_AX
; EXTERN LSR_AX_3
; EXTERN OPEN_FILE_A
; EXTERN PATTERN_BYTES
; EXTERN REGLOAD
; EXTERN SETNAM
; EXTERN TOASCI
