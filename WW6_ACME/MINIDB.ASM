;
!zone MINIDB;MINI DATABASE 6502 1/91 
;
!SOURCE "WWSETUP.ASM"
!SOURCE "VARIABLS.ASM"
;
;
;
; PUBLIC OVR_SORT_FIELDS			;TABLED
;
;
; EXTERN EDIT_BUFFER_CHANGED	;EDITLN
; EXTERN IN_DATABASE_MODE	;OVERLAY ZP
;EXTERN TEXT_MINUS_A		;POINTERM
;
;
;
MAX_FIELDS =  23
MIN_FIELDS =  3 
START_INDEX =  1
;
SECTION_LENGTH =  $41E	;PLACE EXACT LENGTH OF OUTLN HERE
;
OVERLAY_START: 
;
;OVERLAY JUMP TABLE
;
OV_SET_TO_TOP_PAGE:			;TABLED, MINIDB ONLY
 JMP SET_TO_TOP_PAGE
;
OV_ALLOW_CURSOR_UP:			;TABLED, MINIDB ONLY
 JMP ALLOW_CURSOR_UP
;
OV_DB_PREV_PAGE:			;TABLED, MINIDB ONLY
 JMP DB_PREV_PAGE
;
OV_SHOW_FIELD_NAME:			;TABLED, MINIDB ONLY
 JMP SHOW_FIELD_NAME
;
OVR_FC_SORT_INDEX:			;DOUBLESHOT
 JMP SORT_FIELDS
;
OVR_FC_DELETE_LINE:			;TABLED, MINIDB/WP
 JMP DELETE_RECORD
;
OVR_FC_INSERT_LINE:			;DOUBLESHOT
 JMP INSERT_RECORD
;
OV_ADD_EOR:				;TABLED, MINIDB ONLY
 JMP ADD_EOR
;
FC_OUTLINE_UPLEVEL:			;DOUBLESHOT
 RTS
OLD_TOP_MARGIN:
!byte 0
OLD_BOTTOM_MARGIN:
!byte 0
;
FC_OUTLINE_DOWNLEVEL:			;DOUBLESHOT
 RTS
FONT_OR_TEXT_MODE:
!byte 0
OLD_PAGE_LENGTH:
!byte 0
;
OVR_FC_TAB_FORWARD:
 JMP FC_TAB_FORWARD_NORMAL		;DOUBLESHOT
;
OVR_FC_FORMAT:				;DOUBLESHOT
 JMP FC_FORCE_FORMAT 			;INTO EDITLN
;
OVR_FC_FONT_WINDOW:			;DOUBLESHOT
 JMP COPY_FIELD
;
;
;END OF JUMP TABLE
;--------------------
;
;MAKE OUTLINER CALL POINTS:
;
TESTEN1:
TESTEN2:
TESTEN3:
TESTEN4:
FC_OUTLINE_REFORMAT:
DOINDEX:
REFORMAT:
TABPOS:
;
;FONT_OR_TEXT_MODE:
; DB 0
;OLD_PAGE_LENGTH:
; DB 0
;OLD_TOP_MARGIN:
; DB 0
;OLD_BOTTOM_MARGIN:
; DB 0
TRIP:
!byte 0
;
;---------------------
;
ENTER_DATABASE_MODE:
;*NOTE* MAY WANT TO CALL SET_MARGIN FOR 10/60 DEFAULTS
;
 LDA MERPTR			;WAS THERE A SAVE ERROR?
 BEQ EDB_ABORT
;
 CLC
 LDA TOP_MARGIN
 STA OLD_TOP_MARGIN
 ADC BOTTOM_MARGIN
 ADC PAGE_LENGTH
 STA OLD_PAGE_LENGTH
 LDA BOTTOM_MARGIN
 STA OLD_BOTTOM_MARGIN
;
 LDA PW_S_PRINT_GRAPHICS	;SAVE OFF OLD MODE
 STA FONT_OR_TEXT_MODE
;
 JSR CHANGE_TO_TEXT
;
ENTER_DB_FIELDS:
 LDX #15
 JSR PROMPT_AND_NUMBER
 CMP #MIN_FIELDS
 BCS .MIN_FOUR
 LDA #MIN_FIELDS
.MIN_FOUR: 
;
 CMP #MAX_FIELDS
 BCC .OK
 LDA #MAX_FIELDS
.OK:
;
 JSR PUSH_AXY		;SAVE AXY
 JSR INITIL		;REMOVE THE CURRENT DOCUMENT
;JSR TEXT_TO_EDIT_BUFFER;PUT THE TEXT IN THE EDIT BUFFER
 JSR POP_AXY		;RESTORE AXY
;
 LDY #'N'
 JSR SET_PL		;SETUP PAGE LENGTH
;
 JSR SET_VM_ZERO	;SETUP VERTICAL MARGINS TO ZERO
;
 LDA #$F7		;$F7 XOR $80 = 119
 LDY #23*11+1		;SET NAMES TO ----
.CLEAR_NAMES:
 DEY
;
 STA FIELD_NAMES+1,Y
 BNE .CLEAR_NAMES
;
 LDA #1
 STA IN_DATABASE_MODE	;DO *NOT* INC
;
 LDX #97	;MAGIC NUMBER
 SEC
 LDA #'R'
 LDY #'F'
;
DRAW_OUT_AND_DISPLAY:
 STA HEADAT+24
 STY HEADAT+30
;
 JSR DRAW_DB
 JSR FC_CLEAR_HOME_DSP
; JSR DISPLAY_SCREEN_AND_HEADER
;
EDB_ABORT:
 RTS
;
;
SET_PL: 
 STA FIELD_NAMES	;#FIELDS IN THIS DB
 STA MAXIMUM_LINES	;SAME AS OLD NUMBER_OF_FIELDS
;
 STY PW_S_PRINT_GRAPHICS
 LDX #0
 JSR AXASCII
;DO NOT USE AX_INTO_PG_LENGTH (BACKWARDS)
 STA PG_LENGTH+1
 STX PG_LENGTH
 RTS 
;
;
SET_VM_ZERO:
 LDA #'0'
 LDX #'0'		;.A.X = TOP/BOTTOM MARGIN (ASCII)
;
SET_VM:
 STA PRTWIN_TOPMAR+1
 STX PRTWIN_BOTMAR+1
 LDA #'0'
 STA PRTWIN_TOPMAR
 STA PRTWIN_BOTMAR
 JMP SET_VMARGINS
;
;---------------------
;
EXIT_DATABASE_MODE:
;
;JSR FC_EDIT_BUFFER_TO_TEXT
 JSR TELL_DOCUMENT_ALTERED
;
 LDX #47
 JSR PRKECY
 BEQ .DO_IT
 JMP HEADER_AND_NAME
;
.DO_IT:
 DEC IN_DATABASE_MODE
 LDY FONT_OR_TEXT_MODE
 CPY #'N'
 BEQ .TEXT_MODE 
 JSR CHANGE_TO_GRAPHICS
 JMP .PG_LEN 
;
.TEXT_MODE: 
 LDA OLD_PAGE_LENGTH
 JSR SET_PL
;
.PG_LEN:
 LDA OLD_BOTTOM_MARGIN
 AND #7
 ORA #'0'
 TAX				;SUPRESS BOTTOM MARGIN 0..7
 LDA OLD_TOP_MARGIN
 AND #7				;SUPRESS TOP MARGIN 0..7
 ORA #'0'
 JSR SET_VM 	
;
 LDA #23
 STA MAXIMUM_LINES
;
 LDA #'P'
 LDY #'L'
 CLC
 BCC DRAW_OUT_AND_DISPLAY
;
;---------------------
;
SHOW_FIELD_NAME:
;GIVEN LINE # SHOW FIELD NAME IF PRESENT
;
 LDA MESSAGE_ON             ;CLEAR REMAINING PROMPT
 BEQ SFN_ABORT		    ;IF PRESENT
;
 LDA IN_DATABASE_MODE
 BEQ SFN_ABORT
;
SHOW_NAME:
 JSR CSL_X_11_INTO_X		;CURRENT_SCREEN_LINE*11 INTO .X
;
 LDY #0
.LOOP:
 LDA FIELD_NAMES+1,X
 EOR #$80
 STA VIDEO+40,Y
 INX
 INY
 CPY #11
 BCC .LOOP
;
SFN_ABORT: 
 RTS
;
CSL_X_11_INTO_X:
 LDA CURRENT_SCREEN_LINE	;ZERO IS WHERE WE GO
 LDX #11
 JSR MUL_AX_0_PT         	;Return POINTER = .A*.X
 LDX POINTER			;.X = INDEX
 RTS
;
;---------------------
;
ALLOW_CURSOR_UP:
;BCC = OK
;BCS = STOP IT
;
;THIS ROUTINE MUST PAGE DOWN TO NEXT RECORD, OR SEARCH
;WILL HAVE NO CHANCE OF WORKING.
;
 LDA IN_DATABASE_MODE		;IS THIS DB MODE?
 BEQ ALLOW_SCROLL
;
 LDA TRIP			;1=ALLOW ALWAYS, 0 = DO NOTHING
 BNE ALLOW_SCROLL
;
 LDA CURRENT_SCREEN_LINE	;ZERO IS WHERE WE GO
 BNE ALLOW_SCROLL
;DISALLOW
 INC TRIP			;SET OVERRIDE FLAG
MD_SEC_RTS:
 SEC
 RTS
;
ALLOW_SCROLL:
MD_CLC_RTS:
 CLC
 RTS
;
;---------------------
;
SET_TO_TOP_PAGE:
 LDA IN_DATABASE_MODE		;IS THIS DB MODE?
 BEQ .ABORT
;
 JSR TEXT_INTO_AX
 STA TEXPAG
 STX TEXPAG+1
 JSR SETSCN
 LDA #0
 STA TRIP 
; JMP RESET_AND_DISPLAY
 JMP RESET
.ABORT:
 RTS
;
;---------------------
;
DB_PREV_PAGE:
;DO NOT HARM .X
 LDA IN_DATABASE_MODE
 BEQ MD_CLC_RTS
;
 LDA MAXIMUM_LINES
 STA CUR_PAGE_LENGTH
 STA LINE
 LDA #0
 STA CUR_PAGE_LENGTH+1
 SEC
 RTS
;
;---------------------
;
FIELD_TO_SORT:
!byte 0
CURRENT_FIELD:
!byte 0
MAX_RECORDS:
!byte 0
SORT_DIRECTION:
!byte 0
;
SORT_FIELDS:
;THIS ROUTINE NEEDS A FLAG FOR "NO RECORDS SWAPPED" TO TERMINATE
;
;
 LDX EOT+1
 STX ASCTYP
 INX
 CPX #>ENDRAM_MP
 BCS MD_CLC_RTS
;
 LDX IN_DATABASE_MODE
 STX SORT_DIRECTION		;ASSUME ASCENDING (NZ)
 BEQ MD_CLC_RTS
;
 JSR EDIT_BUFFER_TO_TEXT
;
.GET_KEY:
 LDX #52
 JSR PRKECY			;'SORT?'
 CMP #'A'
 BEQ .ASCENDING
 CMP #'D'
 BNE .GET_KEY
;(FT)
.DESCENDING:
 LDA #0
 STA SORT_DIRECTION
;
.ASCENDING:
 LDA CURRENT_SCREEN_LINE	;ZERO IS WHERE WE GO
 STA FIELD_TO_SORT
;
 JSR WORKING_SERPPT
;
; JSR FC_END_OF_DOCUMENT
; LDX PAGE
 JSR HOW_MANY_PAGES
 TAX
;
; DEX
 BEQ .ABORT0512			;DON'T DO ONLY ONE RECORD!
;
;?L_OK:
; LDA CURRENT_SCREEN_LINE
; CMP MAXIMUM_LINES		;OLD NUMBER_OF_FIELDS
; BEQ ?OK
; DEX
; BEQ ?ABORT
;?OK:
 STX MAX_RECORDS		;1..N N RECORDS
;
 LDX #0
 STX CURRENT_FIELD
;
.O_RECORD_LOOP:
 LDX #0
 STX T6				;FLAG FOR CHANGES IN THIS PASS
;
.RECORD_LOOP:
 LDX CURRENT_FIELD
;
 JSR TEXT_TO_REC
 JSR TEXT_INTO_AX
 JSR AX_INTO_P1
;
 JSR DOWN_1_RECORD
;
 LDY #0
;
;?S_VERIFY:
; LDA (POINTER1),Y
; CMP #$80
; BNE ?D_VERIFY
; BPL ?D_VERIFY
; JSR INC_P1_BY_1		;POINTERM
; BNE ?S_VERIFY
;
;?D_VERIFY:
; LDA (TEXT),Y
; CMP #$80
; BNE ?COMPARE_LOOP
; BPL ?COMPARE_LOOP
; JSR INCTE1
; BNE ?D_VERIFY
;
.COMPARE_LOOP:
 LDA (POINTER1),Y
 JSR DB_TOASCI
 PHA
; CMP (TEXT),Y
 LDA (TEXT),Y
 JSR DB_TOASCI
 STA .SM1
 PLA
!byte $C9
.SM1:
!byte $FF
;
 BCC .LESS_THAN
 BEQ .EQUAL
 BCS .GREATER_THAN
.EQUAL:
 CMP #$80
 BCS .NEXT_REC
 INY
 BNE .COMPARE_LOOP
;
.GREATER_THAN:
;
 LDA SORT_DIRECTION		;IF SORT IS DESCENDING (0)
 BEQ .NEXT_REC			;GET OUT
 JSR RIPPLE_SWAP		;SWAP THE TWO RECORDS
 BCC .NEXT_REC
.OUT_OF_MEM:
 JMP NOT_ENOUGH_MEMORY
; JMP ?NEXT_REC
;
;(FT)
;
.LESS_THAN:
;
 LDA SORT_DIRECTION		;IF SORT IS ASCENDING (NZ)
 BNE .NEXT_REC 
 JSR RIPPLE_SWAP
 BCS .OUT_OF_MEM
;
.NEXT_REC:
;
 INC CURRENT_FIELD
 LDX CURRENT_FIELD		;IF ++CURRENT < MAX
 INX
 CPX MAX_RECORDS		;GO DO NEXT RECORD PAIR
 BCC .RECORD_LOOP
;
 LDX T6				;WAS THERE A SWAP THIS PASS?
 BEQ .ALL_DONE
;
 LDX #0
 STX CURRENT_FIELD		;ELSE CURRENT = 0
;
 DEC MAX_RECORDS		;--MAX
 LDA MAX_RECORDS		;IF MAX >= 2
 CMP #1				;DO NEXT PASS
 BCS .O_RECORD_LOOP
; BNE ?O_RECORD_LOOP
;
.ALL_DONE:
 JSR FC_CLEAR_HOME_DSP		;RESET EDITING ENGINE
;
.ABORT0512:
 SEC 
 RTS
;
;
TEXT_TO_REC:
 STX COUNT_DOWN			;SAVE RECORD NUMBER
 BNE .NOT_FIRST			;IF NOT ZERO GOTO NOT FIRST
;
 JSR FC_CLEAR_HOME_NT		;SET TO BEGINNING
;
.ON_RECORD: 
 JSR TEXT_INTO_AX		;PUT TEXT
 JSR AX_INTO_P4			;STORE OFF START OF REC
;
 LDX FIELD_TO_SORT
 BEQ .ON_FIELD
;
 JMP DOWN_X_LINES		;MOVE TO CORRECT FIELD
;
.ON_FIELD:
 RTS 
;
.NOT_FIRST:
 JSR P4_INTO_AX			;GET START OF LAST RECORD
 JSR AX_INTO_TEXT		;INTO TEXT
 JSR DOWN_1_RECORD		;MOVE FWD 1 RECORD
 JMP .ON_RECORD 		;SET INTO P4 AND MOVE TO FIELD
;
;
RIPPLE_SWAP:
;
; LDA CURRENT_FIELD		;MOVE TO HOME, SET COUNT DOWN #REC
 LDA #1				;MOVE TO HOME, SET COUNT DOWN #REC
 STA T6				;FLAG A SWAP OCCURRED
;
 JSR P4_INTO_AX			;START OF 1ST RECORD
;
 JSR AX_INTO_PT			;PT = START OF 1ST RECORD
 JSR AX_INTO_P1			;P1 = SOURCE
;
 JSR EOT_INTO_AX		
 JSR AX_INTO_P2			;P2 = DESTINATION
 JSR INC_P2_BY_1		;POINTS AT EOT + 1
;
 JSR COPY_FIELD_WO_END		;COPY FIELDS WITHOUT THE END MARKER
 BCC .MEM_OK
 RTS
;
.MEM_OK:
 LDA #RETURN
 STA (POINTER2),Y		;TERMINATE FOR COPY BACK DOWN
;
 TYA
 JSR INC_P1_BY_A
 JSR INC_P1_BY_1		;SET P1 = P1+Y+1 (START OF 2ND REC)
 JSR PT_INTO_P2			;SET P2 = START OF 1ST REC
 JSR COPY_FIELD_WO_END		;MOVE 2ND FIELD TO FIRST FIELD
 LDA #RETURN
 STA (POINTER2),Y		;PLACE HARD RETURN AT END OF RECORD
;
 TYA
 JSR INC_P2_BY_A
 JSR INC_P2_BY_1		;SET DEST = START OF NEW 2ND RECORD
;
 JSR EOT_INTO_AX		
 JSR AX_INTO_P1			;P2 = DESTINATION
 JSR INC_P1_BY_1		;POINTS AT EOT + 1
;(FT)
;FALL THRU INT COPY_FIELD_WO_END
;WILL FORCE CLC AND EXIT
;
;
COPY_FIELD_WO_END:
;P1 = SRC
;P2 = DEST
;CLC= ALL OK
;SEC= OUT OF MEMORY
;
 LDX MAXIMUM_LINES	;SAME AS OLD NUMBER_OF_FIELDS
;
 LDY #0
.LOOP0703:
 LDA (POINTER1),Y
 CMP #ENDT
 BCC .STORE
 DEX
 BNE .STORE
 CLC
 RTS
;
.STORE:
 STA (POINTER2),Y
 INY
 BNE .LOOP0703
 INC POINTER1+1
 INC POINTER2+1
 LDA POINTER2
 CMP #$FE
 BCC .LOOP0703
;(SEC)
 RTS
;
;---------------------
;
DELETE_RECORD:
;ALSO TECHNICALLY DELETE PAGE
 LDA IN_DATABASE_MODE
 BNE .DEL_REC
 JMP FC_DELETE_LINE
;
.DEL_REC:
;
 JSR MOVE_TO_TOP_OF_CARD	;ON FIRST LINE, 1ST CHAR THIS CARD
;
 JSR TEXT_INTO_AX
 JSR AX_INTO_START_BLOCK	;POINT STARTBLOCK AT .AX
 JSR DOWN_1_RECORD
;
; JSR ON_THE_LAST_LINE
; BEQ ?CLEANUP		;TEST OF PARTIAL RECORD (EOF)
;
 JSR DECTE1
;
 JSR LDA_TEXT_0		;DATA
 CMP #SRETRN		;SRET OR RET?
 BCC .CLEANUP
;
 JSR TEXT_INTO_AX
 STA END_BLOCK
 STX END_BLOCK+1
;
 LDA #$80
 STA MOVE_COPY_HL
;
 JSR DISPLY
 LDX #53
 JSR SERPPT
; JSR PRKECY
 JSR WAIT_FOR_KEY
 CMP #'Y'
 BNE .CLEANUP
 JSR DELETE_BLOCK
;
.CLEANUP:
 LDA START_BLOCK
 LDX START_BLOCK+1
 JSR AX_INTO_TEXT
;
 LDA #0
 STA MOVE_COPY_HL
;
.ABORT0773:
 JSR TEXT_TO_EDIT_BUFFER
.ABORT1:
 JMP ON_AND_REFREASH
;
;---------------------
;
INSERT_RECORD:
;ALSO TECHNICALLY INSERT PAGE
;NEED TO HANDLE MAX PAGES!!!
;
 LDA IN_DATABASE_MODE
 BNE .DO_INS_REC
 JMP FC_INSERT_LINE		
;
.DO_INS_REC:
 JSR HOW_MANY_PAGES		;DO NOT ALLOW MORE THAN 254 RECORDS!
 BCS .ABORT0790
;
 JSR MOVE_TO_TOP_OF_CARD	;ON FIRST LINE, 1ST CHAR THIS CARD
 LDX MAXIMUM_LINES		;NUMBER_OF_FIELDS
 STX COUNT_DOWN
.LOOP0795:
 JSR FC_INSERT_LINE1
 DEC COUNT_DOWN
 BNE .LOOP0795
.ABORT0790:
 JMP DISPLY
;
;---------------------
;
SET_DB_FIELD_NAME:
 LDX #48
 JSR SERPPT
 LDA #11
 JSR INPUTS
;
 JSR CSL_X_11_INTO_X	;CURRENT_SCREEN_LINE*11 INTO .X
 INC MSLEN
 LDY #0
.COPY_FIELD:
 LDA VIDEO,Y
 CPY MSLEN
 BCC .FIELD_TEXT
;
 LDA #$F7		;$F7 XOR $80 = 119
;
.FIELD_TEXT:
 STA FIELD_NAMES+1,X
 INX
 INY
 CPY #11
 BCC .COPY_FIELD
;
HEADER_AND_NAME:
 JSR HEADER
 JMP SHOW_NAME
;
;---------------------
;
MOVE_TO_TOP_OF_CARD:
 JSR FC_BEGINNING_OF_LINE_DSP
 LDA CURRENT_SCREEN_LINE	;ZERO IS TOP OF SCREEN
 BEQ .ON_TOP
;
 JMP FC_PAGE_BACKWARD
.ON_TOP:
 RTS
;
;---------------------
;
!if  REMOVE_TEXT { 
HOW_MANY_PAGES:
;USES MAX_RECORDS (SO DOES SORT!)
;
 LDA PAGE
 STA MAX_RECORDS
;
 JSR PUSH_TEXT
;
 SEC			;FIND # LINES THAT SHOULD BE ON THIS PAGE
 LDA MAXIMUM_LINES	;SAME AS OLD NUMBER_OF_FIELDS
 SBC CURRENT_SCREEN_LINE;FIELD WE ARE ON 0..N
 TAX			
;
 JSR DOWN_X_LINES	;AND MOVE FORWARD THAT MANY
 JSR ON_THE_LAST_LINE
 BEQ .OUT 
 INC MAX_RECORDS
;
.ON_FIRST: 
 JSR ON_THE_LAST_LINE
 BEQ .OUT
;
 JSR DOWN_1_RECORD
 INC MAX_RECORDS
 BNE .ON_FIRST
;
.OUT:
 JSR POP_TEXT
 LDA MAX_RECORDS
 CMP #254
 RTS
;
} 
HOW_MANY_PAGES:
;
 JSR PUSH_TEXT
 JSR STTEXT_TO_TEXT	;PUT TEXT AT START
 JSR ZERO_PT		;Set POINTER = 0
 INC POINTER
;
.COUNT:
 JSR INC_PT_BY_1        ;POINTER = 1 + POINTER
 JSR NEXTLINE
 JSR ON_THE_LAST_LINE
 BNE .COUNT
 LDY MAXIMUM_LINES	;SAME AS OLD NUMBER_OF_FIELDS
 JSR DIV_PT_BY_Y         ;POINTER /.Y POINTER= quotient, .A=remainder
 JSR POP_TEXT
 LDA POINTER
 STA MAX_RECORDS
 CMP #254
 RTS
;
;
DOWN_1_RECORD:
 LDX MAXIMUM_LINES		;NUMBER_OF_FIELDS
;
;(FT)
DOWN_X_LINES:
 JSR NEXTLINE
 DEX
 BNE DOWN_X_LINES
 RTS
;
;
ON_THE_LAST_LINE: 
 LDY #$FF
.LOOP0912:
 INY
 LDA (TEXT),Y
 BPL .LOOP0912
 CMP #ENDT
 RTS
;
;---------------------
;
ADD_EOR:
;USES POINTER4+1 AS FIELD# COUNTER
;MAY HARM .X
;
 PHP			;SAVE STATUS
 LDX IN_DATABASE_MODE	;ARE WE IN THE DATABASE?
 BEQ .ABORT10927		;IF NOT, RESTORE STATUS, LEAVE
;
 PHA			;SAVE .AC
;
 CMP #ENDT		;EOT/SRET/RET?
 BCC .ABORT0932
; BNE ?RETURN
;
; LDA #ENDREC
; JSR CHROUT
; JMP ?JOIN
;
.RETURN:
 INC POINTER4+1
 LDA POINTER4+1
 CMP MAXIMUM_LINES	;NUMBER_OF_FIELDS
 BNE .ABORT0932
;
;?JOIN:
 LDA #ENDREC
 JSR CHROUT
;
;MUST LOOK FORWARD TO ASSURE THAT AT MAXIMUM_LINES
;ARE PRESENT
 JSR PUSH_TEXT
 LDX MAXIMUM_LINES
.FWD_1_REC:
 JSR TEXT_TO_NEXTLINE	;MOVE FORWARD TO THE NEXT RECORD
 JSR LDA_TEXT_0
 BEQ .AT_THE_END
 DEX 
 BNE .FWD_1_REC
;
 LDA #0
 STA POINTER4+1
;
.REJOIN:
 JSR POP_TEXT
;
.ABORT0932: 
 PLA			;RESTORE .AC
.ABORT10927: 
 PLP			;RESTORE STATUS
 RTS 
;
.AT_THE_END:
 LDA #ENDREC		;TACK ON THE FINAL EOF
 JSR CHROUT		;DO *NOT* RESET POINTER4
 JMP .REJOIN		;AND LEAVE
;
;---------------------
;
COPY_FIELD:
;
;BE SURE TO BE IN_DATABASE_MODE AND ON A PAGE > 1
;
 LDA IN_DATABASE_MODE
 BEQ .FONT_WIND
 LDA PAGE
 CMP #2
 BCC .ABORT0987
;
 JSR FC_BEGINNING_OF_LINE	;KILL DISPLAY, MOVE TO START OF LINE
;
 JSR PUSH_TEXT			;SAVE CURRENT TEXT POINTER
;
 LDX MAXIMUM_LINES		;NUMBER_OF_FIELDS
.LOOP0994:
 JSR TEXT_TO_PREV_LINE
 DEX
 BNE .LOOP0994			;MOVE TEXT POINTER BACK 1 RECORD
;
 LDA END_LINE_TYPE
 PHA
 LDA OLD_CHARS_IN_LINE
 PHA
 JSR TEXT_TO_EDIT_BUFFER	;COPY IN THE NEW LINE
 PLA
 STA OLD_CHARS_IN_LINE
 PLA
 STA END_LINE_TYPE
;
 LDY CHARS_IN_LINE		;RESET THE EOT TYPE FOR LAST LINE
 STA EDIT_LINE,Y		;OF DOCUMENT PROBLEMS
;
 INC EDIT_BUFFER_CHANGED	;INDICATE EDIT BUFFER IS CHANGED
 JSR POP_TEXT			;RESTORE THE TEXT POINTER
 JSR CALCULATE_LINE_LENGTH	;DETERMINE NEW LINE LENGTH
;
.ABORT0987:
 JMP ON_AND_REFREASH		;RESTORE DISPLAY AND SHOW NEW LINE
.FONT_WIND:
 JMP FC_FONT_WINDOW		;GO TRY FONT WINDOW
;
;---------------------
;
LOAD_256_SUPRESS:
;
 PHA
 CMP #ENDT		;EOT/SRET/RET?
 BCC .ABORT1027
;
 INC POINTER4+1
 LDA POINTER4+1
 CMP FIELD_NAMES	;NUMBER_OF_FIELDS
 BNE .CLCABORT
 LDA #0
 STA POINTER4+1 
 INC COUNT		;NUMBER OF PAGES
 LDA COUNT		;MUST BE < 256
 BNE .CLCABORT
 PLA
 SEC
 RTS
;
.CLCABORT:
 CLC
.ABORT1027:
 PLA
 RTS 
;
;
DB_TOASCI:
 JSR TOASCI
 CMP #' '
 BNE .OUT1052
 LDA #$7F
.OUT1052:
 RTS 
;
;---------------------
;
OVERLAY_END:
;
OVERLAY_SIZE =  OVERLAY_END - OVERLAY_START
;
!initmem $FF
* = *+SECTION_LENGTH-OVERLAY_SIZE
;
;
!eof
;
; PUBLIC ENTER_DATABASE_MODE
; PUBLIC EXIT_DATABASE_MODE
; PUBLIC ENTER_DB_FIELDS
; PUBLIC LOAD_256_SUPRESS
; PUBLIC OVERLAY_START
; PUBLIC OV_ADD_EOR
; PUBLIC OV_ALLOW_CURSOR_UP
; PUBLIC OV_DB_PREV_PAGE
; PUBLIC OVR_FC_DELETE_LINE
; PUBLIC OVR_FC_INSERT_LINE
; PUBLIC OVR_FC_FORMAT
; PUBLIC OVR_FC_FONT_WINDOW
; PUBLIC OV_SET_TO_TOP_PAGE
; PUBLIC OV_SHOW_FIELD_NAME
; PUBLIC OVR_FC_SORT_INDEX
; PUBLIC OVR_FC_TAB_FORWARD
; PUBLIC SET_DB_FIELD_NAME
; PUBLIC SET_PL
; PUBLIC SET_VM_ZERO
; PUBLIC TESTEN1
; PUBLIC FC_OUTLINE_DOWNLEVEL
; PUBLIC FC_OUTLINE_UPLEVEL
; PUBLIC FC_OUTLINE_REFORMAT
; PUBLIC DOINDEX
; PUBLIC REFORMAT
; PUBLIC SET_TO_TOP_PAGE
; PUBLIC TABPOS
; EXTERN ASCTYP
; EXTERN AXASCII
; EXTERN AX_INTO_PT
; EXTERN AX_INTO_P1
; EXTERN AX_INTO_P2
; EXTERN AX_INTO_P3
; EXTERN AX_INTO_P4
; EXTERN AX_INTO_PG_LENGTH
; EXTERN AX_INTO_START_BLOCK
; EXTERN AX_INTO_TEXT
; EXTERN CALCULATE_LINE_LENGTH
; EXTERN CHANGE_TO_GRAPHICS
; EXTERN CHANGE_TO_TEXT
; EXTERN CHROUT
; EXTERN CLRBLK
; EXTERN DEC_PT_BY_1
; EXTERN DECTE1
; EXTERN DELETE_BLOCK
; EXTERN DISPLY
; EXTERN DISPLAYON
; EXTERN DISPLAY_SCREEN_AND_HEADER
; EXTERN DIV_PT_BY_Y
; EXTERN DRAW_DB
; EXTERN DRAWOUT
; EXTERN EDIT_BUFFER_TO_TEXT
; EXTERN EDIT_LINE
; EXTERN END_BLOCK
; EXTERN END_LINE_TYPE
; EXTERN EOT_INTO_AX
; EXTERN FC_BEGINNING_OF_LINE
; EXTERN FC_BEGINNING_OF_LINE_DSP
; EXTERN FC_CLEAR_HOME
; EXTERN FC_CLEAR_HOME_DSP
; EXTERN FC_CLEAR_HOME_NT
; EXTERN FC_DELETE_LINE
; EXTERN FC_EDIT_BUFFER_TO_TEXT
; EXTERN FC_FONT_WINDOW
; EXTERN FC_FORCE_FORMAT
; EXTERN FC_INSERT_LINE
; EXTERN FC_INSERT_LINE1
; EXTERN FC_PAGE_FORWARD
; EXTERN FC_PAGE_BACKWARD
; EXTERN FC_TAB_FORWARD_NORMAL
; EXTERN FIELD_NAMES
; EXTERN FULL_SCREEN
; EXTERN HEADAT
; EXTERN HEADER
; EXTERN INC_PT_BY_P1
; EXTERN INC_PT_BY_1
; EXTERN INC_P1_BY_A
; EXTERN INC_P1_BY_1
; EXTERN INC_P2_BY_1
; EXTERN INC_P2_BY_A
; EXTERN INCTE1
; EXTERN INITIL
; EXTERN INPUTS
; EXTERN LDA_TEXT_0
; EXTERN MAXIMUM_LINES
; EXTERN MESSAGE_ON
; EXTERN MUL_AX_0_PT
; EXTERN NEXTLINE
; EXTERN NOT_ENOUGH_MEMORY
; EXTERN OLD_CHARS_IN_LINE
; EXTERN ON_AND_REFREASH
; EXTERN P2_INTO_PT
; EXTERN P4_INTO_AX
; EXTERN PG_LENGTH
; EXTERN POP_AXY
; EXTERN POP_TEXT
; EXTERN PT_INTO_P2
; EXTERN PW_S_PRINT_GRAPHICS
; EXTERN PRTWIN_TOPMAR
; EXTERN PRTWIN_BOTMAR
; EXTERN PRKECY
; EXTERN PROMPT_AND_NUMBER
; EXTERN PUSH_AXY
; EXTERN PUSH_TEXT
; EXTERN RESET
; EXTERN RESET_AND_DISPLAY
; EXTERN SERPPT
; EXTERN SETSCN
; EXTERN SET_TO_TEXT_OR_GRAPHICS
; EXTERN SET_VMARGINS
; EXTERN START_BLOCK
; EXTERN STTEXT_TO_TEXT
; EXTERN TELL_DOCUMENT_ALTERED
; EXTERN TEXT_INTO_AX
; EXTERN TEXT_TO_EDIT_BUFFER
; EXTERN TEXT_TO_NEXTLINE
; EXTERN TEXT_TO_PREV_LINE
; EXTERN TOASCI
; EXTERN WAIT_FOR_KEY
; EXTERN WORKING_SERPPT
; EXTERN ZERO_PT
; EXTERN PAGE_LENGTH
; EXTERN TOP_MARGIN
; EXTERN BOTTOM_MARGIN
