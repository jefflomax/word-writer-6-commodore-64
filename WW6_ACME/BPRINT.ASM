;
!zone BPRINT
;
!SOURCE "WWSETUP.ASM"
!SOURCE "VARIABLS.ASM"
;
;ROUTINES COMMON TO BOTH GRAPHIC AND TEXT PRINT
;
;
; EXTERN BIGGEST_POINTSIZE
;
;
; EXTERN FORMFT
;
;
HF_LEFT_MARGIN:
!word 0;MARGIN USED FOR HEADERS AND FOOTERS
HF_LINE_LENGTH
!word 0;LINE LENGTH USED FOR HEADERS AND FOOTERS
JUSTIFY_FORMAT:
!byte 0
NUMBER_OF_COPIES:
!byte 0
LETTER_HI_BIT:
!byte 0
NUMPGS:
!byte 0
ASCTYP:
!byte 0
LINFED:
!byte 0
STPAGE:
!byte 0
FIRST_PAGE:
!byte 0
END_LINE_TYPE:
!byte 0
USER_DEFINED_LEAD:
!byte 0
GRAPHIC_X_OFFSET:               ;ALSO GRAPHIC FLAG FF == NO
!byte 0
GRAPHIC_FILENAME: 
!word 0
GRAPHIC_EFFECT:
!byte 0
;
;
;
GET_PRINT_PARAMETERS:
 LDA #'N'
 STA CHNPAG		;SET LINKED PRINT TO N ON ENTRY
 STA PW_S_MERGE_NAMES	;SET MERGE NAMES TO N ON ENTRY
;
 JSR STORE_BEGIN_LINE
;
 JSR TETORETNA ;SAVE TEXT POINTER
; JSR CHANGECOD ;SET UP CORRECT PRINTER CODES
;*NEW*
;
 LDA PAGE
 STA FIRST_PAGE
;
 JSR KILL_HEAD_AND_FOOT
;
 STX PREVIEW    ;[0] PREVIEW OFF
;
PQUES1:
 LDA PG_LENGTH
 CMP #'0'
 BNE .PGLEN_OK
;
 LDA PG_LENGTH+1
 CMP #'4'
 BCS .PGLEN_OK
 LDA #'3'
 STA PG_LENGTH+1        ;PAGE LENGTH MUST BE AT LEAST 3 < 99
;
.PGLEN_OK:
 JSR PRMENU
;
NEXT_KEY:
 JSR WAIT_FOR_KEY
;
 CMP #$AE             ;COMM-S SAVE DEFAULTS?
 BNE .TRY_RS
 JSR FC_SAVE_DEF_PRINT_FILE
 JMP .PRINT_PARM_ABORT
;
.TRY_RS:
 CMP #3
 BNE PQPREVIEW 
 JSR SET_VMARGINS 
.PRINT_PARM_ABORT:
 JSR FC_CLEAR_HOME_DSP
 JMP ABORT_FUNCTION
;
;
PQPREVIEW:
 STA LETTER_HI_BIT    ;SHIFT OR NOT
 CMP #133             ;F1 - PRINT PREVIEW?
 BEQ .DO_PREVIEW
;
 CMP #$EA
 BEQ .MAKE_RET        ;MIRROR?
;
 CMP #$89             ;F2 PRINT PREVIEW?
 BNE PQRETN           ;IF NOT TRY NORMAL PRINT
 LDX PRINT_GRAPHICS
 BEQ .DO_PREVIEW      ;IF TEXT MODE, F2 = PREVIEW
.MAKE_RET:
 LDA #$0D
 BNE PQRETN
;
.DO_PREVIEW:
 LDA HIMEM+1
 SBC #42
 CMP EOT+1         ;ENOUGH MEMORY TO PRINT PREVIEW?
 BCC NEXT_KEY
;
 LDA #$80
 STA PREVIEW
 JMP PREVIEW_ENTRY
;
;
PQRETN:
;
.KILL_HI:
 AND #$7F
;
 CMP #$D              ;RETURN?
 BNE .KEY_VALID
 JMP PRSTRT           ;IF SO GO PROCESS
;
.KEY_VALID:
 CMP #'O'+1
 BCS NEXT_KEY 
 CMP #'A'             ;LINEFEEDS
 BCC NEXT_KEY
;[SEC]
 SBC #'A'             ;0..15
;
PQRET1:
 LDX PW_S_PRINT_GRAPHICS
 CPX #'N' 
 BEQ P1T9             ;BIF NOT PRINTING GRAPHICS
;
 CMP #4
 BCC P1T9
 CMP #9
 BCC NEXT_KEY         ;SUPRESS IN GRAPHICS
;
P1T9:
 TAX
 STA SESLEN           ;INDEX
 JSR PRTPRM
 LDX SESLEN
 CPX #9
 BCS PRNMBR
;
 CMP #'Y'
 BEQ PRSETY
 LDA #'Y'
!byte $2C
PRSETY:
 LDA #'N'
PRSETAC:
 LDX #0
 STA (MSGOUT,X)
;
 LDX SESLEN
 CPX #PW_PRINT_FONTS
 BNE J_PQUES1
;
 JSR SET_TO_TEXT_OR_GRAPHICS
;
J_PQUES1:
 JMP PQUES1
;
PRNMBR:
;AC HAS DATA, ALSO IN (MSGOUT,X)
 CPX #PW_NUMBER_COPIES
 BEQ .NO_CHANGE
 INC DOCUMENT_ALTERED       ;THIS CHANGES TO DOCUMENT
.NO_CHANGE:
 CPX #PW_PAGE_LENGTH        ;ARE WE AT PAGELENGTH FIELD?
 BNE .NOT_PGLEN             ;BIF NOT
;
 LDA PRINT_GRAPHICS         ;ARE WE PRINTING GRAPHICS?
 BEQ .NOT_PGLEN             ;IF TEXT, AS NORMAL
;
 LDA #'L'
 LDX #'T' 
 CPX PG_LENGTH+1            ;IS IT ALREADY LETTER?
 BEQ .CHNG_TO_LEGAL 
!byte $2C
.CHNG_TO_LEGAL: 
 LDX #'G' 
 JSR AX_INTO_PG_LENGTH
 JMP PQUES1
;
.NOT_PGLEN:
;
 LDA #$FF
 ROL LETTER_HI_BIT    ;ADDING OR SUBTRACTING?
 BCS PRNMBR3          ;ADD 1
;
 LDA #$01             ;ADD 1
PRNMBR3:
 LDX #0
 CLC
 ADC (MSGOUT,X)
;
 CMP #'9'+1     ;ONE ABOVE 9
 BCC PRNMBR2      
 LDY #$01
 LDA #'0'       ;LOW BYTE
 BNE PRNMBR5    ;SET BYTE
;
PRNMBR2:
 CMP #'0'-1
 BNE PRSETAC
 LDY #$FF
 LDA #'9'
PRNMBR5:
 JSR BP_INCDEC_PAGE_TENS
 BNE PRSETAC
;
; RETURN PRESSED TO START PRINT
;
PRSTRT:
;
PREVIEW_ENTRY:
;FORCE PREVIEW, NORMAL PRINT
;
;
 JSR SET_VMARGINS
 LDA MARGIN
 STA PLNLEN
 LDA MARGIN+1
 STA PLNLEN+1
;
 LDX #$80       ;DEFAULT ON
 STX NUMPGS
 STX TEMP6
 STX ASCTYP
 STX CHAIN      ;USED TO DETERMINE IF LINKING IS ALLOWED
 STX LINFED
 STX TEMP5	;TEMP5 = MAIL_MERGE
;
 LDX #$FF
 STX GRAPHIC_X_OFFSET   ;FLAG FF == NO
;
 INX ;[#0]
 STX GRAPHIC_EFFECT
; STX JUSTIFY_FORMAT   ;DEFAULT LEFT
; STX TEMP5            ;DEF OFF
;*NOTE* REMOVED
;STX FORMFT           ;FOR MERGE
;
 JSR PAGNUM
 STA STPAGE
;
 LDA PRINT_GRAPHICS
;*NOTE* CHANGED FROM 6 2/6/91
 BEQ .NUM1
 ASL CHAIN
 BEQ .NUM5A               ;SKIP SOME QUESTIONS IF IN GRAPHICS
;
.NUM1:
 LDX #PW_NORMAL_ASCII ;ASCTYP
 JSR PRTPRM
 BEQ .NUM2
 ASL ASCTYP           ;ELSE COMMODORE ASCII
;
.NUM2:
 LDX #PW_1526_802     ;COMM PRINTER
 JSR PRTPRM
 BNE .NUM4
 LDY #'N'
 STY CMACST           ;SET COMM ASCI
;
.NUM4:
 LDX #PW_CHAIN_PAGE
 JSR PRTPRM              ;Y/N
 BNE .NUM4A                 ;BIF SET AT NO
;
 LDA DOCUMENT_ALTERED    ;ARE THERE CHANGES TO DOCUMENT?
 BEQ .NUM5
 JSR GPRINT_WARN_BOX
 JSR WAIT_FOR_KEY
 JMP ABORT_FUNCTION 
.NUM4A:
 ASL CHAIN               ;CHAIN = 0 (OFF)
;
.NUM5:
 LDX #PW_MERGE_NAMES     ;TEMP5
 JSR PRTPRM
 BNE .NUM5A		;IF NOT MERGE, TURN OFF
;
 JSR CHANOF              ;CHAIN PRINT OFF
; JSR NEW_LINES_PAGE
; JSR LDNAMS
 LDX #38
 JSR OPEN_USER_FILE_PROMPT	;TRY TO OPEN THE MAIL-MERGE FILE
 BCC .NUM5B		;MAIL-MERGE EXISTS
 JSR CLOSE2		;CLOSE2 AND CLALL (ICK)
;
.NUM5A:
 ASL TEMP5		;0=NO MAIL MERGE
; JMP ?6
 BEQ .NUM6			;[BRA]
.NUM5B:
 JSR CLRCHN		 
;
.NUM6:
 LDX #PW_LINEFEEDS    ;LINEFEEDS
 JSR PRTPRM           ;LOOK IT UP
 BEQ .NUM7
 ASL LINFED           ;TURN OFF
;
.NUM7:
;
 LDX #PW_NUMBER_PAGES
 JSR PRTPRM        	;NOT ALLOWED ON MERGE
 BNE .NUM8
;
 ASL NUMPGS
 JSR SET_FAKE_FOOTER
;
.NUM8:
 LDX CHAIN              ;IF CHAINING WAS SELECTED
 BNE .SET_TO_ONE        ;IGNORE MULTI-COPIES
;
 LDX #PW_NUMBER_COPIES
 JSR GET_PRINT_WINDOW_NUMBER
 BNE .NUM8A
.SET_TO_ONE:
 LDA #$01
.NUM8A:
 CMP #$01       ;ONLY ONE COPY?
 BEQ .NUM8B        ;IF MORE
 PHA
 JSR CHANOF     ;NO CHAINING
 PLA
.NUM8B:
 STA NUMBER_OF_COPIES
;
.NUM9:
 LDX #PW_SHEET_FEED      ;TEMP6
 JSR PRTPRM
 BNE .NUM10
 ASL TEMP6
;
.NUM10:
;
;OPEN PRINTER OR SETUP 80 COLUMN
;
 BIT PREVIEW       	;IF PREVIEW OFF
 BPL PRICHN0       	;OPEN PRINTER NORMALLY
;
; ASL TEMP6		;TURN SHEET FEED OFF IF PRINT-PREVIEW
 JSR INITILIZE80        ;SETUP FOR PREVIEW
 JSR CHANOF
;*NOTE* LINKED PRINT COULD BE ALLOWED IN PRINT PREVIEW
; STA TEMP6              ;NO SHEET FEED
 LDX #1
 STX NUMBER_OF_COPIES
 DEX 
 STX ASCTYP             ;FORCE ASCII TYPE FOR PRINT PREVIEW
 RTS
;
;OPEN PRINTER
;
;
PRICHN0:
;
;*NOTE* WE MAY NOT NEED THIS
 JSR CHANGECOD ;SET UP CORRECT PRINTER CODES
;
 JSR CLRCHN
 LDA PRINT_GRAPHICS ;0=NO, NZ = YES
 BNE CLC_AND_OUT            ;CLC=NO OPEN ERROR
;
;[0] LDA #0
; STA $98                     ;SET LTDEND FOR DEV NOT PRESENT
;*NOTE*
;*DEBUG*
;	THIS IS REMOVED BECAUSE IT KILLS FILES OPENED FOR
;	MAIL-MERGE.  I DON'T KNOW RIGHT NOW WHY THIS IS HERE
;
; JSR SETNAM
;*NEW* ONLY STORE NULL LENGTH
 STA $B7           ;FNLEN
;
 JSR GET_PRINT_LFS
;
 JSR OPENE1
 BCS PRINT_PARAMETERS_OUT
;
PRINTER_CHKOUT:
 LDX #4
 JMP CHKOUT           ;OPEN AND RET, USED AS SUBRT
;
;
GET_PRINT_LFS:
;
 LDX #PW_SECONDARY_ADDR
 JSR GET_PRINT_WINDOW_NUMBER
;
 CMP #99            ;MPS1000 PRINTER?
 BNE .SKP
 LDA #255           ;255 SA FOR MPS1000
.SKP:
 TAY               ;SA SET
;
 LDA #4            ;LA SET
!byte $A2;LDX #
PRTDEVICE:
!byte $04;FA SET
;PRINT_PARAMETERS_OUT:
 RTS
;
PRINT_PARAMETERS_OUT:
;
 JMP CLALL
;
;
IS_JUSTIFY_ON:
 LDX JUSTIFY_FORMAT
 CPX #3
 RTS
;
PEELNU:
;GET # F/TEXT :AXY C/CS
 JSR CLRAXY ;Y=[0] X=LENGTH
;
 JSR TEXCFE ;IS THIS RETURN?
 BCS PEELN3 ;IF SO EXIT
;
 JSR INCTE1
PEELN2:
 JSR TEXCFE ;IS THIS RETURN
 BCS PEELN1 ;IF SO, IT IS THE END
;
 PHA ;SAVE CHR
 JSR CHKNUM ;NUMBER?
 PLA ;RESTORE CHR
 BCS PEELN1 ;
PEELN5:
 STA INPBUF,X
 JSR INCTE1
 INX
 BNE PEELN2
PEELN1:
 CPX #0 ;NO LENGTH
 BEQ PEELN3
 STX MSLEN
 JSR HEXIN1
;
CLC_AND_OUT:
 CLC
 RTS
PEELN3:
 SEC
 RTS
;
DOCHKM:
 JSR TEXCF0 
 CMP #CMARK     ;CHECKMARK?
 BNE CLC_AND_OUT ;DOCH_ABORT
;
 JSR PUSH_TEXT
;
;HEADERS & FOOTERS
;IDENTIFY HEADER/FOOTER LOCATION
;
 INY            ;[1] (AT H OR F)
 LDA (TEXT),Y   ;GET BYTE
 AND #$3F       ;UPPER/LOWER/RVS WILL ALL DO
 CMP #'H'-64    ;IS THIS HEADER?
 BNE CHECKHEADER2
 LDX #0         ;HEADER PRESENT.
CHECKHEADER1:
;SET HEADER/FOOTER POINTER IN TEXT
;
 JSR LAST_PRINTABLE_CHR  ;SET .Y END, .X UNHARMED
; CPY #1
; BNE ?TURN_ON
 CPY #3
 BCS .TURN_ON		;IF YOU SEE /F, TURN OFF
;
 LDA #0
!byte $24;ZP BIT
.TURN_ON:
 TYA
 STA HEADER_FOOTER_TEXT,X
 TAY               ;SET FLAGS
 BEQ J_DOCHK1      ;EXIT IF NOTHING SET
;
 CPY #98  ;MAX LEN
 BCC .SKP0667
 LDY #98
.SKP0667:
 INY
 STY .CHECK_SM1
 LDY #2
.LOOP:
 LDA (TEXT),Y
 STA HEADER_FOOTER_TEXT+1,X
 INX
 INY
!byte $C0;CPY #
.CHECK_SM1:
!byte $00
 BNE .LOOP
 LDA #RETURN
 STA HEADER_FOOTER_TEXT+1,X
;
J_DOCHK1:
 JMP DOCHK1
;
CHECKHEADER2:
 CMP #'F'-64
 BNE CHECKHEADER3
 LDX #100 ;SET FOR FOOTER
 BNE CHECKHEADER1 ;BRA
;
;SET JUSTIFICATION TYPE
CHECKHEADER3:
;
; LDX #3
;?LOOP:
; CMP JUSTIFY_TABLE,X     ;LOOK FOR L,C,R, OR J
; BEQ SET_TYPE
; DEX
; BPL ?LOOP
; BMI DOREGCHK
;;
;SET_TYPE:
; STX JUSTIFY_FORMAT
; CPX #3
; BNE ?SKP
;;
; LDX #$FF ;SET DONE FLAG
; STX JUSCHR
;
;?SKP:
; JMP DOCHK1
;
DOREGCHK:
;
LINK_DOCUMENT:
 CMP #'N'-64           ;NEXT DOCUMENT (LINKING)
 BNE MARGINS_CHECK
;
 LDX CHAIN              ;IS CHAIN SET TO ON?
 BPL DOCHK1             ;IF NOT, DO NOTHING
 LDX IN_GRAPHICS_PRINT  ;ARE WE PRINTING?
 BEQ DOCHK1             ;IF NOT,EXIT
 BMI DOCHK1             ;IF GRAPHIC PRINT, EXIT
 JSR SKIP_COMMA         ;KILL COMMA
 JSR INCTE1
;
 JSR STORE_TEXT_GFNAME
 LDA #USE_DATA_DISK     ;SET DISK TO USE
 JSR COPY_FILENAME      ;MOVE FILENAME TO BUFFER
 JSR CLRCHN
 JSR OPEN_FILE_2        ;OPEN 2,DEV1,2,"FILENAME"
 JSR LOAD_NEW1          ;SET SAVEOT TO START OF TEXT (LOAD NOT MERGE)
;
 LDA #0
 STA SAVE_LOAD_STRING_LEN
;
 LDA POINTER4           ;SAVE FOR PRINT PREVIEW
 PHA 
 JSR CLR_CHK_LOAD_FILE
 PLA
 STA POINTER4           ;RESTORE FOR PRINT PREVIEW
 LDA $90                ;GOOD OR BAD?
 PHA 
;
 LDA #2
 JSR CLOSE
 JSR CLRCHN
 JSR PRINTER_CHKOUT
 PLA
 AND #2                 ;NOT FOUND OR READ ERROR TIMEOUT?
 BNE DOCHK1 
; JSR POP_TEXT
 JSR POP_AX		;Retrieve .A,.X(LSB,MSB) from stack
 SEC                    ;CHECK FOUND, WE WILL SKIP ADVANCE...
 JSR STTEXT_TO_TEXT
 JMP TETORETNA
;
;
MARGINS_CHECK:
;
 JSR PROCESS_MARGINS
;
DOCHK1:
;
 JSR POP_TEXT
 LDA IN_GRAPHICS_PRINT
 BMI .SKP0770
;
 JSR LKFDP1 ;ADVNCE (AT NEXT LINE)
.SKP0770:
 SEC ;DID FIND CHECK
DOCH_ABORT:
 RTS ;ABORT
;
JUSTIFY_TABLE:
!byte 'L'-64,'C'-64,'R'-64,'J'-64
;
PROCESS_MARGINS_1:
 LDY #1
 LDA (TEXT),Y
 AND #$3F
;
PROCESS_MARGINS:
;
;EDIT_CRITICAL HANDLER, MUST WATCH LINE LENGTH,
;   AND LEADING
;
 CMP #'M'-64          ;IS THIS A MARGIN CHANGE?
 BNE CHANGE_JUSTIFICATION
;
 JSR SKIP_COMMA
;
 JSR PEELNU           ;GET # FROM TEXT
 BCS BBCS_PM_ABORT    ;NO NUMBER
 JSR SET_LEFT_MARGIN  ;SET LM FOR TEXT OR GRAPHICS
;
.SKP0800:
 JSR PEELNU           ;GET # FROM TEXT
 BCS BBCS_PM_ABORT    ;NO NUMBER
 JMP SET_LINE_MARGIN  ;SET LL AND PLNLEN FOR TEXT OR GRAPHICS
;
CHANGE_JUSTIFICATION:
 LDX #3
.LOOP0807:
 CMP JUSTIFY_TABLE,X     ;LOOK FOR L,C,R, OR J
 BEQ .SET_TYPE
 DEX
 BPL .LOOP0807
 BMI CHANGE_LEADING 
;
.SET_TYPE:
 STX JUSTIFY_FORMAT 
 CPX #3
 BNE .SKP0817
;
 LDX #$FF ;SET DONE FLAG
 STX JUSCHR
.SKP0817: 
 RTS
;
;
CHANGE_LEADING:
;
 CMP #'S'-64          ;SPACING (LEADING)?
 BNE PAGE_BREAK
;
 JSR SKIP_COMMA         ;SKIP OPTIONAL COMMA
 JSR PEELNU             ;GET A NUMBER
 BCC SKP1               ;IF GOOD NUMBER, CONT...
 LDA #0                 ;OTHERWISE, ASSUME 0
;
SKP1:
 LDX CURRENT_FONT
 BPL SFONT_MODE 
;
 CMP #4                 ;IS THIS ABOVE OR EQUAL TO 4?
 BCC .ZERO_THRU_THREE
 LDA #1                 ;SET TO 1
;
.ZERO_THRU_THREE:
 CMP #0
 BNE .OK
 CLC
 ADC #$01
.OK:
;
 STA NEW_LINE_SPACE
BBCS_PM_ABORT:
 RTS
;
;
SFONT_MODE: 
; AND #$0F              ;SUPRESS TO 0..15
 CMP #16                ;MAKE > 15
 BCC .OK0858
 LDA #15                 ;=15
;
;WHERE DO WE STORE TEXT SPACING
;
.OK0858:
 STA USER_DEFINED_LEAD
 STA FONT_LEADING
 BIT EXPAND_ON
 BPL PM_ABORT 
 ASL FONT_LEADING 
 RTS 
;
PAGE_BREAK:
 CMP #'P'-64            ;FORCE NEW PAGE?
; BNE LINK_DOCUMENT     EXPAND_ON_OFF
 BNE EXPAND_ON_OFF
;
STORE_LINK:
 STA PAGE_FORCED
 RTS
;
;
EXPAND_ON_OFF:
 LDX CURRENT_FONT     ;TEXT MODE?
 BMI PM_ABORT
;*NEW*
;
 CMP #'E'-64          ;EXPAND IS ON OR OFF
 BNE GRAPHICS_COMMAND ;PM_ABORT
;
 LDX USER_DEFINED_LEAD
 STX FONT_LEADING
;
 LDX #0               ;ASSUME TURN OFF
 LDY #2               ;POINT AT CHARACTER AFTER EXPAND
 LDA IN_GRAPHICS_PRINT
 BEQ .NOT_PRINTING
 JSR EXPAND_FONT_OFF
;
.NOT_PRINTING:
 LDA (TEXT),Y
 CMP #'+'             ;TURN IT ON?
 BNE .TURN_OFF
;
 ASL FONT_LEADING
 LDA IN_GRAPHICS_PRINT
 BEQ .NOT_PRINTING1
 JSR EXPAND_FONT_ON
;
.NOT_PRINTING1:
 LDX #$80             ;TURN ON.
.TURN_OFF:
 STX EXPAND_ON
;
PM_ABORT:
 RTS 
;
GRAPHICS_COMMAND:
 CMP #'G'-64            ;GRAPHIC CHECKMARK?
 BNE PM_ABORT 
;
 LDX IN_GRAPHICS_PRINT  ;ARE WE PRINTING?
 BEQ PM_ABORT      	;IF NOT,EXIT
 BPL PM_ABORT           ;IF GRAPHIC PRINT, EXIT
;
 LDA GRAPHIC_X_OFFSET
 BMI .NO_GRAPH
 JSR BAD_HEADER         ;TERMINATE GRAPHIC
;
.NO_GRAPH:
 JSR SKIP_COMMA         ;KILL COMMA
 JSR PEELNU
 BCS PM_ABORT           ;IF EOLN, NO LINE
;
 STA GRAPHIC_X_OFFSET
 JSR INCTE1
 JSR TEXCFE             ;GET CHARACTER
 BCS PM_ABORT
;
 AND #$3F
 LDX #0			;ASSUME NO FLIP
 CMP #'F'-64            ;FLIP COMMAND
 BNE .SET_FLIP
 LDX #$80		;SET FLIP ON
.SET_FLIP:
 STX GRAPHIC_EFFECT
;
 JSR INCTE2             ;ON THE COMMA, 1ST CHAR OF FNAME
STORE_TEXT_GFNAME:
 JSR TEXT_INTO_AX
 STA GRAPHIC_FILENAME
 STX GRAPHIC_FILENAME+1
 RTS 
;
SET_LEFT_MARGIN:
 LDY #0
 STY LEFPRT+1
 STA LEFPRT           ;SET LEFT OFFSET
;
 BIT PREVIEW
 BMI .OUT
 JSR SET_AX_LM_LL
 BEQ .OUT
;
 JMP AX_INTO_LEFPRT
.OUT:
 RTS
;
SET_LINE_MARGIN:
 BIT SCREEN_CONSTRAIN
 BPL .NO_CONSTRAIN
;
 LDY CURRENT_FONT
 BMI .TXT
 LDA #29
!byte $2C
.TXT:
 LDA #39
;
.NO_CONSTRAIN:
 LDY #0
;# NEED?
; STY PLNLEN
 STY MARGIN+1
 CMP #12
 BCS .MINIMUM_OK
 LDA #12
;
.MINIMUM_OK:
 CMP #MAX_LINE_LENGTH-1 ;MAX TEXT LENGTH
 BCC .STORE
 LDA #MAX_LINE_LENGTH-1 
.STORE:
 STA MARGIN
 STA PLNLEN           ;SAVE NEW LENGTH
;
 JSR SET_AX_LM_LL
 BEQ .OUT0996
;
 JMP AX_INTO_MARGIN
.OUT0996:
 RTS
;
SET_AX_LM_LL:
 LDY PRINT_GRAPHICS         ;ARE THESE GRAPHIC MARGINS?
 BEQ .EXIT
;
 CMP #80                    ;MAX 8 INCHES
 BCC .SKP1007 
 LDA #80
.SKP1007:
;
 PHA
 JSR IW_INTO_AX
!word D_PIXELS_PER_INCH
 LDY #10			;USES STOREY AND POINTER
 JSR DIV_AX_BY_Y	        ;DIVIDE .A,.X BY .Y, QUOTIENT POINTER, REM .A
 PLA				;THIS CAUSED ROUNDOFF ERROR!
 TAY 
 JSR PT_INTO_AX 
;
 JSR MUL_AX_BY_Y  		;USES STOREY POINTER1 AND POINTER
 CPX #$FF                   	;FORCE BNE IF OK
.EXIT:
 RTS
;
;
EXPAND_FONT_OFF:
 LDA #$FE
 AND SPECIAL_EFFECT1
 STA SPECIAL_EFFECT1
 LDA #$FE
 AND SPECIAL_EFFECT2
 STA SPECIAL_EFFECT2
 RTS
;
;
EXPAND_FONT_ON:
 LDA #$01
 ORA SPECIAL_EFFECT1
 STA SPECIAL_EFFECT1
 LDA #$01
 ORA SPECIAL_EFFECT2
 STA SPECIAL_EFFECT2
 RTS
;
;
SET_VMARGINS:
 JSR IS_FONT_PRINTING       ;TEXT OR FONT?
;
 LDY PRINT_GRAPHICS         ;ARE WE PRINTING GRAPHICS?
 BEQ .TEXT_STYLE            ;BIF NO
;
 LDA PRTWIN_TOPMAR          ;HB
 LDX PRTWIN_TOPMAR+1        ;LB
 JSR G_VMARGIN_TO_AX
 JSR AX_INTO_TOP_MARGIN
 LDA PRTWIN_BOTMAR
 LDX PRTWIN_BOTMAR+1
 JSR G_VMARGIN_TO_AX
 JSR AX_INTO_BOTTOM_MARGIN
;
 LDA PG_LENGTH+1            ;LETTER OR LEGAL?
 CMP #'G'                   ;BIF LEGAL
 BEQ .LEGAL_SIZE
;
 JSR IW_INTO_AX
!word D_VERTICAL_PIXELS_LETTER
 JMP .BOTH_SIZES
;
.LEGAL_SIZE:
 JSR IW_INTO_AX
!word D_VERTICAL_PIXELS_LEGAL
;
.BOTH_SIZES: 
;
 JSR AX_MIN_CLEAR_TB_MAR
 JSR AX_MIN_CLEAR_TB_MAR
;
 SEC
 SBC TOP_MARGIN
 PHA
 TXA
 SBC TOP_MARGIN+1
 TAX
 PLA
;
 SEC
 SBC BOTTOM_MARGIN
 PHA
 TXA
 SBC BOTTOM_MARGIN+1
 TAX
 PLA
;
 JMP AX_INTO_PAGE_LENGTH
;
;
.TEXT_STYLE:
 LDX #PW_TOP_MARGIN
 JSR T_VMARGIN_TO_AX
 JSR AX_INTO_TOP_MARGIN 
;
 LDX #PW_BOT_MARGIN
 JSR T_VMARGIN_TO_AX 
 JSR AX_INTO_BOTTOM_MARGIN
;
; LDX #PW_PAGE_LENGTH
; JSR GET_PRINT_WINDOW_NUMBER
 JSR GET_PAGE_LENGTH
;
.RESET:
 LDX #0
 STX PAGE_LENGTH+1
;
 STA PAGE_LENGTH
 CLC
 LDA TOP_MARGIN
 ADC BOTTOM_MARGIN
 ADC #1
;
 CMP PAGE_LENGTH
 BCS .MARGINS_EXCEED_PAGE
;
 STA SAVEYG
 DEC SAVEYG		;ADJ -1
 SEC
 LDA PAGE_LENGTH
 SBC SAVEYG
 STA PAGE_LENGTH
 RTS
.MARGINS_EXCEED_PAGE:
 CLC
 ADC #3
 BNE .RESET          ;FORCE PAGE LENGTH MARGINS+2
;
;
T_VMARGIN_TO_AX:
 JSR GET_PRINT_WINDOW_NUMBER
 LDX #0
 RTS 
;
;
AX_MIN_CLEAR_TB_MAR:
;
 SEC
 SBC D_CLEAR_TB_MARGIN
 PHA
 TXA
 SBC #0
 TAX
 PLA
 RTS
;
G_VMARGIN_TO_AX:
;
;((LB*DPI)/10)+(HB*DPI) -> #RASTERS
 PHA                        ;SAVE HB
 TXA                        ;LB
 AND #$0F
 LDX D_VERTICAL_PIXELS_INCH
 JSR MUL_AX_0_PT            ;Return POINTER = .A*.X
 LDY #10
 JSR DIV_PT_BY_Y
 PLA
 AND #$0F
 LDX D_VERTICAL_PIXELS_INCH
 JSR MUL_AX_PT              ;PT=PT+A*X
 JMP PT_INTO_AX               
;
;
IS_FONT_PRINTING:
 LDX #1
 STX PRINT_GRAPHICS
;
 LDA PW_S_PRINT_GRAPHICS
 CMP #'Y'                   ;ARE WE PRINTING GRAPHICS
 BEQ .SKP1176                   ;YES, BRANCH
;
 STX CURRENT_POINTSIZE      ;1 (SIZE OF LINE)
 DEC PRINT_GRAPHICS
;
 LDX #$FF
 STX CURRENT_FONT
;
.SKP1176:
 RTS 
;
GET_PAGE_LENGTH:
 LDX #PW_PAGE_LENGTH
;
GET_PRINT_WINDOW_NUMBER:
 JSR PRTPRM
 AND #$0F
 STA SESLEN
 LDX #MSGOUT
 JSR DEC_ZPPT_X ;MSGOUT-1
 LDX #0
 LDA (MSGOUT,X)
 AND #$0F
 JSR MULT_A_10
 CLC
 ADC SESLEN
 RTS
;
;
BP_INCDEC_PAGE_TENS:
 PHA
;
 LDX #MSGOUT
 JSR DEC_ZPPT_X       ;DEC MSGOUT BY 1
;
 TYA ;FF DEC/01 INC
 LDY #0
 CLC
 ADC (MSGOUT),Y
 CMP #'9'+1
;
 BNE BP_INCDEC_PAGE4
 LDA #'0'
 STA (MSGOUT),Y
 PLA
 LDA #'0'
 PHA
 BNE BP_INCDEC_PAGE1 ;SET TO 00
;
BP_INCDEC_PAGE4:
 CMP #'0'-1
 BNE BP_INCDEC_PAGE6
 PLA
 LDA #'9'
 PHA
;
BP_INCDEC_PAGE6:
 STA (MSGOUT),Y ;SUBTRACT 1
;
BP_INCDEC_PAGE1:
 PLA
 JMP INC_ZPPT_X
;
CHANOF:
 LDA #'N'
 STA CHNPAG
 STA CHAIN
;
PRMENU:
 LDX #25
 JSR SERPPT
PRMENU_1:
; LDA #<PRTDRP
; LDX #>PRTDRP
; JSR AX_INTO_MSGOUT
; JSR W_INTO_MSGOUT
; DW PRTDRP
;
 LDA #10 ;OFFSET
 JSR PULLDN
!word PRTDRP
 RTS
;
LAST_PRINTABLE_CHR:
;
 JSR Y_TO_END_LINE    ;.Y POINTS AT RETURN (TEXT),Y
 LDA (TEXT),Y
 STA END_LINE_TYPE    ;RETURN TYPE
;
.LOOP1:
 DEY
 CPY #$FF
 BEQ .OUT1268
 LDA (TEXT),Y
 CMP #' '
 BEQ .LOOP1
;
.OUT1268:
 RTS   ;.Y POINTS AT LAST VALID CHAR IN LINE, $FF = NULL LINE
;
;
Y_TO_END_LINE:
;
 LDY #0
Y_TO_END_LINE1:
.LOOP1281:
 INY
 JSR TEXCFE
 BCC .LOOP1281         ;.A LAST LINE CHAR &
 RTS               ;.Y INDEX FROM (TEXT)
;
COPYFIELD:
;
 LDA (TEXT),Y      ;TEXT IN
 CMP #UPARROW      ;END OF FIELD?
 BEQ COPYFIELD3 
 CMP #ENDT         ;END OF TEXT?
 BCS COPYFIELD4 
 CMP #ENDREC       ;PAGE
 BNE COPYFIELD1
 JSR PAGEADD
 JMP COPYFIELD2
;
COPYFIELD1:
 STA EDIT_LINE+1,X
 INX
COPYFIELD2:
 INY
 BNE COPYFIELD
;
COPYFIELD3:
 CLC
COPYFIELD4:
 RTS
;
PAGEADD:
;
 STY SAVEYG
 LDA PAGE
 JSR HEXOUT
 LDA TEMP0 ;HUNDREDS 0?
 CMP #'0'
 BEQ PAGEADD4
 JSR PAGEADD3
 LDA TEMP1 ;TENS PLACE
PAGEADD1:
 JSR PAGEADD3
PAGEADD2:
 LDA TEMP2 ;ONES PLACE
PAGEADD3:
 STA EDIT_LINE+1,X
 INX
 LDY SAVEYG
 RTS
;
PAGEADD4:
;
 LDA TEMP1 ;IF HUND = 0, TEST TENS
 CMP #'0'
 BEQ PAGEADD2
 BNE PAGEADD1
;
HEADFOOT_INTO_TEXT:
 TXA
 TAY
;
HEADFOOT_INTO_TEXT_Y:
 LDA #<HEADER_FOOTER_TEXT
 LDX #>HEADER_FOOTER_TEXT
 INY
 JSR INC_AX_BY_Y         ;.A,.X(LSB,MSB) = .A,.X(LSB,MSB) + Y (USES TEMP)
 JMP AX_INTO_TEXT
;
READ_HF_MARGINS:
;
;SETUP POSSIBLE NEW MARGINS VALUES, DEFAULT TO CURRENT.
 LDA LEFPRT
 STA HF_LEFT_MARGIN
 LDA PLNLEN
 STA HF_LINE_LENGTH
;
 LDY #0
 LDA (TEXT),Y
 CMP #','          ;IS THERE A LEFT MARGIN?
 BNE .ABORT        ;USE DEFAULT MARGINS
;
 JSR PEELNU        ;GET MARGIN FROM TEXT
 STA HF_LEFT_MARGIN
 JSR PEELNU        ;GET LINE LENGTH FROM TEXT
 STA HF_LINE_LENGTH
 JSR INCTE1        ;BUMP AROUND TRAILING COMMA
 SEC
 RTS
;
.ABORT: 
 CLC
 RTS 
;
;
SET_FAKE_FOOTER:
 LDA NUMPGS
 BNE .ABORT1377
;
 LDX #FAKEFOOTER_E-FAKEFOOTER
.LOOP1380:
 LDA FAKEFOOTER,X
 STA HEADER_FOOTER_TEXT+100,X
 DEX
 BPL .LOOP1380
;
.ABORT1377: 
 RTS 
;
;
SKIP_COMMA:
;
 JSR INCTE1
 LDY #1               ;BE SURE!
 LDA (TEXT),Y 
 CMP #','             ;OPTIONAL COMMA AFTER M?
 BNE .NO_COMMA
 JMP INCTE1 
;
.NO_COMMA:
 RTS
;
;
KILL_HEAD_AND_FOOT:
 LDX #0
 STX HEADER_FOOTER_TEXT
 STX HEADER_FOOTER_TEXT+100
 RTS
;
;
;
FAKEFOOTER:
!byte 5,'1'+$80,30,'-',252,'-',255
;
FAKEFOOTER_E:
;
;# THESE ARE NOT NEEDED EXCEPT IN PRINT
HEADER_FOOTER_TEXT:
;*NOTE*
;CAN THESE GO INTO THE ZPSWAP AREA SOMEHOW?
!fill 100, $FF
!fill 100, $FF
;
;
!eof
;
; PUBLIC ASCTYP
; PUBLIC CHANOF
; PUBLIC COPYFIELD
; PUBLIC CHANGE_JUSTIFICATION
; PUBLIC DOCHKM
; PUBLIC END_LINE_TYPE
; PUBLIC EXPAND_FONT_ON
; PUBLIC EXPAND_FONT_OFF
; PUBLIC FIRST_PAGE
; PUBLIC GET_PAGE_LENGTH
; PUBLIC GET_PRINT_LFS
; PUBLIC GET_PRINT_PARAMETERS
; PUBLIC GET_PRINT_WINDOW_NUMBER
; PUBLIC GRAPHIC_EFFECT
; PUBLIC GRAPHIC_X_OFFSET
; PUBLIC GRAPHIC_FILENAME
; PUBLIC HEADER_FOOTER_TEXT
; PUBLIC HEADFOOT_INTO_TEXT
; PUBLIC HEADFOOT_INTO_TEXT_Y
; PUBLIC HF_LEFT_MARGIN
; PUBLIC HF_LINE_LENGTH
; PUBLIC IS_FONT_PRINTING
; PUBLIC IS_JUSTIFY_ON
; PUBLIC JUSTIFY_FORMAT
; PUBLIC JUSTIFY_TABLE
; PUBLIC KILL_HEAD_AND_FOOT
; PUBLIC LAST_PRINTABLE_CHR
; PUBLIC LETTER_HI_BIT
; PUBLIC LINFED
; PUBLIC NUMPGS
; PUBLIC NUMBER_OF_COPIES
; PUBLIC PAGEADD
; PUBLIC PEELNU
; PUBLIC PRINTER_CHKOUT
; PUBLIC PROCESS_MARGINS
; PUBLIC PROCESS_MARGINS_1
; PUBLIC PRTDEVICE
; PUBLIC PRMENU
; PUBLIC READ_HF_MARGINS
; PUBLIC SET_AX_LM_LL
; PUBLIC SET_FAKE_FOOTER
; PUBLIC SET_LEFT_MARGIN
; PUBLIC SET_LINE_MARGIN
; PUBLIC SET_VMARGINS
; PUBLIC STPAGE
; PUBLIC USER_DEFINED_LEAD
; PUBLIC Y_TO_END_LINE
; PUBLIC Y_TO_END_LINE1
; EXTERN ABORT_FUNCTION
; EXTERN AX_INTO_BOTTOM_MARGIN
; EXTERN AX_INTO_LEFPRT
; EXTERN AX_INTO_MARGIN
; EXTERN AX_INTO_MSGOUT
; EXTERN AX_INTO_PAGE_LENGTH
; EXTERN AX_INTO_PG_LENGTH
; EXTERN AX_INTO_TOP_MARGIN
; EXTERN AX_INTO_TEXT
; EXTERN BAD_HEADER
; EXTERN BOTTOM_MARGIN
; EXTERN CHANGECOD
; EXTERN CHKNUM
; EXTERN CHKOUT
; EXTERN CHNL2I
; EXTERN CHNPAG
; EXTERN CLALL
; EXTERN CLOSE
; EXTERN CLRAXY
; EXTERN CLRCHN
; EXTERN CLR_CHK_LOAD_FILE
; EXTERN CMACST
; EXTERN CLOSE2
; EXTERN COPY_FILENAME
; EXTERN DEC_ZPPT_X
; EXTERN DIV_AX_BY_Y
; EXTERN DIV_PT_BY_Y
; EXTERN D_CLEAR_TB_MARGIN
; EXTERN D_PIXELS_PER_INCH
; EXTERN D_PIXELS_PER_LINE
; EXTERN D_VERTICAL_PIXELS_INCH
; EXTERN D_VERTICAL_PIXELS_LETTER
; EXTERN D_VERTICAL_PIXELS_LEGAL
; EXTERN EDIT_LINE
; EXTERN FC_CLEAR_HOME_DSP
; EXTERN FC_REFORMAT_DOC
; EXTERN FC_SAVE_DEF_PRINT_FILE
; EXTERN FONT_LEADING
; EXTERN FORCE_PAGE
; EXTERN FULL_SCREEN
; EXTERN GETIN
; EXTERN GPRINT_WARN_BOX
; EXTERN HEXIN1
; EXTERN HEXOUT
; EXTERN INCTE1
; EXTERN INCTE2
; EXTERN IN_GRAPHICS_PRINT
; EXTERN INC_AX_BY_Y
; EXTERN INC_ZPPT_X
; EXTERN INITILIZE80
; EXTERN IW_INTO_AX
; EXTERN KEYBRD
; EXTERN LEFPRT
; EXTERN LDNAMS
; EXTERN LKFDP1
; EXTERN LOAD_NEW1
; EXTERN MUL_AX_PT
; EXTERN MUL_AX_BY_Y
; EXTERN MUL_AX_0_PT
; EXTERN MULT_A_10
; EXTERN NEW_LINES_PAGE
; EXTERN NEW_LINE_SPACE
; EXTERN OPENE1
; EXTERN OPEN_FILE_2
; EXTERN OPEN_USER_FILE_PROMPT
; EXTERN PAGE_FORCED
; EXTERN PAGE_LENGTH
; EXTERN PAGNUM
; EXTERN PG_LENGTH
; EXTERN PLNLEN
; EXTERN PT_INTO_AX
; EXTERN PULLDN
; EXTERN PUSH_TEXT
; EXTERN POP_AX
; EXTERN POP_TEXT
; EXTERN PRINT_GRAPHICS
; EXTERN PRTPRM
; EXTERN PRTDRP
; EXTERN PRTLST
; EXTERN PRTSET
; EXTERN PRTWIN_BOTMAR
; EXTERN PRTWIN_TOPMAR
; EXTERN PW_TOP_MARGIN
; EXTERN PW_BOT_MARGIN
; EXTERN PW_CHAIN_PAGE
; EXTERN PW_DOUBLE_SPACE
; EXTERN PW_LINEFEEDS
; EXTERN PW_MERGE_NAMES
; EXTERN PW_NORMAL_ASCII
; EXTERN PW_NUMBER_COPIES
; EXTERN PW_NUMBER_PAGES
; EXTERN PW_PAGE_LENGTH
; EXTERN PW_PRINT_FONTS
; EXTERN PW_SECONDARY_ADDR
; EXTERN PW_SHEET_FEED
; EXTERN PW_S_MERGE_NAMES
; EXTERN PW_S_PRINT_GRAPHICS
; EXTERN PW_1526_802
; EXTERN PXCRLF
; EXTERN RETNATOTE
; EXTERN RETOUT_X
; EXTERN TETORETNA
; EXTERN TEXT_INTO_AX
; EXTERN SAVE_LOAD_STRING_LEN
; EXTERN SERPPT
; EXTERN SETNAM
; EXTERN SET_BIG_AND_CURR_A
; EXTERN SET_TO_TEXT_OR_GRAPHICS
; EXTERN SCREEN_CONSTRAIN
; EXTERN STORE_BEGIN_LINE
; EXTERN STTEXT_TO_TEXT
; EXTERN TEXCF0
; EXTERN TEXCFE
; EXTERN TOP_MARGIN
; EXTERN WAIT_FOR_KEY
; EXTERN W_INTO_MSGOUT
