;
!zone DISPLAY;DISPLAY_ROUTINES 
;
!SOURCE "WWSETUP.ASM"
!SOURCE "VARIABLS.ASM"
;
;
;
;
START_BLOCK:
!word 0
END_BLOCK:
!word 0
START_BLK_1ST_LINE_CHAR:
!byte 0
MAXIMUM_LINES:	;SCREEN DEPTH
!byte 23
MAXIMUM_LINES_M2 =  20
;
DISPLAYOFF:
DISPLYOFF:
 LDA #$60
 STA DISPLY
 RTS
;
RESET_AND_DISPLAY:
 JSR RESET
;
DISPLAYON:
 PHP
; LDA #$20
; STA DISPLY
 JSR DISPLAY_ON_NO_DISPLAY
 JSR DISPLY
 PLP
 RTS
;
DISPLY: 
 JSR TEXOUT
 CMP #ENDT
 BEQ .FILL_THE_SCREEN
;
 LDA MAXIMUM_LINES
 CMP #23
 BCS RESET
 LDY #0
 STY TMINDX
;
.FILL_THE_SCREEN: 
 JSR FILLSC
RESET:
 LDA #<VIDEO+$50
 STA SCRMO
 LDA #>VIDEO
 STA SCRMO+1
RESET_1:
 LDA TEXPAG
 STA TEXTMO
 LDA TEXPAG+1
 STA TEXTMO+1
 RTS
;
CONV_TO_LIT_C:
 STY .CVL_SM1
 STX TEMP1
 LDY TEMP1
 JSR IN_CURRENT_BLOCK
!byte $A0;LDY #
.CVL_SM1:
!byte $00
 JMP RE_ENTER_C
;
CLEAR_REMAINING_LINE:
 LDY #0
 JSR FILLLN1
 JMP NXTLIN
;
TEXOUT:
;LDX #23           ;TEMP0 COUNTS
 LDX MAXIMUM_LINES ;TEMP0 COUNTS
 STX TEMP0         ;DOWN THE SCREEN LINES
COUNT9:
 SEC
;LDA #23           ;#LINES PER SCREEN
 LDA MAXIMUM_LINES ;#LINES PER SCREEN
 SBC CURRENT_SCREEN_LINE
 CMP TEMP0         ;ARE WE ON THE LINE BEING EDITED?
 BNE REGULAR_LINE
;
 LDY #0
 STY TMINDX
;
 LDX COUNT         ;IF CHARACTERS TO SKIP > LL THEN CLEAN OUT LINE
 CPX CHARS_IN_LINE  
 BCS CLEAR_REMAINING_LINE
;
LINE_LOOP:
 LDA EDIT_LINE,X
 BMI END_LINE
LINE_LOOP1:
 BIT MOVE_COPY_HL
 BMI CONV_TO_LIT_C
RE_ENTER_C:
;
 STA (SCRMO),Y
 INX
 INY
 CPY #$28
 BCC LINE_LOOP 
 STY TMINDX 
 JMP NXTLIN     ;PROCESS END-OF-LINE
;
END_LINE:
;
 CMP #ENDT
 BCC LINE_LOOP1
;
 STY TMINDX
 BNE END_OF_LINE
;
 LDA #ENDT
 RTS
;
;
REGULAR_LINE:
;
 LDY #0
 STY TMINDX
;
 LDX COUNT
 BEQ COLUM01
;
COUNT0:
 LDA (TEXTMO),Y
 BMI SUBR1
COUNT1:
 INY
 DEX
 BNE COUNT0
COLUM:
;
 TYA
 CLC
 ADC TEXTMO
 STA TEXTMO
 BCC .SKP
 INC TEXTMO+1   ;ADJUST TEXTMO TO POINT AT FIRST USABLE CHAR
.SKP:
 LDY #0 
COLUM01:
 LDX #40
;
COLUM0:
 LDA (TEXTMO),Y
 BMI SUBR2
COLUM1:
;
 BIT MOVE_COPY_HL
 BMI CONV_TO_LIT
RE_ENTER_REG:
 STA (SCRMO),Y
;
 INY
 DEX
 BNE COLUM0
 STY TMINDX
;
NXTLIN:
 JSR FINDTX
 CMP #ENDT
 BEQ LSTLIN
 DEC TEMP0
 BNE COUNT9
LSTLIN:
 RTS
;
SUBR1:
 CMP #ENDT         ;/
 BCC COUNT1
 BEQ LSTLIN
 LDY #0            ;NO CHARACTERS FOR THIS LINE
SUBR11:
;
SUBR15:
 JSR FILLLN
 JMP NXTLIN
;
SUBR2:
 CMP #ENDT      ;DID WE END WITH EOT?
 BCC COLUM1     
 STY TMINDX
 BEQ LSTLIN
;
END_OF_LINE:
 CMP #RETURN
 BNE SUBR11     ;SOFT RETURN
 STY TMINDX     ;TMINDX=TMINDX+1
;
 LDA #31        ;HARD RETURN SYMBOL
 STA (SCRMO),Y
;
 INY
 JSR FILLLN
 JMP NXTLIN
;
;
CONV_TO_LIT:
 JSR IN_CURRENT_BLOCK
 JMP RE_ENTER_REG
;
IN_CURRENT_BLOCK:
;(REGULAR LINE CALL)
 PHA                  ;SAVE .A (CHAR TO EFFECT)
 STX TEMP1            ;SAVE .X
;
 CLC
 TYA                  ;INDEX
 ADC TEXTMO           ;PLUS TEXTMO
 LDX TEXTMO+1
 BCC .SKP0240
 INX                  ;.A,.X = TEXTMO + .Y
.SKP0240: 
 CPX START_BLOCK+1    ;ARE WE ON OR BEYOND START_BLOCK?
 BNE .TST_S_LO
 CMP START_BLOCK
 BEQ .IN_BLOCK        ;IF .A,.X = START_BLOCK ON 1ST CHAR
.TST_S_LO:
 BCC .OUT_BLOCK       ;IF .A,.X < START_BLOCK BEFORE BLOCK
;
 CPX END_BLOCK+1
 BNE .TST_E_LO
 CMP END_BLOCK
 BEQ .IN_BLOCK
.TST_E_LO:
 BCS .OUT_BLOCK
;
.IN_BLOCK:
 PLA 
 EOR #$80 
.END:
 LDX TEMP1
 RTS 
;
.OUT_BLOCK:
 PLA
 LDX TEMP1
 RTS
;
FILLLN:
;
FILLLN1:
 LDA #$60       ;SHIFT SPACE
FILOOP:
 STA (SCRMO),Y
 INY
 CPY #$28
 BCC FILOOP
 RTS
;
FINDTX:
;
;## POSSIBLE PROBLEMS SKIPPING PAST EOT.  MUST OPTIMIZE
; LDY #0
;FIREAD:
; LDA (TEXTMO),Y ;GET CHAR
; INY
; CMP #ENDT ;LOOK FOR RETURN
; BCC FIREAD ;OR EOT
; BEQ FIOUT ;EXIT W/ENDT
;
 LDY #$FF
.LOOP:
 INY
 LDA (TEXTMO),Y
 BPL .LOOP
 CMP #ENDT
 BCC .LOOP
 BEQ FIOUT
 INY
;
 CLC
 TYA
 ADC TEXTMO
 STA TEXTMO
 BCC AD28SM
 INC TEXTMO+1
AD28SM:
 LDA #$28
ADDASM:
 CLC
 ADC SCRMO
 STA SCRMO
 BCC FIOUT
 INC SCRMO+1
FIOUT:
 RTS
;
FILLSC:
;
 LDY TMINDX
FILLSC0:
 LDA #$60          ;SHIFTED SPACE
FILINE:
 JSR FILLLN1
 JSR AD28SM
 LDY #0
;
 LDX SCRMO+1
 CPX #7            ;SCRN
 BNE FILLSC0
;
 CMP #$D7          ;SCRN
 BCC FILLSC0
 RTS
;
AD28SC:
 LDA #$28
ADD_A_SCREEN:
 CLC
 ADC SCREEN
 STA SCREEN
 BCC .SKP0342
 INC SCREEN+1
.SKP0342:
 RTS
;
;
!eof
;
; PUBLIC AD28SC
; PUBLIC ADDASM
; PUBLIC AD28SM
; PUBLIC DISPLY
; PUBLIC DISPLAYOFF
; PUBLIC DISPLYOFF
; PUBLIC DISPLAYON
; PUBLIC END_BLOCK
; PUBLIC IN_CURRENT_BLOCK
; PUBLIC MAXIMUM_LINES
; PUBLIC MAXIMUM_LINES_M2
; PUBLIC START_BLOCK
; PUBLIC START_BLK_1ST_LINE_CHAR
; PUBLIC RESET
; PUBLIC RESET_1
; PUBLIC RESET_AND_DISPLAY
; EXTERN DISPLAY_ON_NO_DISPLAY
; EXTERN EDIT_LINE
